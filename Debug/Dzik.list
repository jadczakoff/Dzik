
Dzik.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005b78  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  08005c38  08005c38  00015c38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005cb0  08005cb0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08005cb0  08005cb0  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005cb0  08005cb0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005cb0  08005cb0  00015cb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005cb4  08005cb4  00015cb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08005cb8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001dc  2000000c  08005cc4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001e8  08005cc4  000201e8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e768  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000021b6  00000000  00000000  0002e79c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ce0  00000000  00000000  00030958  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000bf8  00000000  00000000  00031638  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000188f8  00000000  00000000  00032230  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001027c  00000000  00000000  0004ab28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008dec2  00000000  00000000  0005ada4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e8c66  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002f74  00000000  00000000  000e8cb8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08005c20 	.word	0x08005c20

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08005c20 	.word	0x08005c20

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_d2uiz>:
 8000220:	b570      	push	{r4, r5, r6, lr}
 8000222:	2200      	movs	r2, #0
 8000224:	4b0c      	ldr	r3, [pc, #48]	; (8000258 <__aeabi_d2uiz+0x38>)
 8000226:	0004      	movs	r4, r0
 8000228:	000d      	movs	r5, r1
 800022a:	f001 fa51 	bl	80016d0 <__aeabi_dcmpge>
 800022e:	2800      	cmp	r0, #0
 8000230:	d104      	bne.n	800023c <__aeabi_d2uiz+0x1c>
 8000232:	0020      	movs	r0, r4
 8000234:	0029      	movs	r1, r5
 8000236:	f001 f999 	bl	800156c <__aeabi_d2iz>
 800023a:	bd70      	pop	{r4, r5, r6, pc}
 800023c:	4b06      	ldr	r3, [pc, #24]	; (8000258 <__aeabi_d2uiz+0x38>)
 800023e:	2200      	movs	r2, #0
 8000240:	0020      	movs	r0, r4
 8000242:	0029      	movs	r1, r5
 8000244:	f000 fe00 	bl	8000e48 <__aeabi_dsub>
 8000248:	f001 f990 	bl	800156c <__aeabi_d2iz>
 800024c:	2380      	movs	r3, #128	; 0x80
 800024e:	061b      	lsls	r3, r3, #24
 8000250:	469c      	mov	ip, r3
 8000252:	4460      	add	r0, ip
 8000254:	e7f1      	b.n	800023a <__aeabi_d2uiz+0x1a>
 8000256:	46c0      	nop			; (mov r8, r8)
 8000258:	41e00000 	.word	0x41e00000

0800025c <__aeabi_i2f>:
 800025c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800025e:	2800      	cmp	r0, #0
 8000260:	d013      	beq.n	800028a <__aeabi_i2f+0x2e>
 8000262:	17c3      	asrs	r3, r0, #31
 8000264:	18c6      	adds	r6, r0, r3
 8000266:	405e      	eors	r6, r3
 8000268:	0fc4      	lsrs	r4, r0, #31
 800026a:	0030      	movs	r0, r6
 800026c:	f001 fa3a 	bl	80016e4 <__clzsi2>
 8000270:	239e      	movs	r3, #158	; 0x9e
 8000272:	0005      	movs	r5, r0
 8000274:	1a1b      	subs	r3, r3, r0
 8000276:	2b96      	cmp	r3, #150	; 0x96
 8000278:	dc0f      	bgt.n	800029a <__aeabi_i2f+0x3e>
 800027a:	2808      	cmp	r0, #8
 800027c:	dd01      	ble.n	8000282 <__aeabi_i2f+0x26>
 800027e:	3d08      	subs	r5, #8
 8000280:	40ae      	lsls	r6, r5
 8000282:	0276      	lsls	r6, r6, #9
 8000284:	0a76      	lsrs	r6, r6, #9
 8000286:	b2d8      	uxtb	r0, r3
 8000288:	e002      	b.n	8000290 <__aeabi_i2f+0x34>
 800028a:	2400      	movs	r4, #0
 800028c:	2000      	movs	r0, #0
 800028e:	2600      	movs	r6, #0
 8000290:	05c0      	lsls	r0, r0, #23
 8000292:	4330      	orrs	r0, r6
 8000294:	07e4      	lsls	r4, r4, #31
 8000296:	4320      	orrs	r0, r4
 8000298:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800029a:	2b99      	cmp	r3, #153	; 0x99
 800029c:	dd0c      	ble.n	80002b8 <__aeabi_i2f+0x5c>
 800029e:	2205      	movs	r2, #5
 80002a0:	0031      	movs	r1, r6
 80002a2:	1a12      	subs	r2, r2, r0
 80002a4:	40d1      	lsrs	r1, r2
 80002a6:	000a      	movs	r2, r1
 80002a8:	0001      	movs	r1, r0
 80002aa:	0030      	movs	r0, r6
 80002ac:	311b      	adds	r1, #27
 80002ae:	4088      	lsls	r0, r1
 80002b0:	1e41      	subs	r1, r0, #1
 80002b2:	4188      	sbcs	r0, r1
 80002b4:	4302      	orrs	r2, r0
 80002b6:	0016      	movs	r6, r2
 80002b8:	2d05      	cmp	r5, #5
 80002ba:	dc12      	bgt.n	80002e2 <__aeabi_i2f+0x86>
 80002bc:	0031      	movs	r1, r6
 80002be:	4f0d      	ldr	r7, [pc, #52]	; (80002f4 <__aeabi_i2f+0x98>)
 80002c0:	4039      	ands	r1, r7
 80002c2:	0772      	lsls	r2, r6, #29
 80002c4:	d009      	beq.n	80002da <__aeabi_i2f+0x7e>
 80002c6:	200f      	movs	r0, #15
 80002c8:	4030      	ands	r0, r6
 80002ca:	2804      	cmp	r0, #4
 80002cc:	d005      	beq.n	80002da <__aeabi_i2f+0x7e>
 80002ce:	3104      	adds	r1, #4
 80002d0:	014a      	lsls	r2, r1, #5
 80002d2:	d502      	bpl.n	80002da <__aeabi_i2f+0x7e>
 80002d4:	239f      	movs	r3, #159	; 0x9f
 80002d6:	4039      	ands	r1, r7
 80002d8:	1b5b      	subs	r3, r3, r5
 80002da:	0189      	lsls	r1, r1, #6
 80002dc:	0a4e      	lsrs	r6, r1, #9
 80002de:	b2d8      	uxtb	r0, r3
 80002e0:	e7d6      	b.n	8000290 <__aeabi_i2f+0x34>
 80002e2:	1f6a      	subs	r2, r5, #5
 80002e4:	4096      	lsls	r6, r2
 80002e6:	0031      	movs	r1, r6
 80002e8:	4f02      	ldr	r7, [pc, #8]	; (80002f4 <__aeabi_i2f+0x98>)
 80002ea:	4039      	ands	r1, r7
 80002ec:	0772      	lsls	r2, r6, #29
 80002ee:	d0f4      	beq.n	80002da <__aeabi_i2f+0x7e>
 80002f0:	e7e9      	b.n	80002c6 <__aeabi_i2f+0x6a>
 80002f2:	46c0      	nop			; (mov r8, r8)
 80002f4:	fbffffff 	.word	0xfbffffff

080002f8 <__aeabi_dadd>:
 80002f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002fa:	464f      	mov	r7, r9
 80002fc:	4646      	mov	r6, r8
 80002fe:	46d6      	mov	lr, sl
 8000300:	000d      	movs	r5, r1
 8000302:	0004      	movs	r4, r0
 8000304:	b5c0      	push	{r6, r7, lr}
 8000306:	001f      	movs	r7, r3
 8000308:	0011      	movs	r1, r2
 800030a:	0328      	lsls	r0, r5, #12
 800030c:	0f62      	lsrs	r2, r4, #29
 800030e:	0a40      	lsrs	r0, r0, #9
 8000310:	4310      	orrs	r0, r2
 8000312:	007a      	lsls	r2, r7, #1
 8000314:	0d52      	lsrs	r2, r2, #21
 8000316:	00e3      	lsls	r3, r4, #3
 8000318:	033c      	lsls	r4, r7, #12
 800031a:	4691      	mov	r9, r2
 800031c:	0a64      	lsrs	r4, r4, #9
 800031e:	0ffa      	lsrs	r2, r7, #31
 8000320:	0f4f      	lsrs	r7, r1, #29
 8000322:	006e      	lsls	r6, r5, #1
 8000324:	4327      	orrs	r7, r4
 8000326:	4692      	mov	sl, r2
 8000328:	46b8      	mov	r8, r7
 800032a:	0d76      	lsrs	r6, r6, #21
 800032c:	0fed      	lsrs	r5, r5, #31
 800032e:	00c9      	lsls	r1, r1, #3
 8000330:	4295      	cmp	r5, r2
 8000332:	d100      	bne.n	8000336 <__aeabi_dadd+0x3e>
 8000334:	e099      	b.n	800046a <__aeabi_dadd+0x172>
 8000336:	464c      	mov	r4, r9
 8000338:	1b34      	subs	r4, r6, r4
 800033a:	46a4      	mov	ip, r4
 800033c:	2c00      	cmp	r4, #0
 800033e:	dc00      	bgt.n	8000342 <__aeabi_dadd+0x4a>
 8000340:	e07c      	b.n	800043c <__aeabi_dadd+0x144>
 8000342:	464a      	mov	r2, r9
 8000344:	2a00      	cmp	r2, #0
 8000346:	d100      	bne.n	800034a <__aeabi_dadd+0x52>
 8000348:	e0b8      	b.n	80004bc <__aeabi_dadd+0x1c4>
 800034a:	4ac5      	ldr	r2, [pc, #788]	; (8000660 <__aeabi_dadd+0x368>)
 800034c:	4296      	cmp	r6, r2
 800034e:	d100      	bne.n	8000352 <__aeabi_dadd+0x5a>
 8000350:	e11c      	b.n	800058c <__aeabi_dadd+0x294>
 8000352:	2280      	movs	r2, #128	; 0x80
 8000354:	003c      	movs	r4, r7
 8000356:	0412      	lsls	r2, r2, #16
 8000358:	4314      	orrs	r4, r2
 800035a:	46a0      	mov	r8, r4
 800035c:	4662      	mov	r2, ip
 800035e:	2a38      	cmp	r2, #56	; 0x38
 8000360:	dd00      	ble.n	8000364 <__aeabi_dadd+0x6c>
 8000362:	e161      	b.n	8000628 <__aeabi_dadd+0x330>
 8000364:	2a1f      	cmp	r2, #31
 8000366:	dd00      	ble.n	800036a <__aeabi_dadd+0x72>
 8000368:	e1cc      	b.n	8000704 <__aeabi_dadd+0x40c>
 800036a:	4664      	mov	r4, ip
 800036c:	2220      	movs	r2, #32
 800036e:	1b12      	subs	r2, r2, r4
 8000370:	4644      	mov	r4, r8
 8000372:	4094      	lsls	r4, r2
 8000374:	000f      	movs	r7, r1
 8000376:	46a1      	mov	r9, r4
 8000378:	4664      	mov	r4, ip
 800037a:	4091      	lsls	r1, r2
 800037c:	40e7      	lsrs	r7, r4
 800037e:	464c      	mov	r4, r9
 8000380:	1e4a      	subs	r2, r1, #1
 8000382:	4191      	sbcs	r1, r2
 8000384:	433c      	orrs	r4, r7
 8000386:	4642      	mov	r2, r8
 8000388:	4321      	orrs	r1, r4
 800038a:	4664      	mov	r4, ip
 800038c:	40e2      	lsrs	r2, r4
 800038e:	1a80      	subs	r0, r0, r2
 8000390:	1a5c      	subs	r4, r3, r1
 8000392:	42a3      	cmp	r3, r4
 8000394:	419b      	sbcs	r3, r3
 8000396:	425f      	negs	r7, r3
 8000398:	1bc7      	subs	r7, r0, r7
 800039a:	023b      	lsls	r3, r7, #8
 800039c:	d400      	bmi.n	80003a0 <__aeabi_dadd+0xa8>
 800039e:	e0d0      	b.n	8000542 <__aeabi_dadd+0x24a>
 80003a0:	027f      	lsls	r7, r7, #9
 80003a2:	0a7f      	lsrs	r7, r7, #9
 80003a4:	2f00      	cmp	r7, #0
 80003a6:	d100      	bne.n	80003aa <__aeabi_dadd+0xb2>
 80003a8:	e0ff      	b.n	80005aa <__aeabi_dadd+0x2b2>
 80003aa:	0038      	movs	r0, r7
 80003ac:	f001 f99a 	bl	80016e4 <__clzsi2>
 80003b0:	0001      	movs	r1, r0
 80003b2:	3908      	subs	r1, #8
 80003b4:	2320      	movs	r3, #32
 80003b6:	0022      	movs	r2, r4
 80003b8:	1a5b      	subs	r3, r3, r1
 80003ba:	408f      	lsls	r7, r1
 80003bc:	40da      	lsrs	r2, r3
 80003be:	408c      	lsls	r4, r1
 80003c0:	4317      	orrs	r7, r2
 80003c2:	42b1      	cmp	r1, r6
 80003c4:	da00      	bge.n	80003c8 <__aeabi_dadd+0xd0>
 80003c6:	e0ff      	b.n	80005c8 <__aeabi_dadd+0x2d0>
 80003c8:	1b89      	subs	r1, r1, r6
 80003ca:	1c4b      	adds	r3, r1, #1
 80003cc:	2b1f      	cmp	r3, #31
 80003ce:	dd00      	ble.n	80003d2 <__aeabi_dadd+0xda>
 80003d0:	e0a8      	b.n	8000524 <__aeabi_dadd+0x22c>
 80003d2:	2220      	movs	r2, #32
 80003d4:	0039      	movs	r1, r7
 80003d6:	1ad2      	subs	r2, r2, r3
 80003d8:	0020      	movs	r0, r4
 80003da:	4094      	lsls	r4, r2
 80003dc:	4091      	lsls	r1, r2
 80003de:	40d8      	lsrs	r0, r3
 80003e0:	1e62      	subs	r2, r4, #1
 80003e2:	4194      	sbcs	r4, r2
 80003e4:	40df      	lsrs	r7, r3
 80003e6:	2600      	movs	r6, #0
 80003e8:	4301      	orrs	r1, r0
 80003ea:	430c      	orrs	r4, r1
 80003ec:	0763      	lsls	r3, r4, #29
 80003ee:	d009      	beq.n	8000404 <__aeabi_dadd+0x10c>
 80003f0:	230f      	movs	r3, #15
 80003f2:	4023      	ands	r3, r4
 80003f4:	2b04      	cmp	r3, #4
 80003f6:	d005      	beq.n	8000404 <__aeabi_dadd+0x10c>
 80003f8:	1d23      	adds	r3, r4, #4
 80003fa:	42a3      	cmp	r3, r4
 80003fc:	41a4      	sbcs	r4, r4
 80003fe:	4264      	negs	r4, r4
 8000400:	193f      	adds	r7, r7, r4
 8000402:	001c      	movs	r4, r3
 8000404:	023b      	lsls	r3, r7, #8
 8000406:	d400      	bmi.n	800040a <__aeabi_dadd+0x112>
 8000408:	e09e      	b.n	8000548 <__aeabi_dadd+0x250>
 800040a:	4b95      	ldr	r3, [pc, #596]	; (8000660 <__aeabi_dadd+0x368>)
 800040c:	3601      	adds	r6, #1
 800040e:	429e      	cmp	r6, r3
 8000410:	d100      	bne.n	8000414 <__aeabi_dadd+0x11c>
 8000412:	e0b7      	b.n	8000584 <__aeabi_dadd+0x28c>
 8000414:	4a93      	ldr	r2, [pc, #588]	; (8000664 <__aeabi_dadd+0x36c>)
 8000416:	08e4      	lsrs	r4, r4, #3
 8000418:	4017      	ands	r7, r2
 800041a:	077b      	lsls	r3, r7, #29
 800041c:	0571      	lsls	r1, r6, #21
 800041e:	027f      	lsls	r7, r7, #9
 8000420:	4323      	orrs	r3, r4
 8000422:	0b3f      	lsrs	r7, r7, #12
 8000424:	0d4a      	lsrs	r2, r1, #21
 8000426:	0512      	lsls	r2, r2, #20
 8000428:	433a      	orrs	r2, r7
 800042a:	07ed      	lsls	r5, r5, #31
 800042c:	432a      	orrs	r2, r5
 800042e:	0018      	movs	r0, r3
 8000430:	0011      	movs	r1, r2
 8000432:	bce0      	pop	{r5, r6, r7}
 8000434:	46ba      	mov	sl, r7
 8000436:	46b1      	mov	r9, r6
 8000438:	46a8      	mov	r8, r5
 800043a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800043c:	2c00      	cmp	r4, #0
 800043e:	d04b      	beq.n	80004d8 <__aeabi_dadd+0x1e0>
 8000440:	464c      	mov	r4, r9
 8000442:	1ba4      	subs	r4, r4, r6
 8000444:	46a4      	mov	ip, r4
 8000446:	2e00      	cmp	r6, #0
 8000448:	d000      	beq.n	800044c <__aeabi_dadd+0x154>
 800044a:	e123      	b.n	8000694 <__aeabi_dadd+0x39c>
 800044c:	0004      	movs	r4, r0
 800044e:	431c      	orrs	r4, r3
 8000450:	d100      	bne.n	8000454 <__aeabi_dadd+0x15c>
 8000452:	e1af      	b.n	80007b4 <__aeabi_dadd+0x4bc>
 8000454:	4662      	mov	r2, ip
 8000456:	1e54      	subs	r4, r2, #1
 8000458:	2a01      	cmp	r2, #1
 800045a:	d100      	bne.n	800045e <__aeabi_dadd+0x166>
 800045c:	e215      	b.n	800088a <__aeabi_dadd+0x592>
 800045e:	4d80      	ldr	r5, [pc, #512]	; (8000660 <__aeabi_dadd+0x368>)
 8000460:	45ac      	cmp	ip, r5
 8000462:	d100      	bne.n	8000466 <__aeabi_dadd+0x16e>
 8000464:	e1c8      	b.n	80007f8 <__aeabi_dadd+0x500>
 8000466:	46a4      	mov	ip, r4
 8000468:	e11b      	b.n	80006a2 <__aeabi_dadd+0x3aa>
 800046a:	464a      	mov	r2, r9
 800046c:	1ab2      	subs	r2, r6, r2
 800046e:	4694      	mov	ip, r2
 8000470:	2a00      	cmp	r2, #0
 8000472:	dc00      	bgt.n	8000476 <__aeabi_dadd+0x17e>
 8000474:	e0ac      	b.n	80005d0 <__aeabi_dadd+0x2d8>
 8000476:	464a      	mov	r2, r9
 8000478:	2a00      	cmp	r2, #0
 800047a:	d043      	beq.n	8000504 <__aeabi_dadd+0x20c>
 800047c:	4a78      	ldr	r2, [pc, #480]	; (8000660 <__aeabi_dadd+0x368>)
 800047e:	4296      	cmp	r6, r2
 8000480:	d100      	bne.n	8000484 <__aeabi_dadd+0x18c>
 8000482:	e1af      	b.n	80007e4 <__aeabi_dadd+0x4ec>
 8000484:	2280      	movs	r2, #128	; 0x80
 8000486:	003c      	movs	r4, r7
 8000488:	0412      	lsls	r2, r2, #16
 800048a:	4314      	orrs	r4, r2
 800048c:	46a0      	mov	r8, r4
 800048e:	4662      	mov	r2, ip
 8000490:	2a38      	cmp	r2, #56	; 0x38
 8000492:	dc67      	bgt.n	8000564 <__aeabi_dadd+0x26c>
 8000494:	2a1f      	cmp	r2, #31
 8000496:	dc00      	bgt.n	800049a <__aeabi_dadd+0x1a2>
 8000498:	e15f      	b.n	800075a <__aeabi_dadd+0x462>
 800049a:	4647      	mov	r7, r8
 800049c:	3a20      	subs	r2, #32
 800049e:	40d7      	lsrs	r7, r2
 80004a0:	4662      	mov	r2, ip
 80004a2:	2a20      	cmp	r2, #32
 80004a4:	d005      	beq.n	80004b2 <__aeabi_dadd+0x1ba>
 80004a6:	4664      	mov	r4, ip
 80004a8:	2240      	movs	r2, #64	; 0x40
 80004aa:	1b12      	subs	r2, r2, r4
 80004ac:	4644      	mov	r4, r8
 80004ae:	4094      	lsls	r4, r2
 80004b0:	4321      	orrs	r1, r4
 80004b2:	1e4a      	subs	r2, r1, #1
 80004b4:	4191      	sbcs	r1, r2
 80004b6:	000c      	movs	r4, r1
 80004b8:	433c      	orrs	r4, r7
 80004ba:	e057      	b.n	800056c <__aeabi_dadd+0x274>
 80004bc:	003a      	movs	r2, r7
 80004be:	430a      	orrs	r2, r1
 80004c0:	d100      	bne.n	80004c4 <__aeabi_dadd+0x1cc>
 80004c2:	e105      	b.n	80006d0 <__aeabi_dadd+0x3d8>
 80004c4:	0022      	movs	r2, r4
 80004c6:	3a01      	subs	r2, #1
 80004c8:	2c01      	cmp	r4, #1
 80004ca:	d100      	bne.n	80004ce <__aeabi_dadd+0x1d6>
 80004cc:	e182      	b.n	80007d4 <__aeabi_dadd+0x4dc>
 80004ce:	4c64      	ldr	r4, [pc, #400]	; (8000660 <__aeabi_dadd+0x368>)
 80004d0:	45a4      	cmp	ip, r4
 80004d2:	d05b      	beq.n	800058c <__aeabi_dadd+0x294>
 80004d4:	4694      	mov	ip, r2
 80004d6:	e741      	b.n	800035c <__aeabi_dadd+0x64>
 80004d8:	4c63      	ldr	r4, [pc, #396]	; (8000668 <__aeabi_dadd+0x370>)
 80004da:	1c77      	adds	r7, r6, #1
 80004dc:	4227      	tst	r7, r4
 80004de:	d000      	beq.n	80004e2 <__aeabi_dadd+0x1ea>
 80004e0:	e0c4      	b.n	800066c <__aeabi_dadd+0x374>
 80004e2:	0004      	movs	r4, r0
 80004e4:	431c      	orrs	r4, r3
 80004e6:	2e00      	cmp	r6, #0
 80004e8:	d000      	beq.n	80004ec <__aeabi_dadd+0x1f4>
 80004ea:	e169      	b.n	80007c0 <__aeabi_dadd+0x4c8>
 80004ec:	2c00      	cmp	r4, #0
 80004ee:	d100      	bne.n	80004f2 <__aeabi_dadd+0x1fa>
 80004f0:	e1bf      	b.n	8000872 <__aeabi_dadd+0x57a>
 80004f2:	4644      	mov	r4, r8
 80004f4:	430c      	orrs	r4, r1
 80004f6:	d000      	beq.n	80004fa <__aeabi_dadd+0x202>
 80004f8:	e1d0      	b.n	800089c <__aeabi_dadd+0x5a4>
 80004fa:	0742      	lsls	r2, r0, #29
 80004fc:	08db      	lsrs	r3, r3, #3
 80004fe:	4313      	orrs	r3, r2
 8000500:	08c0      	lsrs	r0, r0, #3
 8000502:	e029      	b.n	8000558 <__aeabi_dadd+0x260>
 8000504:	003a      	movs	r2, r7
 8000506:	430a      	orrs	r2, r1
 8000508:	d100      	bne.n	800050c <__aeabi_dadd+0x214>
 800050a:	e170      	b.n	80007ee <__aeabi_dadd+0x4f6>
 800050c:	4662      	mov	r2, ip
 800050e:	4664      	mov	r4, ip
 8000510:	3a01      	subs	r2, #1
 8000512:	2c01      	cmp	r4, #1
 8000514:	d100      	bne.n	8000518 <__aeabi_dadd+0x220>
 8000516:	e0e0      	b.n	80006da <__aeabi_dadd+0x3e2>
 8000518:	4c51      	ldr	r4, [pc, #324]	; (8000660 <__aeabi_dadd+0x368>)
 800051a:	45a4      	cmp	ip, r4
 800051c:	d100      	bne.n	8000520 <__aeabi_dadd+0x228>
 800051e:	e161      	b.n	80007e4 <__aeabi_dadd+0x4ec>
 8000520:	4694      	mov	ip, r2
 8000522:	e7b4      	b.n	800048e <__aeabi_dadd+0x196>
 8000524:	003a      	movs	r2, r7
 8000526:	391f      	subs	r1, #31
 8000528:	40ca      	lsrs	r2, r1
 800052a:	0011      	movs	r1, r2
 800052c:	2b20      	cmp	r3, #32
 800052e:	d003      	beq.n	8000538 <__aeabi_dadd+0x240>
 8000530:	2240      	movs	r2, #64	; 0x40
 8000532:	1ad3      	subs	r3, r2, r3
 8000534:	409f      	lsls	r7, r3
 8000536:	433c      	orrs	r4, r7
 8000538:	1e63      	subs	r3, r4, #1
 800053a:	419c      	sbcs	r4, r3
 800053c:	2700      	movs	r7, #0
 800053e:	2600      	movs	r6, #0
 8000540:	430c      	orrs	r4, r1
 8000542:	0763      	lsls	r3, r4, #29
 8000544:	d000      	beq.n	8000548 <__aeabi_dadd+0x250>
 8000546:	e753      	b.n	80003f0 <__aeabi_dadd+0xf8>
 8000548:	46b4      	mov	ip, r6
 800054a:	08e4      	lsrs	r4, r4, #3
 800054c:	077b      	lsls	r3, r7, #29
 800054e:	4323      	orrs	r3, r4
 8000550:	08f8      	lsrs	r0, r7, #3
 8000552:	4a43      	ldr	r2, [pc, #268]	; (8000660 <__aeabi_dadd+0x368>)
 8000554:	4594      	cmp	ip, r2
 8000556:	d01d      	beq.n	8000594 <__aeabi_dadd+0x29c>
 8000558:	4662      	mov	r2, ip
 800055a:	0307      	lsls	r7, r0, #12
 800055c:	0552      	lsls	r2, r2, #21
 800055e:	0b3f      	lsrs	r7, r7, #12
 8000560:	0d52      	lsrs	r2, r2, #21
 8000562:	e760      	b.n	8000426 <__aeabi_dadd+0x12e>
 8000564:	4644      	mov	r4, r8
 8000566:	430c      	orrs	r4, r1
 8000568:	1e62      	subs	r2, r4, #1
 800056a:	4194      	sbcs	r4, r2
 800056c:	18e4      	adds	r4, r4, r3
 800056e:	429c      	cmp	r4, r3
 8000570:	419b      	sbcs	r3, r3
 8000572:	425f      	negs	r7, r3
 8000574:	183f      	adds	r7, r7, r0
 8000576:	023b      	lsls	r3, r7, #8
 8000578:	d5e3      	bpl.n	8000542 <__aeabi_dadd+0x24a>
 800057a:	4b39      	ldr	r3, [pc, #228]	; (8000660 <__aeabi_dadd+0x368>)
 800057c:	3601      	adds	r6, #1
 800057e:	429e      	cmp	r6, r3
 8000580:	d000      	beq.n	8000584 <__aeabi_dadd+0x28c>
 8000582:	e0b5      	b.n	80006f0 <__aeabi_dadd+0x3f8>
 8000584:	0032      	movs	r2, r6
 8000586:	2700      	movs	r7, #0
 8000588:	2300      	movs	r3, #0
 800058a:	e74c      	b.n	8000426 <__aeabi_dadd+0x12e>
 800058c:	0742      	lsls	r2, r0, #29
 800058e:	08db      	lsrs	r3, r3, #3
 8000590:	4313      	orrs	r3, r2
 8000592:	08c0      	lsrs	r0, r0, #3
 8000594:	001a      	movs	r2, r3
 8000596:	4302      	orrs	r2, r0
 8000598:	d100      	bne.n	800059c <__aeabi_dadd+0x2a4>
 800059a:	e1e1      	b.n	8000960 <__aeabi_dadd+0x668>
 800059c:	2780      	movs	r7, #128	; 0x80
 800059e:	033f      	lsls	r7, r7, #12
 80005a0:	4307      	orrs	r7, r0
 80005a2:	033f      	lsls	r7, r7, #12
 80005a4:	4a2e      	ldr	r2, [pc, #184]	; (8000660 <__aeabi_dadd+0x368>)
 80005a6:	0b3f      	lsrs	r7, r7, #12
 80005a8:	e73d      	b.n	8000426 <__aeabi_dadd+0x12e>
 80005aa:	0020      	movs	r0, r4
 80005ac:	f001 f89a 	bl	80016e4 <__clzsi2>
 80005b0:	0001      	movs	r1, r0
 80005b2:	3118      	adds	r1, #24
 80005b4:	291f      	cmp	r1, #31
 80005b6:	dc00      	bgt.n	80005ba <__aeabi_dadd+0x2c2>
 80005b8:	e6fc      	b.n	80003b4 <__aeabi_dadd+0xbc>
 80005ba:	3808      	subs	r0, #8
 80005bc:	4084      	lsls	r4, r0
 80005be:	0027      	movs	r7, r4
 80005c0:	2400      	movs	r4, #0
 80005c2:	42b1      	cmp	r1, r6
 80005c4:	db00      	blt.n	80005c8 <__aeabi_dadd+0x2d0>
 80005c6:	e6ff      	b.n	80003c8 <__aeabi_dadd+0xd0>
 80005c8:	4a26      	ldr	r2, [pc, #152]	; (8000664 <__aeabi_dadd+0x36c>)
 80005ca:	1a76      	subs	r6, r6, r1
 80005cc:	4017      	ands	r7, r2
 80005ce:	e70d      	b.n	80003ec <__aeabi_dadd+0xf4>
 80005d0:	2a00      	cmp	r2, #0
 80005d2:	d02f      	beq.n	8000634 <__aeabi_dadd+0x33c>
 80005d4:	464a      	mov	r2, r9
 80005d6:	1b92      	subs	r2, r2, r6
 80005d8:	4694      	mov	ip, r2
 80005da:	2e00      	cmp	r6, #0
 80005dc:	d100      	bne.n	80005e0 <__aeabi_dadd+0x2e8>
 80005de:	e0ad      	b.n	800073c <__aeabi_dadd+0x444>
 80005e0:	4a1f      	ldr	r2, [pc, #124]	; (8000660 <__aeabi_dadd+0x368>)
 80005e2:	4591      	cmp	r9, r2
 80005e4:	d100      	bne.n	80005e8 <__aeabi_dadd+0x2f0>
 80005e6:	e10f      	b.n	8000808 <__aeabi_dadd+0x510>
 80005e8:	2280      	movs	r2, #128	; 0x80
 80005ea:	0412      	lsls	r2, r2, #16
 80005ec:	4310      	orrs	r0, r2
 80005ee:	4662      	mov	r2, ip
 80005f0:	2a38      	cmp	r2, #56	; 0x38
 80005f2:	dd00      	ble.n	80005f6 <__aeabi_dadd+0x2fe>
 80005f4:	e10f      	b.n	8000816 <__aeabi_dadd+0x51e>
 80005f6:	2a1f      	cmp	r2, #31
 80005f8:	dd00      	ble.n	80005fc <__aeabi_dadd+0x304>
 80005fa:	e180      	b.n	80008fe <__aeabi_dadd+0x606>
 80005fc:	4664      	mov	r4, ip
 80005fe:	2220      	movs	r2, #32
 8000600:	001e      	movs	r6, r3
 8000602:	1b12      	subs	r2, r2, r4
 8000604:	4667      	mov	r7, ip
 8000606:	0004      	movs	r4, r0
 8000608:	4093      	lsls	r3, r2
 800060a:	4094      	lsls	r4, r2
 800060c:	40fe      	lsrs	r6, r7
 800060e:	1e5a      	subs	r2, r3, #1
 8000610:	4193      	sbcs	r3, r2
 8000612:	40f8      	lsrs	r0, r7
 8000614:	4334      	orrs	r4, r6
 8000616:	431c      	orrs	r4, r3
 8000618:	4480      	add	r8, r0
 800061a:	1864      	adds	r4, r4, r1
 800061c:	428c      	cmp	r4, r1
 800061e:	41bf      	sbcs	r7, r7
 8000620:	427f      	negs	r7, r7
 8000622:	464e      	mov	r6, r9
 8000624:	4447      	add	r7, r8
 8000626:	e7a6      	b.n	8000576 <__aeabi_dadd+0x27e>
 8000628:	4642      	mov	r2, r8
 800062a:	430a      	orrs	r2, r1
 800062c:	0011      	movs	r1, r2
 800062e:	1e4a      	subs	r2, r1, #1
 8000630:	4191      	sbcs	r1, r2
 8000632:	e6ad      	b.n	8000390 <__aeabi_dadd+0x98>
 8000634:	4c0c      	ldr	r4, [pc, #48]	; (8000668 <__aeabi_dadd+0x370>)
 8000636:	1c72      	adds	r2, r6, #1
 8000638:	4222      	tst	r2, r4
 800063a:	d000      	beq.n	800063e <__aeabi_dadd+0x346>
 800063c:	e0a1      	b.n	8000782 <__aeabi_dadd+0x48a>
 800063e:	0002      	movs	r2, r0
 8000640:	431a      	orrs	r2, r3
 8000642:	2e00      	cmp	r6, #0
 8000644:	d000      	beq.n	8000648 <__aeabi_dadd+0x350>
 8000646:	e0fa      	b.n	800083e <__aeabi_dadd+0x546>
 8000648:	2a00      	cmp	r2, #0
 800064a:	d100      	bne.n	800064e <__aeabi_dadd+0x356>
 800064c:	e145      	b.n	80008da <__aeabi_dadd+0x5e2>
 800064e:	003a      	movs	r2, r7
 8000650:	430a      	orrs	r2, r1
 8000652:	d000      	beq.n	8000656 <__aeabi_dadd+0x35e>
 8000654:	e146      	b.n	80008e4 <__aeabi_dadd+0x5ec>
 8000656:	0742      	lsls	r2, r0, #29
 8000658:	08db      	lsrs	r3, r3, #3
 800065a:	4313      	orrs	r3, r2
 800065c:	08c0      	lsrs	r0, r0, #3
 800065e:	e77b      	b.n	8000558 <__aeabi_dadd+0x260>
 8000660:	000007ff 	.word	0x000007ff
 8000664:	ff7fffff 	.word	0xff7fffff
 8000668:	000007fe 	.word	0x000007fe
 800066c:	4647      	mov	r7, r8
 800066e:	1a5c      	subs	r4, r3, r1
 8000670:	1bc2      	subs	r2, r0, r7
 8000672:	42a3      	cmp	r3, r4
 8000674:	41bf      	sbcs	r7, r7
 8000676:	427f      	negs	r7, r7
 8000678:	46b9      	mov	r9, r7
 800067a:	0017      	movs	r7, r2
 800067c:	464a      	mov	r2, r9
 800067e:	1abf      	subs	r7, r7, r2
 8000680:	023a      	lsls	r2, r7, #8
 8000682:	d500      	bpl.n	8000686 <__aeabi_dadd+0x38e>
 8000684:	e08d      	b.n	80007a2 <__aeabi_dadd+0x4aa>
 8000686:	0023      	movs	r3, r4
 8000688:	433b      	orrs	r3, r7
 800068a:	d000      	beq.n	800068e <__aeabi_dadd+0x396>
 800068c:	e68a      	b.n	80003a4 <__aeabi_dadd+0xac>
 800068e:	2000      	movs	r0, #0
 8000690:	2500      	movs	r5, #0
 8000692:	e761      	b.n	8000558 <__aeabi_dadd+0x260>
 8000694:	4cb4      	ldr	r4, [pc, #720]	; (8000968 <__aeabi_dadd+0x670>)
 8000696:	45a1      	cmp	r9, r4
 8000698:	d100      	bne.n	800069c <__aeabi_dadd+0x3a4>
 800069a:	e0ad      	b.n	80007f8 <__aeabi_dadd+0x500>
 800069c:	2480      	movs	r4, #128	; 0x80
 800069e:	0424      	lsls	r4, r4, #16
 80006a0:	4320      	orrs	r0, r4
 80006a2:	4664      	mov	r4, ip
 80006a4:	2c38      	cmp	r4, #56	; 0x38
 80006a6:	dc3d      	bgt.n	8000724 <__aeabi_dadd+0x42c>
 80006a8:	4662      	mov	r2, ip
 80006aa:	2c1f      	cmp	r4, #31
 80006ac:	dd00      	ble.n	80006b0 <__aeabi_dadd+0x3b8>
 80006ae:	e0b7      	b.n	8000820 <__aeabi_dadd+0x528>
 80006b0:	2520      	movs	r5, #32
 80006b2:	001e      	movs	r6, r3
 80006b4:	1b2d      	subs	r5, r5, r4
 80006b6:	0004      	movs	r4, r0
 80006b8:	40ab      	lsls	r3, r5
 80006ba:	40ac      	lsls	r4, r5
 80006bc:	40d6      	lsrs	r6, r2
 80006be:	40d0      	lsrs	r0, r2
 80006c0:	4642      	mov	r2, r8
 80006c2:	1e5d      	subs	r5, r3, #1
 80006c4:	41ab      	sbcs	r3, r5
 80006c6:	4334      	orrs	r4, r6
 80006c8:	1a12      	subs	r2, r2, r0
 80006ca:	4690      	mov	r8, r2
 80006cc:	4323      	orrs	r3, r4
 80006ce:	e02c      	b.n	800072a <__aeabi_dadd+0x432>
 80006d0:	0742      	lsls	r2, r0, #29
 80006d2:	08db      	lsrs	r3, r3, #3
 80006d4:	4313      	orrs	r3, r2
 80006d6:	08c0      	lsrs	r0, r0, #3
 80006d8:	e73b      	b.n	8000552 <__aeabi_dadd+0x25a>
 80006da:	185c      	adds	r4, r3, r1
 80006dc:	429c      	cmp	r4, r3
 80006de:	419b      	sbcs	r3, r3
 80006e0:	4440      	add	r0, r8
 80006e2:	425b      	negs	r3, r3
 80006e4:	18c7      	adds	r7, r0, r3
 80006e6:	2601      	movs	r6, #1
 80006e8:	023b      	lsls	r3, r7, #8
 80006ea:	d400      	bmi.n	80006ee <__aeabi_dadd+0x3f6>
 80006ec:	e729      	b.n	8000542 <__aeabi_dadd+0x24a>
 80006ee:	2602      	movs	r6, #2
 80006f0:	4a9e      	ldr	r2, [pc, #632]	; (800096c <__aeabi_dadd+0x674>)
 80006f2:	0863      	lsrs	r3, r4, #1
 80006f4:	4017      	ands	r7, r2
 80006f6:	2201      	movs	r2, #1
 80006f8:	4014      	ands	r4, r2
 80006fa:	431c      	orrs	r4, r3
 80006fc:	07fb      	lsls	r3, r7, #31
 80006fe:	431c      	orrs	r4, r3
 8000700:	087f      	lsrs	r7, r7, #1
 8000702:	e673      	b.n	80003ec <__aeabi_dadd+0xf4>
 8000704:	4644      	mov	r4, r8
 8000706:	3a20      	subs	r2, #32
 8000708:	40d4      	lsrs	r4, r2
 800070a:	4662      	mov	r2, ip
 800070c:	2a20      	cmp	r2, #32
 800070e:	d005      	beq.n	800071c <__aeabi_dadd+0x424>
 8000710:	4667      	mov	r7, ip
 8000712:	2240      	movs	r2, #64	; 0x40
 8000714:	1bd2      	subs	r2, r2, r7
 8000716:	4647      	mov	r7, r8
 8000718:	4097      	lsls	r7, r2
 800071a:	4339      	orrs	r1, r7
 800071c:	1e4a      	subs	r2, r1, #1
 800071e:	4191      	sbcs	r1, r2
 8000720:	4321      	orrs	r1, r4
 8000722:	e635      	b.n	8000390 <__aeabi_dadd+0x98>
 8000724:	4303      	orrs	r3, r0
 8000726:	1e58      	subs	r0, r3, #1
 8000728:	4183      	sbcs	r3, r0
 800072a:	1acc      	subs	r4, r1, r3
 800072c:	42a1      	cmp	r1, r4
 800072e:	41bf      	sbcs	r7, r7
 8000730:	4643      	mov	r3, r8
 8000732:	427f      	negs	r7, r7
 8000734:	4655      	mov	r5, sl
 8000736:	464e      	mov	r6, r9
 8000738:	1bdf      	subs	r7, r3, r7
 800073a:	e62e      	b.n	800039a <__aeabi_dadd+0xa2>
 800073c:	0002      	movs	r2, r0
 800073e:	431a      	orrs	r2, r3
 8000740:	d100      	bne.n	8000744 <__aeabi_dadd+0x44c>
 8000742:	e0bd      	b.n	80008c0 <__aeabi_dadd+0x5c8>
 8000744:	4662      	mov	r2, ip
 8000746:	4664      	mov	r4, ip
 8000748:	3a01      	subs	r2, #1
 800074a:	2c01      	cmp	r4, #1
 800074c:	d100      	bne.n	8000750 <__aeabi_dadd+0x458>
 800074e:	e0e5      	b.n	800091c <__aeabi_dadd+0x624>
 8000750:	4c85      	ldr	r4, [pc, #532]	; (8000968 <__aeabi_dadd+0x670>)
 8000752:	45a4      	cmp	ip, r4
 8000754:	d058      	beq.n	8000808 <__aeabi_dadd+0x510>
 8000756:	4694      	mov	ip, r2
 8000758:	e749      	b.n	80005ee <__aeabi_dadd+0x2f6>
 800075a:	4664      	mov	r4, ip
 800075c:	2220      	movs	r2, #32
 800075e:	1b12      	subs	r2, r2, r4
 8000760:	4644      	mov	r4, r8
 8000762:	4094      	lsls	r4, r2
 8000764:	000f      	movs	r7, r1
 8000766:	46a1      	mov	r9, r4
 8000768:	4664      	mov	r4, ip
 800076a:	4091      	lsls	r1, r2
 800076c:	40e7      	lsrs	r7, r4
 800076e:	464c      	mov	r4, r9
 8000770:	1e4a      	subs	r2, r1, #1
 8000772:	4191      	sbcs	r1, r2
 8000774:	433c      	orrs	r4, r7
 8000776:	4642      	mov	r2, r8
 8000778:	430c      	orrs	r4, r1
 800077a:	4661      	mov	r1, ip
 800077c:	40ca      	lsrs	r2, r1
 800077e:	1880      	adds	r0, r0, r2
 8000780:	e6f4      	b.n	800056c <__aeabi_dadd+0x274>
 8000782:	4c79      	ldr	r4, [pc, #484]	; (8000968 <__aeabi_dadd+0x670>)
 8000784:	42a2      	cmp	r2, r4
 8000786:	d100      	bne.n	800078a <__aeabi_dadd+0x492>
 8000788:	e6fd      	b.n	8000586 <__aeabi_dadd+0x28e>
 800078a:	1859      	adds	r1, r3, r1
 800078c:	4299      	cmp	r1, r3
 800078e:	419b      	sbcs	r3, r3
 8000790:	4440      	add	r0, r8
 8000792:	425f      	negs	r7, r3
 8000794:	19c7      	adds	r7, r0, r7
 8000796:	07fc      	lsls	r4, r7, #31
 8000798:	0849      	lsrs	r1, r1, #1
 800079a:	0016      	movs	r6, r2
 800079c:	430c      	orrs	r4, r1
 800079e:	087f      	lsrs	r7, r7, #1
 80007a0:	e6cf      	b.n	8000542 <__aeabi_dadd+0x24a>
 80007a2:	1acc      	subs	r4, r1, r3
 80007a4:	42a1      	cmp	r1, r4
 80007a6:	41bf      	sbcs	r7, r7
 80007a8:	4643      	mov	r3, r8
 80007aa:	427f      	negs	r7, r7
 80007ac:	1a18      	subs	r0, r3, r0
 80007ae:	4655      	mov	r5, sl
 80007b0:	1bc7      	subs	r7, r0, r7
 80007b2:	e5f7      	b.n	80003a4 <__aeabi_dadd+0xac>
 80007b4:	08c9      	lsrs	r1, r1, #3
 80007b6:	077b      	lsls	r3, r7, #29
 80007b8:	4655      	mov	r5, sl
 80007ba:	430b      	orrs	r3, r1
 80007bc:	08f8      	lsrs	r0, r7, #3
 80007be:	e6c8      	b.n	8000552 <__aeabi_dadd+0x25a>
 80007c0:	2c00      	cmp	r4, #0
 80007c2:	d000      	beq.n	80007c6 <__aeabi_dadd+0x4ce>
 80007c4:	e081      	b.n	80008ca <__aeabi_dadd+0x5d2>
 80007c6:	4643      	mov	r3, r8
 80007c8:	430b      	orrs	r3, r1
 80007ca:	d115      	bne.n	80007f8 <__aeabi_dadd+0x500>
 80007cc:	2080      	movs	r0, #128	; 0x80
 80007ce:	2500      	movs	r5, #0
 80007d0:	0300      	lsls	r0, r0, #12
 80007d2:	e6e3      	b.n	800059c <__aeabi_dadd+0x2a4>
 80007d4:	1a5c      	subs	r4, r3, r1
 80007d6:	42a3      	cmp	r3, r4
 80007d8:	419b      	sbcs	r3, r3
 80007da:	1bc7      	subs	r7, r0, r7
 80007dc:	425b      	negs	r3, r3
 80007de:	2601      	movs	r6, #1
 80007e0:	1aff      	subs	r7, r7, r3
 80007e2:	e5da      	b.n	800039a <__aeabi_dadd+0xa2>
 80007e4:	0742      	lsls	r2, r0, #29
 80007e6:	08db      	lsrs	r3, r3, #3
 80007e8:	4313      	orrs	r3, r2
 80007ea:	08c0      	lsrs	r0, r0, #3
 80007ec:	e6d2      	b.n	8000594 <__aeabi_dadd+0x29c>
 80007ee:	0742      	lsls	r2, r0, #29
 80007f0:	08db      	lsrs	r3, r3, #3
 80007f2:	4313      	orrs	r3, r2
 80007f4:	08c0      	lsrs	r0, r0, #3
 80007f6:	e6ac      	b.n	8000552 <__aeabi_dadd+0x25a>
 80007f8:	4643      	mov	r3, r8
 80007fa:	4642      	mov	r2, r8
 80007fc:	08c9      	lsrs	r1, r1, #3
 80007fe:	075b      	lsls	r3, r3, #29
 8000800:	4655      	mov	r5, sl
 8000802:	430b      	orrs	r3, r1
 8000804:	08d0      	lsrs	r0, r2, #3
 8000806:	e6c5      	b.n	8000594 <__aeabi_dadd+0x29c>
 8000808:	4643      	mov	r3, r8
 800080a:	4642      	mov	r2, r8
 800080c:	075b      	lsls	r3, r3, #29
 800080e:	08c9      	lsrs	r1, r1, #3
 8000810:	430b      	orrs	r3, r1
 8000812:	08d0      	lsrs	r0, r2, #3
 8000814:	e6be      	b.n	8000594 <__aeabi_dadd+0x29c>
 8000816:	4303      	orrs	r3, r0
 8000818:	001c      	movs	r4, r3
 800081a:	1e63      	subs	r3, r4, #1
 800081c:	419c      	sbcs	r4, r3
 800081e:	e6fc      	b.n	800061a <__aeabi_dadd+0x322>
 8000820:	0002      	movs	r2, r0
 8000822:	3c20      	subs	r4, #32
 8000824:	40e2      	lsrs	r2, r4
 8000826:	0014      	movs	r4, r2
 8000828:	4662      	mov	r2, ip
 800082a:	2a20      	cmp	r2, #32
 800082c:	d003      	beq.n	8000836 <__aeabi_dadd+0x53e>
 800082e:	2540      	movs	r5, #64	; 0x40
 8000830:	1aad      	subs	r5, r5, r2
 8000832:	40a8      	lsls	r0, r5
 8000834:	4303      	orrs	r3, r0
 8000836:	1e58      	subs	r0, r3, #1
 8000838:	4183      	sbcs	r3, r0
 800083a:	4323      	orrs	r3, r4
 800083c:	e775      	b.n	800072a <__aeabi_dadd+0x432>
 800083e:	2a00      	cmp	r2, #0
 8000840:	d0e2      	beq.n	8000808 <__aeabi_dadd+0x510>
 8000842:	003a      	movs	r2, r7
 8000844:	430a      	orrs	r2, r1
 8000846:	d0cd      	beq.n	80007e4 <__aeabi_dadd+0x4ec>
 8000848:	0742      	lsls	r2, r0, #29
 800084a:	08db      	lsrs	r3, r3, #3
 800084c:	4313      	orrs	r3, r2
 800084e:	2280      	movs	r2, #128	; 0x80
 8000850:	08c0      	lsrs	r0, r0, #3
 8000852:	0312      	lsls	r2, r2, #12
 8000854:	4210      	tst	r0, r2
 8000856:	d006      	beq.n	8000866 <__aeabi_dadd+0x56e>
 8000858:	08fc      	lsrs	r4, r7, #3
 800085a:	4214      	tst	r4, r2
 800085c:	d103      	bne.n	8000866 <__aeabi_dadd+0x56e>
 800085e:	0020      	movs	r0, r4
 8000860:	08cb      	lsrs	r3, r1, #3
 8000862:	077a      	lsls	r2, r7, #29
 8000864:	4313      	orrs	r3, r2
 8000866:	0f5a      	lsrs	r2, r3, #29
 8000868:	00db      	lsls	r3, r3, #3
 800086a:	0752      	lsls	r2, r2, #29
 800086c:	08db      	lsrs	r3, r3, #3
 800086e:	4313      	orrs	r3, r2
 8000870:	e690      	b.n	8000594 <__aeabi_dadd+0x29c>
 8000872:	4643      	mov	r3, r8
 8000874:	430b      	orrs	r3, r1
 8000876:	d100      	bne.n	800087a <__aeabi_dadd+0x582>
 8000878:	e709      	b.n	800068e <__aeabi_dadd+0x396>
 800087a:	4643      	mov	r3, r8
 800087c:	4642      	mov	r2, r8
 800087e:	08c9      	lsrs	r1, r1, #3
 8000880:	075b      	lsls	r3, r3, #29
 8000882:	4655      	mov	r5, sl
 8000884:	430b      	orrs	r3, r1
 8000886:	08d0      	lsrs	r0, r2, #3
 8000888:	e666      	b.n	8000558 <__aeabi_dadd+0x260>
 800088a:	1acc      	subs	r4, r1, r3
 800088c:	42a1      	cmp	r1, r4
 800088e:	4189      	sbcs	r1, r1
 8000890:	1a3f      	subs	r7, r7, r0
 8000892:	4249      	negs	r1, r1
 8000894:	4655      	mov	r5, sl
 8000896:	2601      	movs	r6, #1
 8000898:	1a7f      	subs	r7, r7, r1
 800089a:	e57e      	b.n	800039a <__aeabi_dadd+0xa2>
 800089c:	4642      	mov	r2, r8
 800089e:	1a5c      	subs	r4, r3, r1
 80008a0:	1a87      	subs	r7, r0, r2
 80008a2:	42a3      	cmp	r3, r4
 80008a4:	4192      	sbcs	r2, r2
 80008a6:	4252      	negs	r2, r2
 80008a8:	1abf      	subs	r7, r7, r2
 80008aa:	023a      	lsls	r2, r7, #8
 80008ac:	d53d      	bpl.n	800092a <__aeabi_dadd+0x632>
 80008ae:	1acc      	subs	r4, r1, r3
 80008b0:	42a1      	cmp	r1, r4
 80008b2:	4189      	sbcs	r1, r1
 80008b4:	4643      	mov	r3, r8
 80008b6:	4249      	negs	r1, r1
 80008b8:	1a1f      	subs	r7, r3, r0
 80008ba:	4655      	mov	r5, sl
 80008bc:	1a7f      	subs	r7, r7, r1
 80008be:	e595      	b.n	80003ec <__aeabi_dadd+0xf4>
 80008c0:	077b      	lsls	r3, r7, #29
 80008c2:	08c9      	lsrs	r1, r1, #3
 80008c4:	430b      	orrs	r3, r1
 80008c6:	08f8      	lsrs	r0, r7, #3
 80008c8:	e643      	b.n	8000552 <__aeabi_dadd+0x25a>
 80008ca:	4644      	mov	r4, r8
 80008cc:	08db      	lsrs	r3, r3, #3
 80008ce:	430c      	orrs	r4, r1
 80008d0:	d130      	bne.n	8000934 <__aeabi_dadd+0x63c>
 80008d2:	0742      	lsls	r2, r0, #29
 80008d4:	4313      	orrs	r3, r2
 80008d6:	08c0      	lsrs	r0, r0, #3
 80008d8:	e65c      	b.n	8000594 <__aeabi_dadd+0x29c>
 80008da:	077b      	lsls	r3, r7, #29
 80008dc:	08c9      	lsrs	r1, r1, #3
 80008de:	430b      	orrs	r3, r1
 80008e0:	08f8      	lsrs	r0, r7, #3
 80008e2:	e639      	b.n	8000558 <__aeabi_dadd+0x260>
 80008e4:	185c      	adds	r4, r3, r1
 80008e6:	429c      	cmp	r4, r3
 80008e8:	419b      	sbcs	r3, r3
 80008ea:	4440      	add	r0, r8
 80008ec:	425b      	negs	r3, r3
 80008ee:	18c7      	adds	r7, r0, r3
 80008f0:	023b      	lsls	r3, r7, #8
 80008f2:	d400      	bmi.n	80008f6 <__aeabi_dadd+0x5fe>
 80008f4:	e625      	b.n	8000542 <__aeabi_dadd+0x24a>
 80008f6:	4b1d      	ldr	r3, [pc, #116]	; (800096c <__aeabi_dadd+0x674>)
 80008f8:	2601      	movs	r6, #1
 80008fa:	401f      	ands	r7, r3
 80008fc:	e621      	b.n	8000542 <__aeabi_dadd+0x24a>
 80008fe:	0004      	movs	r4, r0
 8000900:	3a20      	subs	r2, #32
 8000902:	40d4      	lsrs	r4, r2
 8000904:	4662      	mov	r2, ip
 8000906:	2a20      	cmp	r2, #32
 8000908:	d004      	beq.n	8000914 <__aeabi_dadd+0x61c>
 800090a:	2240      	movs	r2, #64	; 0x40
 800090c:	4666      	mov	r6, ip
 800090e:	1b92      	subs	r2, r2, r6
 8000910:	4090      	lsls	r0, r2
 8000912:	4303      	orrs	r3, r0
 8000914:	1e5a      	subs	r2, r3, #1
 8000916:	4193      	sbcs	r3, r2
 8000918:	431c      	orrs	r4, r3
 800091a:	e67e      	b.n	800061a <__aeabi_dadd+0x322>
 800091c:	185c      	adds	r4, r3, r1
 800091e:	428c      	cmp	r4, r1
 8000920:	4189      	sbcs	r1, r1
 8000922:	4440      	add	r0, r8
 8000924:	4249      	negs	r1, r1
 8000926:	1847      	adds	r7, r0, r1
 8000928:	e6dd      	b.n	80006e6 <__aeabi_dadd+0x3ee>
 800092a:	0023      	movs	r3, r4
 800092c:	433b      	orrs	r3, r7
 800092e:	d100      	bne.n	8000932 <__aeabi_dadd+0x63a>
 8000930:	e6ad      	b.n	800068e <__aeabi_dadd+0x396>
 8000932:	e606      	b.n	8000542 <__aeabi_dadd+0x24a>
 8000934:	0744      	lsls	r4, r0, #29
 8000936:	4323      	orrs	r3, r4
 8000938:	2480      	movs	r4, #128	; 0x80
 800093a:	08c0      	lsrs	r0, r0, #3
 800093c:	0324      	lsls	r4, r4, #12
 800093e:	4220      	tst	r0, r4
 8000940:	d008      	beq.n	8000954 <__aeabi_dadd+0x65c>
 8000942:	4642      	mov	r2, r8
 8000944:	08d6      	lsrs	r6, r2, #3
 8000946:	4226      	tst	r6, r4
 8000948:	d104      	bne.n	8000954 <__aeabi_dadd+0x65c>
 800094a:	4655      	mov	r5, sl
 800094c:	0030      	movs	r0, r6
 800094e:	08cb      	lsrs	r3, r1, #3
 8000950:	0751      	lsls	r1, r2, #29
 8000952:	430b      	orrs	r3, r1
 8000954:	0f5a      	lsrs	r2, r3, #29
 8000956:	00db      	lsls	r3, r3, #3
 8000958:	08db      	lsrs	r3, r3, #3
 800095a:	0752      	lsls	r2, r2, #29
 800095c:	4313      	orrs	r3, r2
 800095e:	e619      	b.n	8000594 <__aeabi_dadd+0x29c>
 8000960:	2300      	movs	r3, #0
 8000962:	4a01      	ldr	r2, [pc, #4]	; (8000968 <__aeabi_dadd+0x670>)
 8000964:	001f      	movs	r7, r3
 8000966:	e55e      	b.n	8000426 <__aeabi_dadd+0x12e>
 8000968:	000007ff 	.word	0x000007ff
 800096c:	ff7fffff 	.word	0xff7fffff

08000970 <__aeabi_dmul>:
 8000970:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000972:	4657      	mov	r7, sl
 8000974:	464e      	mov	r6, r9
 8000976:	4645      	mov	r5, r8
 8000978:	46de      	mov	lr, fp
 800097a:	b5e0      	push	{r5, r6, r7, lr}
 800097c:	4698      	mov	r8, r3
 800097e:	030c      	lsls	r4, r1, #12
 8000980:	004b      	lsls	r3, r1, #1
 8000982:	0006      	movs	r6, r0
 8000984:	4692      	mov	sl, r2
 8000986:	b087      	sub	sp, #28
 8000988:	0b24      	lsrs	r4, r4, #12
 800098a:	0d5b      	lsrs	r3, r3, #21
 800098c:	0fcf      	lsrs	r7, r1, #31
 800098e:	2b00      	cmp	r3, #0
 8000990:	d100      	bne.n	8000994 <__aeabi_dmul+0x24>
 8000992:	e15c      	b.n	8000c4e <__aeabi_dmul+0x2de>
 8000994:	4ad9      	ldr	r2, [pc, #868]	; (8000cfc <__aeabi_dmul+0x38c>)
 8000996:	4293      	cmp	r3, r2
 8000998:	d100      	bne.n	800099c <__aeabi_dmul+0x2c>
 800099a:	e175      	b.n	8000c88 <__aeabi_dmul+0x318>
 800099c:	0f42      	lsrs	r2, r0, #29
 800099e:	00e4      	lsls	r4, r4, #3
 80009a0:	4314      	orrs	r4, r2
 80009a2:	2280      	movs	r2, #128	; 0x80
 80009a4:	0412      	lsls	r2, r2, #16
 80009a6:	4314      	orrs	r4, r2
 80009a8:	4ad5      	ldr	r2, [pc, #852]	; (8000d00 <__aeabi_dmul+0x390>)
 80009aa:	00c5      	lsls	r5, r0, #3
 80009ac:	4694      	mov	ip, r2
 80009ae:	4463      	add	r3, ip
 80009b0:	9300      	str	r3, [sp, #0]
 80009b2:	2300      	movs	r3, #0
 80009b4:	4699      	mov	r9, r3
 80009b6:	469b      	mov	fp, r3
 80009b8:	4643      	mov	r3, r8
 80009ba:	4642      	mov	r2, r8
 80009bc:	031e      	lsls	r6, r3, #12
 80009be:	0fd2      	lsrs	r2, r2, #31
 80009c0:	005b      	lsls	r3, r3, #1
 80009c2:	4650      	mov	r0, sl
 80009c4:	4690      	mov	r8, r2
 80009c6:	0b36      	lsrs	r6, r6, #12
 80009c8:	0d5b      	lsrs	r3, r3, #21
 80009ca:	d100      	bne.n	80009ce <__aeabi_dmul+0x5e>
 80009cc:	e120      	b.n	8000c10 <__aeabi_dmul+0x2a0>
 80009ce:	4acb      	ldr	r2, [pc, #812]	; (8000cfc <__aeabi_dmul+0x38c>)
 80009d0:	4293      	cmp	r3, r2
 80009d2:	d100      	bne.n	80009d6 <__aeabi_dmul+0x66>
 80009d4:	e162      	b.n	8000c9c <__aeabi_dmul+0x32c>
 80009d6:	49ca      	ldr	r1, [pc, #808]	; (8000d00 <__aeabi_dmul+0x390>)
 80009d8:	0f42      	lsrs	r2, r0, #29
 80009da:	468c      	mov	ip, r1
 80009dc:	9900      	ldr	r1, [sp, #0]
 80009de:	4463      	add	r3, ip
 80009e0:	00f6      	lsls	r6, r6, #3
 80009e2:	468c      	mov	ip, r1
 80009e4:	4316      	orrs	r6, r2
 80009e6:	2280      	movs	r2, #128	; 0x80
 80009e8:	449c      	add	ip, r3
 80009ea:	0412      	lsls	r2, r2, #16
 80009ec:	4663      	mov	r3, ip
 80009ee:	4316      	orrs	r6, r2
 80009f0:	00c2      	lsls	r2, r0, #3
 80009f2:	2000      	movs	r0, #0
 80009f4:	9300      	str	r3, [sp, #0]
 80009f6:	9900      	ldr	r1, [sp, #0]
 80009f8:	4643      	mov	r3, r8
 80009fa:	3101      	adds	r1, #1
 80009fc:	468c      	mov	ip, r1
 80009fe:	4649      	mov	r1, r9
 8000a00:	407b      	eors	r3, r7
 8000a02:	9301      	str	r3, [sp, #4]
 8000a04:	290f      	cmp	r1, #15
 8000a06:	d826      	bhi.n	8000a56 <__aeabi_dmul+0xe6>
 8000a08:	4bbe      	ldr	r3, [pc, #760]	; (8000d04 <__aeabi_dmul+0x394>)
 8000a0a:	0089      	lsls	r1, r1, #2
 8000a0c:	5859      	ldr	r1, [r3, r1]
 8000a0e:	468f      	mov	pc, r1
 8000a10:	4643      	mov	r3, r8
 8000a12:	9301      	str	r3, [sp, #4]
 8000a14:	0034      	movs	r4, r6
 8000a16:	0015      	movs	r5, r2
 8000a18:	4683      	mov	fp, r0
 8000a1a:	465b      	mov	r3, fp
 8000a1c:	2b02      	cmp	r3, #2
 8000a1e:	d016      	beq.n	8000a4e <__aeabi_dmul+0xde>
 8000a20:	2b03      	cmp	r3, #3
 8000a22:	d100      	bne.n	8000a26 <__aeabi_dmul+0xb6>
 8000a24:	e203      	b.n	8000e2e <__aeabi_dmul+0x4be>
 8000a26:	2b01      	cmp	r3, #1
 8000a28:	d000      	beq.n	8000a2c <__aeabi_dmul+0xbc>
 8000a2a:	e0cd      	b.n	8000bc8 <__aeabi_dmul+0x258>
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	2400      	movs	r4, #0
 8000a30:	2500      	movs	r5, #0
 8000a32:	9b01      	ldr	r3, [sp, #4]
 8000a34:	0512      	lsls	r2, r2, #20
 8000a36:	4322      	orrs	r2, r4
 8000a38:	07db      	lsls	r3, r3, #31
 8000a3a:	431a      	orrs	r2, r3
 8000a3c:	0028      	movs	r0, r5
 8000a3e:	0011      	movs	r1, r2
 8000a40:	b007      	add	sp, #28
 8000a42:	bcf0      	pop	{r4, r5, r6, r7}
 8000a44:	46bb      	mov	fp, r7
 8000a46:	46b2      	mov	sl, r6
 8000a48:	46a9      	mov	r9, r5
 8000a4a:	46a0      	mov	r8, r4
 8000a4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a4e:	2400      	movs	r4, #0
 8000a50:	2500      	movs	r5, #0
 8000a52:	4aaa      	ldr	r2, [pc, #680]	; (8000cfc <__aeabi_dmul+0x38c>)
 8000a54:	e7ed      	b.n	8000a32 <__aeabi_dmul+0xc2>
 8000a56:	0c28      	lsrs	r0, r5, #16
 8000a58:	042d      	lsls	r5, r5, #16
 8000a5a:	0c2d      	lsrs	r5, r5, #16
 8000a5c:	002b      	movs	r3, r5
 8000a5e:	0c11      	lsrs	r1, r2, #16
 8000a60:	0412      	lsls	r2, r2, #16
 8000a62:	0c12      	lsrs	r2, r2, #16
 8000a64:	4353      	muls	r3, r2
 8000a66:	4698      	mov	r8, r3
 8000a68:	0013      	movs	r3, r2
 8000a6a:	002f      	movs	r7, r5
 8000a6c:	4343      	muls	r3, r0
 8000a6e:	4699      	mov	r9, r3
 8000a70:	434f      	muls	r7, r1
 8000a72:	444f      	add	r7, r9
 8000a74:	46bb      	mov	fp, r7
 8000a76:	4647      	mov	r7, r8
 8000a78:	000b      	movs	r3, r1
 8000a7a:	0c3f      	lsrs	r7, r7, #16
 8000a7c:	46ba      	mov	sl, r7
 8000a7e:	4343      	muls	r3, r0
 8000a80:	44da      	add	sl, fp
 8000a82:	9302      	str	r3, [sp, #8]
 8000a84:	45d1      	cmp	r9, sl
 8000a86:	d904      	bls.n	8000a92 <__aeabi_dmul+0x122>
 8000a88:	2780      	movs	r7, #128	; 0x80
 8000a8a:	027f      	lsls	r7, r7, #9
 8000a8c:	46b9      	mov	r9, r7
 8000a8e:	444b      	add	r3, r9
 8000a90:	9302      	str	r3, [sp, #8]
 8000a92:	4653      	mov	r3, sl
 8000a94:	0c1b      	lsrs	r3, r3, #16
 8000a96:	469b      	mov	fp, r3
 8000a98:	4653      	mov	r3, sl
 8000a9a:	041f      	lsls	r7, r3, #16
 8000a9c:	4643      	mov	r3, r8
 8000a9e:	041b      	lsls	r3, r3, #16
 8000aa0:	0c1b      	lsrs	r3, r3, #16
 8000aa2:	4698      	mov	r8, r3
 8000aa4:	003b      	movs	r3, r7
 8000aa6:	4443      	add	r3, r8
 8000aa8:	9304      	str	r3, [sp, #16]
 8000aaa:	0c33      	lsrs	r3, r6, #16
 8000aac:	0436      	lsls	r6, r6, #16
 8000aae:	0c36      	lsrs	r6, r6, #16
 8000ab0:	4698      	mov	r8, r3
 8000ab2:	0033      	movs	r3, r6
 8000ab4:	4343      	muls	r3, r0
 8000ab6:	4699      	mov	r9, r3
 8000ab8:	4643      	mov	r3, r8
 8000aba:	4343      	muls	r3, r0
 8000abc:	002f      	movs	r7, r5
 8000abe:	469a      	mov	sl, r3
 8000ac0:	4643      	mov	r3, r8
 8000ac2:	4377      	muls	r7, r6
 8000ac4:	435d      	muls	r5, r3
 8000ac6:	0c38      	lsrs	r0, r7, #16
 8000ac8:	444d      	add	r5, r9
 8000aca:	1945      	adds	r5, r0, r5
 8000acc:	45a9      	cmp	r9, r5
 8000ace:	d903      	bls.n	8000ad8 <__aeabi_dmul+0x168>
 8000ad0:	2380      	movs	r3, #128	; 0x80
 8000ad2:	025b      	lsls	r3, r3, #9
 8000ad4:	4699      	mov	r9, r3
 8000ad6:	44ca      	add	sl, r9
 8000ad8:	043f      	lsls	r7, r7, #16
 8000ada:	0c28      	lsrs	r0, r5, #16
 8000adc:	0c3f      	lsrs	r7, r7, #16
 8000ade:	042d      	lsls	r5, r5, #16
 8000ae0:	19ed      	adds	r5, r5, r7
 8000ae2:	0c27      	lsrs	r7, r4, #16
 8000ae4:	0424      	lsls	r4, r4, #16
 8000ae6:	0c24      	lsrs	r4, r4, #16
 8000ae8:	0003      	movs	r3, r0
 8000aea:	0020      	movs	r0, r4
 8000aec:	4350      	muls	r0, r2
 8000aee:	437a      	muls	r2, r7
 8000af0:	4691      	mov	r9, r2
 8000af2:	003a      	movs	r2, r7
 8000af4:	4453      	add	r3, sl
 8000af6:	9305      	str	r3, [sp, #20]
 8000af8:	0c03      	lsrs	r3, r0, #16
 8000afa:	469a      	mov	sl, r3
 8000afc:	434a      	muls	r2, r1
 8000afe:	4361      	muls	r1, r4
 8000b00:	4449      	add	r1, r9
 8000b02:	4451      	add	r1, sl
 8000b04:	44ab      	add	fp, r5
 8000b06:	4589      	cmp	r9, r1
 8000b08:	d903      	bls.n	8000b12 <__aeabi_dmul+0x1a2>
 8000b0a:	2380      	movs	r3, #128	; 0x80
 8000b0c:	025b      	lsls	r3, r3, #9
 8000b0e:	4699      	mov	r9, r3
 8000b10:	444a      	add	r2, r9
 8000b12:	0400      	lsls	r0, r0, #16
 8000b14:	0c0b      	lsrs	r3, r1, #16
 8000b16:	0c00      	lsrs	r0, r0, #16
 8000b18:	0409      	lsls	r1, r1, #16
 8000b1a:	1809      	adds	r1, r1, r0
 8000b1c:	0020      	movs	r0, r4
 8000b1e:	4699      	mov	r9, r3
 8000b20:	4643      	mov	r3, r8
 8000b22:	4370      	muls	r0, r6
 8000b24:	435c      	muls	r4, r3
 8000b26:	437e      	muls	r6, r7
 8000b28:	435f      	muls	r7, r3
 8000b2a:	0c03      	lsrs	r3, r0, #16
 8000b2c:	4698      	mov	r8, r3
 8000b2e:	19a4      	adds	r4, r4, r6
 8000b30:	4444      	add	r4, r8
 8000b32:	444a      	add	r2, r9
 8000b34:	9703      	str	r7, [sp, #12]
 8000b36:	42a6      	cmp	r6, r4
 8000b38:	d904      	bls.n	8000b44 <__aeabi_dmul+0x1d4>
 8000b3a:	2380      	movs	r3, #128	; 0x80
 8000b3c:	025b      	lsls	r3, r3, #9
 8000b3e:	4698      	mov	r8, r3
 8000b40:	4447      	add	r7, r8
 8000b42:	9703      	str	r7, [sp, #12]
 8000b44:	0423      	lsls	r3, r4, #16
 8000b46:	9e02      	ldr	r6, [sp, #8]
 8000b48:	469a      	mov	sl, r3
 8000b4a:	9b05      	ldr	r3, [sp, #20]
 8000b4c:	445e      	add	r6, fp
 8000b4e:	4698      	mov	r8, r3
 8000b50:	42ae      	cmp	r6, r5
 8000b52:	41ad      	sbcs	r5, r5
 8000b54:	1876      	adds	r6, r6, r1
 8000b56:	428e      	cmp	r6, r1
 8000b58:	4189      	sbcs	r1, r1
 8000b5a:	0400      	lsls	r0, r0, #16
 8000b5c:	0c00      	lsrs	r0, r0, #16
 8000b5e:	4450      	add	r0, sl
 8000b60:	4440      	add	r0, r8
 8000b62:	426d      	negs	r5, r5
 8000b64:	1947      	adds	r7, r0, r5
 8000b66:	46b8      	mov	r8, r7
 8000b68:	4693      	mov	fp, r2
 8000b6a:	4249      	negs	r1, r1
 8000b6c:	4689      	mov	r9, r1
 8000b6e:	44c3      	add	fp, r8
 8000b70:	44d9      	add	r9, fp
 8000b72:	4298      	cmp	r0, r3
 8000b74:	4180      	sbcs	r0, r0
 8000b76:	45a8      	cmp	r8, r5
 8000b78:	41ad      	sbcs	r5, r5
 8000b7a:	4593      	cmp	fp, r2
 8000b7c:	4192      	sbcs	r2, r2
 8000b7e:	4589      	cmp	r9, r1
 8000b80:	4189      	sbcs	r1, r1
 8000b82:	426d      	negs	r5, r5
 8000b84:	4240      	negs	r0, r0
 8000b86:	4328      	orrs	r0, r5
 8000b88:	0c24      	lsrs	r4, r4, #16
 8000b8a:	4252      	negs	r2, r2
 8000b8c:	4249      	negs	r1, r1
 8000b8e:	430a      	orrs	r2, r1
 8000b90:	9b03      	ldr	r3, [sp, #12]
 8000b92:	1900      	adds	r0, r0, r4
 8000b94:	1880      	adds	r0, r0, r2
 8000b96:	18c7      	adds	r7, r0, r3
 8000b98:	464b      	mov	r3, r9
 8000b9a:	0ddc      	lsrs	r4, r3, #23
 8000b9c:	9b04      	ldr	r3, [sp, #16]
 8000b9e:	0275      	lsls	r5, r6, #9
 8000ba0:	431d      	orrs	r5, r3
 8000ba2:	1e6a      	subs	r2, r5, #1
 8000ba4:	4195      	sbcs	r5, r2
 8000ba6:	464b      	mov	r3, r9
 8000ba8:	0df6      	lsrs	r6, r6, #23
 8000baa:	027f      	lsls	r7, r7, #9
 8000bac:	4335      	orrs	r5, r6
 8000bae:	025a      	lsls	r2, r3, #9
 8000bb0:	433c      	orrs	r4, r7
 8000bb2:	4315      	orrs	r5, r2
 8000bb4:	01fb      	lsls	r3, r7, #7
 8000bb6:	d400      	bmi.n	8000bba <__aeabi_dmul+0x24a>
 8000bb8:	e11c      	b.n	8000df4 <__aeabi_dmul+0x484>
 8000bba:	2101      	movs	r1, #1
 8000bbc:	086a      	lsrs	r2, r5, #1
 8000bbe:	400d      	ands	r5, r1
 8000bc0:	4315      	orrs	r5, r2
 8000bc2:	07e2      	lsls	r2, r4, #31
 8000bc4:	4315      	orrs	r5, r2
 8000bc6:	0864      	lsrs	r4, r4, #1
 8000bc8:	494f      	ldr	r1, [pc, #316]	; (8000d08 <__aeabi_dmul+0x398>)
 8000bca:	4461      	add	r1, ip
 8000bcc:	2900      	cmp	r1, #0
 8000bce:	dc00      	bgt.n	8000bd2 <__aeabi_dmul+0x262>
 8000bd0:	e0b0      	b.n	8000d34 <__aeabi_dmul+0x3c4>
 8000bd2:	076b      	lsls	r3, r5, #29
 8000bd4:	d009      	beq.n	8000bea <__aeabi_dmul+0x27a>
 8000bd6:	220f      	movs	r2, #15
 8000bd8:	402a      	ands	r2, r5
 8000bda:	2a04      	cmp	r2, #4
 8000bdc:	d005      	beq.n	8000bea <__aeabi_dmul+0x27a>
 8000bde:	1d2a      	adds	r2, r5, #4
 8000be0:	42aa      	cmp	r2, r5
 8000be2:	41ad      	sbcs	r5, r5
 8000be4:	426d      	negs	r5, r5
 8000be6:	1964      	adds	r4, r4, r5
 8000be8:	0015      	movs	r5, r2
 8000bea:	01e3      	lsls	r3, r4, #7
 8000bec:	d504      	bpl.n	8000bf8 <__aeabi_dmul+0x288>
 8000bee:	2180      	movs	r1, #128	; 0x80
 8000bf0:	4a46      	ldr	r2, [pc, #280]	; (8000d0c <__aeabi_dmul+0x39c>)
 8000bf2:	00c9      	lsls	r1, r1, #3
 8000bf4:	4014      	ands	r4, r2
 8000bf6:	4461      	add	r1, ip
 8000bf8:	4a45      	ldr	r2, [pc, #276]	; (8000d10 <__aeabi_dmul+0x3a0>)
 8000bfa:	4291      	cmp	r1, r2
 8000bfc:	dd00      	ble.n	8000c00 <__aeabi_dmul+0x290>
 8000bfe:	e726      	b.n	8000a4e <__aeabi_dmul+0xde>
 8000c00:	0762      	lsls	r2, r4, #29
 8000c02:	08ed      	lsrs	r5, r5, #3
 8000c04:	0264      	lsls	r4, r4, #9
 8000c06:	0549      	lsls	r1, r1, #21
 8000c08:	4315      	orrs	r5, r2
 8000c0a:	0b24      	lsrs	r4, r4, #12
 8000c0c:	0d4a      	lsrs	r2, r1, #21
 8000c0e:	e710      	b.n	8000a32 <__aeabi_dmul+0xc2>
 8000c10:	4652      	mov	r2, sl
 8000c12:	4332      	orrs	r2, r6
 8000c14:	d100      	bne.n	8000c18 <__aeabi_dmul+0x2a8>
 8000c16:	e07f      	b.n	8000d18 <__aeabi_dmul+0x3a8>
 8000c18:	2e00      	cmp	r6, #0
 8000c1a:	d100      	bne.n	8000c1e <__aeabi_dmul+0x2ae>
 8000c1c:	e0dc      	b.n	8000dd8 <__aeabi_dmul+0x468>
 8000c1e:	0030      	movs	r0, r6
 8000c20:	f000 fd60 	bl	80016e4 <__clzsi2>
 8000c24:	0002      	movs	r2, r0
 8000c26:	3a0b      	subs	r2, #11
 8000c28:	231d      	movs	r3, #29
 8000c2a:	0001      	movs	r1, r0
 8000c2c:	1a9b      	subs	r3, r3, r2
 8000c2e:	4652      	mov	r2, sl
 8000c30:	3908      	subs	r1, #8
 8000c32:	40da      	lsrs	r2, r3
 8000c34:	408e      	lsls	r6, r1
 8000c36:	4316      	orrs	r6, r2
 8000c38:	4652      	mov	r2, sl
 8000c3a:	408a      	lsls	r2, r1
 8000c3c:	9b00      	ldr	r3, [sp, #0]
 8000c3e:	4935      	ldr	r1, [pc, #212]	; (8000d14 <__aeabi_dmul+0x3a4>)
 8000c40:	1a18      	subs	r0, r3, r0
 8000c42:	0003      	movs	r3, r0
 8000c44:	468c      	mov	ip, r1
 8000c46:	4463      	add	r3, ip
 8000c48:	2000      	movs	r0, #0
 8000c4a:	9300      	str	r3, [sp, #0]
 8000c4c:	e6d3      	b.n	80009f6 <__aeabi_dmul+0x86>
 8000c4e:	0025      	movs	r5, r4
 8000c50:	4305      	orrs	r5, r0
 8000c52:	d04a      	beq.n	8000cea <__aeabi_dmul+0x37a>
 8000c54:	2c00      	cmp	r4, #0
 8000c56:	d100      	bne.n	8000c5a <__aeabi_dmul+0x2ea>
 8000c58:	e0b0      	b.n	8000dbc <__aeabi_dmul+0x44c>
 8000c5a:	0020      	movs	r0, r4
 8000c5c:	f000 fd42 	bl	80016e4 <__clzsi2>
 8000c60:	0001      	movs	r1, r0
 8000c62:	0002      	movs	r2, r0
 8000c64:	390b      	subs	r1, #11
 8000c66:	231d      	movs	r3, #29
 8000c68:	0010      	movs	r0, r2
 8000c6a:	1a5b      	subs	r3, r3, r1
 8000c6c:	0031      	movs	r1, r6
 8000c6e:	0035      	movs	r5, r6
 8000c70:	3808      	subs	r0, #8
 8000c72:	4084      	lsls	r4, r0
 8000c74:	40d9      	lsrs	r1, r3
 8000c76:	4085      	lsls	r5, r0
 8000c78:	430c      	orrs	r4, r1
 8000c7a:	4826      	ldr	r0, [pc, #152]	; (8000d14 <__aeabi_dmul+0x3a4>)
 8000c7c:	1a83      	subs	r3, r0, r2
 8000c7e:	9300      	str	r3, [sp, #0]
 8000c80:	2300      	movs	r3, #0
 8000c82:	4699      	mov	r9, r3
 8000c84:	469b      	mov	fp, r3
 8000c86:	e697      	b.n	80009b8 <__aeabi_dmul+0x48>
 8000c88:	0005      	movs	r5, r0
 8000c8a:	4325      	orrs	r5, r4
 8000c8c:	d126      	bne.n	8000cdc <__aeabi_dmul+0x36c>
 8000c8e:	2208      	movs	r2, #8
 8000c90:	9300      	str	r3, [sp, #0]
 8000c92:	2302      	movs	r3, #2
 8000c94:	2400      	movs	r4, #0
 8000c96:	4691      	mov	r9, r2
 8000c98:	469b      	mov	fp, r3
 8000c9a:	e68d      	b.n	80009b8 <__aeabi_dmul+0x48>
 8000c9c:	4652      	mov	r2, sl
 8000c9e:	9b00      	ldr	r3, [sp, #0]
 8000ca0:	4332      	orrs	r2, r6
 8000ca2:	d110      	bne.n	8000cc6 <__aeabi_dmul+0x356>
 8000ca4:	4915      	ldr	r1, [pc, #84]	; (8000cfc <__aeabi_dmul+0x38c>)
 8000ca6:	2600      	movs	r6, #0
 8000ca8:	468c      	mov	ip, r1
 8000caa:	4463      	add	r3, ip
 8000cac:	4649      	mov	r1, r9
 8000cae:	9300      	str	r3, [sp, #0]
 8000cb0:	2302      	movs	r3, #2
 8000cb2:	4319      	orrs	r1, r3
 8000cb4:	4689      	mov	r9, r1
 8000cb6:	2002      	movs	r0, #2
 8000cb8:	e69d      	b.n	80009f6 <__aeabi_dmul+0x86>
 8000cba:	465b      	mov	r3, fp
 8000cbc:	9701      	str	r7, [sp, #4]
 8000cbe:	2b02      	cmp	r3, #2
 8000cc0:	d000      	beq.n	8000cc4 <__aeabi_dmul+0x354>
 8000cc2:	e6ad      	b.n	8000a20 <__aeabi_dmul+0xb0>
 8000cc4:	e6c3      	b.n	8000a4e <__aeabi_dmul+0xde>
 8000cc6:	4a0d      	ldr	r2, [pc, #52]	; (8000cfc <__aeabi_dmul+0x38c>)
 8000cc8:	2003      	movs	r0, #3
 8000cca:	4694      	mov	ip, r2
 8000ccc:	4463      	add	r3, ip
 8000cce:	464a      	mov	r2, r9
 8000cd0:	9300      	str	r3, [sp, #0]
 8000cd2:	2303      	movs	r3, #3
 8000cd4:	431a      	orrs	r2, r3
 8000cd6:	4691      	mov	r9, r2
 8000cd8:	4652      	mov	r2, sl
 8000cda:	e68c      	b.n	80009f6 <__aeabi_dmul+0x86>
 8000cdc:	220c      	movs	r2, #12
 8000cde:	9300      	str	r3, [sp, #0]
 8000ce0:	2303      	movs	r3, #3
 8000ce2:	0005      	movs	r5, r0
 8000ce4:	4691      	mov	r9, r2
 8000ce6:	469b      	mov	fp, r3
 8000ce8:	e666      	b.n	80009b8 <__aeabi_dmul+0x48>
 8000cea:	2304      	movs	r3, #4
 8000cec:	4699      	mov	r9, r3
 8000cee:	2300      	movs	r3, #0
 8000cf0:	9300      	str	r3, [sp, #0]
 8000cf2:	3301      	adds	r3, #1
 8000cf4:	2400      	movs	r4, #0
 8000cf6:	469b      	mov	fp, r3
 8000cf8:	e65e      	b.n	80009b8 <__aeabi_dmul+0x48>
 8000cfa:	46c0      	nop			; (mov r8, r8)
 8000cfc:	000007ff 	.word	0x000007ff
 8000d00:	fffffc01 	.word	0xfffffc01
 8000d04:	08005c58 	.word	0x08005c58
 8000d08:	000003ff 	.word	0x000003ff
 8000d0c:	feffffff 	.word	0xfeffffff
 8000d10:	000007fe 	.word	0x000007fe
 8000d14:	fffffc0d 	.word	0xfffffc0d
 8000d18:	4649      	mov	r1, r9
 8000d1a:	2301      	movs	r3, #1
 8000d1c:	4319      	orrs	r1, r3
 8000d1e:	4689      	mov	r9, r1
 8000d20:	2600      	movs	r6, #0
 8000d22:	2001      	movs	r0, #1
 8000d24:	e667      	b.n	80009f6 <__aeabi_dmul+0x86>
 8000d26:	2300      	movs	r3, #0
 8000d28:	2480      	movs	r4, #128	; 0x80
 8000d2a:	2500      	movs	r5, #0
 8000d2c:	4a43      	ldr	r2, [pc, #268]	; (8000e3c <__aeabi_dmul+0x4cc>)
 8000d2e:	9301      	str	r3, [sp, #4]
 8000d30:	0324      	lsls	r4, r4, #12
 8000d32:	e67e      	b.n	8000a32 <__aeabi_dmul+0xc2>
 8000d34:	2001      	movs	r0, #1
 8000d36:	1a40      	subs	r0, r0, r1
 8000d38:	2838      	cmp	r0, #56	; 0x38
 8000d3a:	dd00      	ble.n	8000d3e <__aeabi_dmul+0x3ce>
 8000d3c:	e676      	b.n	8000a2c <__aeabi_dmul+0xbc>
 8000d3e:	281f      	cmp	r0, #31
 8000d40:	dd5b      	ble.n	8000dfa <__aeabi_dmul+0x48a>
 8000d42:	221f      	movs	r2, #31
 8000d44:	0023      	movs	r3, r4
 8000d46:	4252      	negs	r2, r2
 8000d48:	1a51      	subs	r1, r2, r1
 8000d4a:	40cb      	lsrs	r3, r1
 8000d4c:	0019      	movs	r1, r3
 8000d4e:	2820      	cmp	r0, #32
 8000d50:	d003      	beq.n	8000d5a <__aeabi_dmul+0x3ea>
 8000d52:	4a3b      	ldr	r2, [pc, #236]	; (8000e40 <__aeabi_dmul+0x4d0>)
 8000d54:	4462      	add	r2, ip
 8000d56:	4094      	lsls	r4, r2
 8000d58:	4325      	orrs	r5, r4
 8000d5a:	1e6a      	subs	r2, r5, #1
 8000d5c:	4195      	sbcs	r5, r2
 8000d5e:	002a      	movs	r2, r5
 8000d60:	430a      	orrs	r2, r1
 8000d62:	2107      	movs	r1, #7
 8000d64:	000d      	movs	r5, r1
 8000d66:	2400      	movs	r4, #0
 8000d68:	4015      	ands	r5, r2
 8000d6a:	4211      	tst	r1, r2
 8000d6c:	d05b      	beq.n	8000e26 <__aeabi_dmul+0x4b6>
 8000d6e:	210f      	movs	r1, #15
 8000d70:	2400      	movs	r4, #0
 8000d72:	4011      	ands	r1, r2
 8000d74:	2904      	cmp	r1, #4
 8000d76:	d053      	beq.n	8000e20 <__aeabi_dmul+0x4b0>
 8000d78:	1d11      	adds	r1, r2, #4
 8000d7a:	4291      	cmp	r1, r2
 8000d7c:	4192      	sbcs	r2, r2
 8000d7e:	4252      	negs	r2, r2
 8000d80:	18a4      	adds	r4, r4, r2
 8000d82:	000a      	movs	r2, r1
 8000d84:	0223      	lsls	r3, r4, #8
 8000d86:	d54b      	bpl.n	8000e20 <__aeabi_dmul+0x4b0>
 8000d88:	2201      	movs	r2, #1
 8000d8a:	2400      	movs	r4, #0
 8000d8c:	2500      	movs	r5, #0
 8000d8e:	e650      	b.n	8000a32 <__aeabi_dmul+0xc2>
 8000d90:	2380      	movs	r3, #128	; 0x80
 8000d92:	031b      	lsls	r3, r3, #12
 8000d94:	421c      	tst	r4, r3
 8000d96:	d009      	beq.n	8000dac <__aeabi_dmul+0x43c>
 8000d98:	421e      	tst	r6, r3
 8000d9a:	d107      	bne.n	8000dac <__aeabi_dmul+0x43c>
 8000d9c:	4333      	orrs	r3, r6
 8000d9e:	031c      	lsls	r4, r3, #12
 8000da0:	4643      	mov	r3, r8
 8000da2:	0015      	movs	r5, r2
 8000da4:	0b24      	lsrs	r4, r4, #12
 8000da6:	4a25      	ldr	r2, [pc, #148]	; (8000e3c <__aeabi_dmul+0x4cc>)
 8000da8:	9301      	str	r3, [sp, #4]
 8000daa:	e642      	b.n	8000a32 <__aeabi_dmul+0xc2>
 8000dac:	2280      	movs	r2, #128	; 0x80
 8000dae:	0312      	lsls	r2, r2, #12
 8000db0:	4314      	orrs	r4, r2
 8000db2:	0324      	lsls	r4, r4, #12
 8000db4:	4a21      	ldr	r2, [pc, #132]	; (8000e3c <__aeabi_dmul+0x4cc>)
 8000db6:	0b24      	lsrs	r4, r4, #12
 8000db8:	9701      	str	r7, [sp, #4]
 8000dba:	e63a      	b.n	8000a32 <__aeabi_dmul+0xc2>
 8000dbc:	f000 fc92 	bl	80016e4 <__clzsi2>
 8000dc0:	0001      	movs	r1, r0
 8000dc2:	0002      	movs	r2, r0
 8000dc4:	3115      	adds	r1, #21
 8000dc6:	3220      	adds	r2, #32
 8000dc8:	291c      	cmp	r1, #28
 8000dca:	dc00      	bgt.n	8000dce <__aeabi_dmul+0x45e>
 8000dcc:	e74b      	b.n	8000c66 <__aeabi_dmul+0x2f6>
 8000dce:	0034      	movs	r4, r6
 8000dd0:	3808      	subs	r0, #8
 8000dd2:	2500      	movs	r5, #0
 8000dd4:	4084      	lsls	r4, r0
 8000dd6:	e750      	b.n	8000c7a <__aeabi_dmul+0x30a>
 8000dd8:	f000 fc84 	bl	80016e4 <__clzsi2>
 8000ddc:	0003      	movs	r3, r0
 8000dde:	001a      	movs	r2, r3
 8000de0:	3215      	adds	r2, #21
 8000de2:	3020      	adds	r0, #32
 8000de4:	2a1c      	cmp	r2, #28
 8000de6:	dc00      	bgt.n	8000dea <__aeabi_dmul+0x47a>
 8000de8:	e71e      	b.n	8000c28 <__aeabi_dmul+0x2b8>
 8000dea:	4656      	mov	r6, sl
 8000dec:	3b08      	subs	r3, #8
 8000dee:	2200      	movs	r2, #0
 8000df0:	409e      	lsls	r6, r3
 8000df2:	e723      	b.n	8000c3c <__aeabi_dmul+0x2cc>
 8000df4:	9b00      	ldr	r3, [sp, #0]
 8000df6:	469c      	mov	ip, r3
 8000df8:	e6e6      	b.n	8000bc8 <__aeabi_dmul+0x258>
 8000dfa:	4912      	ldr	r1, [pc, #72]	; (8000e44 <__aeabi_dmul+0x4d4>)
 8000dfc:	0022      	movs	r2, r4
 8000dfe:	4461      	add	r1, ip
 8000e00:	002e      	movs	r6, r5
 8000e02:	408d      	lsls	r5, r1
 8000e04:	408a      	lsls	r2, r1
 8000e06:	40c6      	lsrs	r6, r0
 8000e08:	1e69      	subs	r1, r5, #1
 8000e0a:	418d      	sbcs	r5, r1
 8000e0c:	4332      	orrs	r2, r6
 8000e0e:	432a      	orrs	r2, r5
 8000e10:	40c4      	lsrs	r4, r0
 8000e12:	0753      	lsls	r3, r2, #29
 8000e14:	d0b6      	beq.n	8000d84 <__aeabi_dmul+0x414>
 8000e16:	210f      	movs	r1, #15
 8000e18:	4011      	ands	r1, r2
 8000e1a:	2904      	cmp	r1, #4
 8000e1c:	d1ac      	bne.n	8000d78 <__aeabi_dmul+0x408>
 8000e1e:	e7b1      	b.n	8000d84 <__aeabi_dmul+0x414>
 8000e20:	0765      	lsls	r5, r4, #29
 8000e22:	0264      	lsls	r4, r4, #9
 8000e24:	0b24      	lsrs	r4, r4, #12
 8000e26:	08d2      	lsrs	r2, r2, #3
 8000e28:	4315      	orrs	r5, r2
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	e601      	b.n	8000a32 <__aeabi_dmul+0xc2>
 8000e2e:	2280      	movs	r2, #128	; 0x80
 8000e30:	0312      	lsls	r2, r2, #12
 8000e32:	4314      	orrs	r4, r2
 8000e34:	0324      	lsls	r4, r4, #12
 8000e36:	4a01      	ldr	r2, [pc, #4]	; (8000e3c <__aeabi_dmul+0x4cc>)
 8000e38:	0b24      	lsrs	r4, r4, #12
 8000e3a:	e5fa      	b.n	8000a32 <__aeabi_dmul+0xc2>
 8000e3c:	000007ff 	.word	0x000007ff
 8000e40:	0000043e 	.word	0x0000043e
 8000e44:	0000041e 	.word	0x0000041e

08000e48 <__aeabi_dsub>:
 8000e48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e4a:	4657      	mov	r7, sl
 8000e4c:	464e      	mov	r6, r9
 8000e4e:	4645      	mov	r5, r8
 8000e50:	46de      	mov	lr, fp
 8000e52:	b5e0      	push	{r5, r6, r7, lr}
 8000e54:	001e      	movs	r6, r3
 8000e56:	0017      	movs	r7, r2
 8000e58:	004a      	lsls	r2, r1, #1
 8000e5a:	030b      	lsls	r3, r1, #12
 8000e5c:	0d52      	lsrs	r2, r2, #21
 8000e5e:	0a5b      	lsrs	r3, r3, #9
 8000e60:	4690      	mov	r8, r2
 8000e62:	0f42      	lsrs	r2, r0, #29
 8000e64:	431a      	orrs	r2, r3
 8000e66:	0fcd      	lsrs	r5, r1, #31
 8000e68:	4ccd      	ldr	r4, [pc, #820]	; (80011a0 <__aeabi_dsub+0x358>)
 8000e6a:	0331      	lsls	r1, r6, #12
 8000e6c:	00c3      	lsls	r3, r0, #3
 8000e6e:	4694      	mov	ip, r2
 8000e70:	0070      	lsls	r0, r6, #1
 8000e72:	0f7a      	lsrs	r2, r7, #29
 8000e74:	0a49      	lsrs	r1, r1, #9
 8000e76:	00ff      	lsls	r7, r7, #3
 8000e78:	469a      	mov	sl, r3
 8000e7a:	46b9      	mov	r9, r7
 8000e7c:	0d40      	lsrs	r0, r0, #21
 8000e7e:	0ff6      	lsrs	r6, r6, #31
 8000e80:	4311      	orrs	r1, r2
 8000e82:	42a0      	cmp	r0, r4
 8000e84:	d100      	bne.n	8000e88 <__aeabi_dsub+0x40>
 8000e86:	e0b1      	b.n	8000fec <__aeabi_dsub+0x1a4>
 8000e88:	2201      	movs	r2, #1
 8000e8a:	4056      	eors	r6, r2
 8000e8c:	46b3      	mov	fp, r6
 8000e8e:	42b5      	cmp	r5, r6
 8000e90:	d100      	bne.n	8000e94 <__aeabi_dsub+0x4c>
 8000e92:	e088      	b.n	8000fa6 <__aeabi_dsub+0x15e>
 8000e94:	4642      	mov	r2, r8
 8000e96:	1a12      	subs	r2, r2, r0
 8000e98:	2a00      	cmp	r2, #0
 8000e9a:	dc00      	bgt.n	8000e9e <__aeabi_dsub+0x56>
 8000e9c:	e0ae      	b.n	8000ffc <__aeabi_dsub+0x1b4>
 8000e9e:	2800      	cmp	r0, #0
 8000ea0:	d100      	bne.n	8000ea4 <__aeabi_dsub+0x5c>
 8000ea2:	e0c1      	b.n	8001028 <__aeabi_dsub+0x1e0>
 8000ea4:	48be      	ldr	r0, [pc, #760]	; (80011a0 <__aeabi_dsub+0x358>)
 8000ea6:	4580      	cmp	r8, r0
 8000ea8:	d100      	bne.n	8000eac <__aeabi_dsub+0x64>
 8000eaa:	e151      	b.n	8001150 <__aeabi_dsub+0x308>
 8000eac:	2080      	movs	r0, #128	; 0x80
 8000eae:	0400      	lsls	r0, r0, #16
 8000eb0:	4301      	orrs	r1, r0
 8000eb2:	2a38      	cmp	r2, #56	; 0x38
 8000eb4:	dd00      	ble.n	8000eb8 <__aeabi_dsub+0x70>
 8000eb6:	e17b      	b.n	80011b0 <__aeabi_dsub+0x368>
 8000eb8:	2a1f      	cmp	r2, #31
 8000eba:	dd00      	ble.n	8000ebe <__aeabi_dsub+0x76>
 8000ebc:	e1ee      	b.n	800129c <__aeabi_dsub+0x454>
 8000ebe:	2020      	movs	r0, #32
 8000ec0:	003e      	movs	r6, r7
 8000ec2:	1a80      	subs	r0, r0, r2
 8000ec4:	000c      	movs	r4, r1
 8000ec6:	40d6      	lsrs	r6, r2
 8000ec8:	40d1      	lsrs	r1, r2
 8000eca:	4087      	lsls	r7, r0
 8000ecc:	4662      	mov	r2, ip
 8000ece:	4084      	lsls	r4, r0
 8000ed0:	1a52      	subs	r2, r2, r1
 8000ed2:	1e78      	subs	r0, r7, #1
 8000ed4:	4187      	sbcs	r7, r0
 8000ed6:	4694      	mov	ip, r2
 8000ed8:	4334      	orrs	r4, r6
 8000eda:	4327      	orrs	r7, r4
 8000edc:	1bdc      	subs	r4, r3, r7
 8000ede:	42a3      	cmp	r3, r4
 8000ee0:	419b      	sbcs	r3, r3
 8000ee2:	4662      	mov	r2, ip
 8000ee4:	425b      	negs	r3, r3
 8000ee6:	1ad3      	subs	r3, r2, r3
 8000ee8:	4699      	mov	r9, r3
 8000eea:	464b      	mov	r3, r9
 8000eec:	021b      	lsls	r3, r3, #8
 8000eee:	d400      	bmi.n	8000ef2 <__aeabi_dsub+0xaa>
 8000ef0:	e118      	b.n	8001124 <__aeabi_dsub+0x2dc>
 8000ef2:	464b      	mov	r3, r9
 8000ef4:	0258      	lsls	r0, r3, #9
 8000ef6:	0a43      	lsrs	r3, r0, #9
 8000ef8:	4699      	mov	r9, r3
 8000efa:	464b      	mov	r3, r9
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d100      	bne.n	8000f02 <__aeabi_dsub+0xba>
 8000f00:	e137      	b.n	8001172 <__aeabi_dsub+0x32a>
 8000f02:	4648      	mov	r0, r9
 8000f04:	f000 fbee 	bl	80016e4 <__clzsi2>
 8000f08:	0001      	movs	r1, r0
 8000f0a:	3908      	subs	r1, #8
 8000f0c:	2320      	movs	r3, #32
 8000f0e:	0022      	movs	r2, r4
 8000f10:	4648      	mov	r0, r9
 8000f12:	1a5b      	subs	r3, r3, r1
 8000f14:	40da      	lsrs	r2, r3
 8000f16:	4088      	lsls	r0, r1
 8000f18:	408c      	lsls	r4, r1
 8000f1a:	4643      	mov	r3, r8
 8000f1c:	4310      	orrs	r0, r2
 8000f1e:	4588      	cmp	r8, r1
 8000f20:	dd00      	ble.n	8000f24 <__aeabi_dsub+0xdc>
 8000f22:	e136      	b.n	8001192 <__aeabi_dsub+0x34a>
 8000f24:	1ac9      	subs	r1, r1, r3
 8000f26:	1c4b      	adds	r3, r1, #1
 8000f28:	2b1f      	cmp	r3, #31
 8000f2a:	dd00      	ble.n	8000f2e <__aeabi_dsub+0xe6>
 8000f2c:	e0ea      	b.n	8001104 <__aeabi_dsub+0x2bc>
 8000f2e:	2220      	movs	r2, #32
 8000f30:	0026      	movs	r6, r4
 8000f32:	1ad2      	subs	r2, r2, r3
 8000f34:	0001      	movs	r1, r0
 8000f36:	4094      	lsls	r4, r2
 8000f38:	40de      	lsrs	r6, r3
 8000f3a:	40d8      	lsrs	r0, r3
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	4091      	lsls	r1, r2
 8000f40:	1e62      	subs	r2, r4, #1
 8000f42:	4194      	sbcs	r4, r2
 8000f44:	4681      	mov	r9, r0
 8000f46:	4698      	mov	r8, r3
 8000f48:	4331      	orrs	r1, r6
 8000f4a:	430c      	orrs	r4, r1
 8000f4c:	0763      	lsls	r3, r4, #29
 8000f4e:	d009      	beq.n	8000f64 <__aeabi_dsub+0x11c>
 8000f50:	230f      	movs	r3, #15
 8000f52:	4023      	ands	r3, r4
 8000f54:	2b04      	cmp	r3, #4
 8000f56:	d005      	beq.n	8000f64 <__aeabi_dsub+0x11c>
 8000f58:	1d23      	adds	r3, r4, #4
 8000f5a:	42a3      	cmp	r3, r4
 8000f5c:	41a4      	sbcs	r4, r4
 8000f5e:	4264      	negs	r4, r4
 8000f60:	44a1      	add	r9, r4
 8000f62:	001c      	movs	r4, r3
 8000f64:	464b      	mov	r3, r9
 8000f66:	021b      	lsls	r3, r3, #8
 8000f68:	d400      	bmi.n	8000f6c <__aeabi_dsub+0x124>
 8000f6a:	e0de      	b.n	800112a <__aeabi_dsub+0x2e2>
 8000f6c:	4641      	mov	r1, r8
 8000f6e:	4b8c      	ldr	r3, [pc, #560]	; (80011a0 <__aeabi_dsub+0x358>)
 8000f70:	3101      	adds	r1, #1
 8000f72:	4299      	cmp	r1, r3
 8000f74:	d100      	bne.n	8000f78 <__aeabi_dsub+0x130>
 8000f76:	e0e7      	b.n	8001148 <__aeabi_dsub+0x300>
 8000f78:	464b      	mov	r3, r9
 8000f7a:	488a      	ldr	r0, [pc, #552]	; (80011a4 <__aeabi_dsub+0x35c>)
 8000f7c:	08e4      	lsrs	r4, r4, #3
 8000f7e:	4003      	ands	r3, r0
 8000f80:	0018      	movs	r0, r3
 8000f82:	0549      	lsls	r1, r1, #21
 8000f84:	075b      	lsls	r3, r3, #29
 8000f86:	0240      	lsls	r0, r0, #9
 8000f88:	4323      	orrs	r3, r4
 8000f8a:	0d4a      	lsrs	r2, r1, #21
 8000f8c:	0b04      	lsrs	r4, r0, #12
 8000f8e:	0512      	lsls	r2, r2, #20
 8000f90:	07ed      	lsls	r5, r5, #31
 8000f92:	4322      	orrs	r2, r4
 8000f94:	432a      	orrs	r2, r5
 8000f96:	0018      	movs	r0, r3
 8000f98:	0011      	movs	r1, r2
 8000f9a:	bcf0      	pop	{r4, r5, r6, r7}
 8000f9c:	46bb      	mov	fp, r7
 8000f9e:	46b2      	mov	sl, r6
 8000fa0:	46a9      	mov	r9, r5
 8000fa2:	46a0      	mov	r8, r4
 8000fa4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000fa6:	4642      	mov	r2, r8
 8000fa8:	1a12      	subs	r2, r2, r0
 8000faa:	2a00      	cmp	r2, #0
 8000fac:	dd52      	ble.n	8001054 <__aeabi_dsub+0x20c>
 8000fae:	2800      	cmp	r0, #0
 8000fb0:	d100      	bne.n	8000fb4 <__aeabi_dsub+0x16c>
 8000fb2:	e09c      	b.n	80010ee <__aeabi_dsub+0x2a6>
 8000fb4:	45a0      	cmp	r8, r4
 8000fb6:	d100      	bne.n	8000fba <__aeabi_dsub+0x172>
 8000fb8:	e0ca      	b.n	8001150 <__aeabi_dsub+0x308>
 8000fba:	2080      	movs	r0, #128	; 0x80
 8000fbc:	0400      	lsls	r0, r0, #16
 8000fbe:	4301      	orrs	r1, r0
 8000fc0:	2a38      	cmp	r2, #56	; 0x38
 8000fc2:	dd00      	ble.n	8000fc6 <__aeabi_dsub+0x17e>
 8000fc4:	e149      	b.n	800125a <__aeabi_dsub+0x412>
 8000fc6:	2a1f      	cmp	r2, #31
 8000fc8:	dc00      	bgt.n	8000fcc <__aeabi_dsub+0x184>
 8000fca:	e197      	b.n	80012fc <__aeabi_dsub+0x4b4>
 8000fcc:	0010      	movs	r0, r2
 8000fce:	000e      	movs	r6, r1
 8000fd0:	3820      	subs	r0, #32
 8000fd2:	40c6      	lsrs	r6, r0
 8000fd4:	2a20      	cmp	r2, #32
 8000fd6:	d004      	beq.n	8000fe2 <__aeabi_dsub+0x19a>
 8000fd8:	2040      	movs	r0, #64	; 0x40
 8000fda:	1a82      	subs	r2, r0, r2
 8000fdc:	4091      	lsls	r1, r2
 8000fde:	430f      	orrs	r7, r1
 8000fe0:	46b9      	mov	r9, r7
 8000fe2:	464c      	mov	r4, r9
 8000fe4:	1e62      	subs	r2, r4, #1
 8000fe6:	4194      	sbcs	r4, r2
 8000fe8:	4334      	orrs	r4, r6
 8000fea:	e13a      	b.n	8001262 <__aeabi_dsub+0x41a>
 8000fec:	000a      	movs	r2, r1
 8000fee:	433a      	orrs	r2, r7
 8000ff0:	d028      	beq.n	8001044 <__aeabi_dsub+0x1fc>
 8000ff2:	46b3      	mov	fp, r6
 8000ff4:	42b5      	cmp	r5, r6
 8000ff6:	d02b      	beq.n	8001050 <__aeabi_dsub+0x208>
 8000ff8:	4a6b      	ldr	r2, [pc, #428]	; (80011a8 <__aeabi_dsub+0x360>)
 8000ffa:	4442      	add	r2, r8
 8000ffc:	2a00      	cmp	r2, #0
 8000ffe:	d05d      	beq.n	80010bc <__aeabi_dsub+0x274>
 8001000:	4642      	mov	r2, r8
 8001002:	4644      	mov	r4, r8
 8001004:	1a82      	subs	r2, r0, r2
 8001006:	2c00      	cmp	r4, #0
 8001008:	d000      	beq.n	800100c <__aeabi_dsub+0x1c4>
 800100a:	e0f5      	b.n	80011f8 <__aeabi_dsub+0x3b0>
 800100c:	4665      	mov	r5, ip
 800100e:	431d      	orrs	r5, r3
 8001010:	d100      	bne.n	8001014 <__aeabi_dsub+0x1cc>
 8001012:	e19c      	b.n	800134e <__aeabi_dsub+0x506>
 8001014:	1e55      	subs	r5, r2, #1
 8001016:	2a01      	cmp	r2, #1
 8001018:	d100      	bne.n	800101c <__aeabi_dsub+0x1d4>
 800101a:	e1fb      	b.n	8001414 <__aeabi_dsub+0x5cc>
 800101c:	4c60      	ldr	r4, [pc, #384]	; (80011a0 <__aeabi_dsub+0x358>)
 800101e:	42a2      	cmp	r2, r4
 8001020:	d100      	bne.n	8001024 <__aeabi_dsub+0x1dc>
 8001022:	e1bd      	b.n	80013a0 <__aeabi_dsub+0x558>
 8001024:	002a      	movs	r2, r5
 8001026:	e0f0      	b.n	800120a <__aeabi_dsub+0x3c2>
 8001028:	0008      	movs	r0, r1
 800102a:	4338      	orrs	r0, r7
 800102c:	d100      	bne.n	8001030 <__aeabi_dsub+0x1e8>
 800102e:	e0c3      	b.n	80011b8 <__aeabi_dsub+0x370>
 8001030:	1e50      	subs	r0, r2, #1
 8001032:	2a01      	cmp	r2, #1
 8001034:	d100      	bne.n	8001038 <__aeabi_dsub+0x1f0>
 8001036:	e1a8      	b.n	800138a <__aeabi_dsub+0x542>
 8001038:	4c59      	ldr	r4, [pc, #356]	; (80011a0 <__aeabi_dsub+0x358>)
 800103a:	42a2      	cmp	r2, r4
 800103c:	d100      	bne.n	8001040 <__aeabi_dsub+0x1f8>
 800103e:	e087      	b.n	8001150 <__aeabi_dsub+0x308>
 8001040:	0002      	movs	r2, r0
 8001042:	e736      	b.n	8000eb2 <__aeabi_dsub+0x6a>
 8001044:	2201      	movs	r2, #1
 8001046:	4056      	eors	r6, r2
 8001048:	46b3      	mov	fp, r6
 800104a:	42b5      	cmp	r5, r6
 800104c:	d000      	beq.n	8001050 <__aeabi_dsub+0x208>
 800104e:	e721      	b.n	8000e94 <__aeabi_dsub+0x4c>
 8001050:	4a55      	ldr	r2, [pc, #340]	; (80011a8 <__aeabi_dsub+0x360>)
 8001052:	4442      	add	r2, r8
 8001054:	2a00      	cmp	r2, #0
 8001056:	d100      	bne.n	800105a <__aeabi_dsub+0x212>
 8001058:	e0b5      	b.n	80011c6 <__aeabi_dsub+0x37e>
 800105a:	4642      	mov	r2, r8
 800105c:	4644      	mov	r4, r8
 800105e:	1a82      	subs	r2, r0, r2
 8001060:	2c00      	cmp	r4, #0
 8001062:	d100      	bne.n	8001066 <__aeabi_dsub+0x21e>
 8001064:	e138      	b.n	80012d8 <__aeabi_dsub+0x490>
 8001066:	4e4e      	ldr	r6, [pc, #312]	; (80011a0 <__aeabi_dsub+0x358>)
 8001068:	42b0      	cmp	r0, r6
 800106a:	d100      	bne.n	800106e <__aeabi_dsub+0x226>
 800106c:	e1de      	b.n	800142c <__aeabi_dsub+0x5e4>
 800106e:	2680      	movs	r6, #128	; 0x80
 8001070:	4664      	mov	r4, ip
 8001072:	0436      	lsls	r6, r6, #16
 8001074:	4334      	orrs	r4, r6
 8001076:	46a4      	mov	ip, r4
 8001078:	2a38      	cmp	r2, #56	; 0x38
 800107a:	dd00      	ble.n	800107e <__aeabi_dsub+0x236>
 800107c:	e196      	b.n	80013ac <__aeabi_dsub+0x564>
 800107e:	2a1f      	cmp	r2, #31
 8001080:	dd00      	ble.n	8001084 <__aeabi_dsub+0x23c>
 8001082:	e224      	b.n	80014ce <__aeabi_dsub+0x686>
 8001084:	2620      	movs	r6, #32
 8001086:	1ab4      	subs	r4, r6, r2
 8001088:	46a2      	mov	sl, r4
 800108a:	4664      	mov	r4, ip
 800108c:	4656      	mov	r6, sl
 800108e:	40b4      	lsls	r4, r6
 8001090:	46a1      	mov	r9, r4
 8001092:	001c      	movs	r4, r3
 8001094:	464e      	mov	r6, r9
 8001096:	40d4      	lsrs	r4, r2
 8001098:	4326      	orrs	r6, r4
 800109a:	0034      	movs	r4, r6
 800109c:	4656      	mov	r6, sl
 800109e:	40b3      	lsls	r3, r6
 80010a0:	1e5e      	subs	r6, r3, #1
 80010a2:	41b3      	sbcs	r3, r6
 80010a4:	431c      	orrs	r4, r3
 80010a6:	4663      	mov	r3, ip
 80010a8:	40d3      	lsrs	r3, r2
 80010aa:	18c9      	adds	r1, r1, r3
 80010ac:	19e4      	adds	r4, r4, r7
 80010ae:	42bc      	cmp	r4, r7
 80010b0:	41bf      	sbcs	r7, r7
 80010b2:	427f      	negs	r7, r7
 80010b4:	46b9      	mov	r9, r7
 80010b6:	4680      	mov	r8, r0
 80010b8:	4489      	add	r9, r1
 80010ba:	e0d8      	b.n	800126e <__aeabi_dsub+0x426>
 80010bc:	4640      	mov	r0, r8
 80010be:	4c3b      	ldr	r4, [pc, #236]	; (80011ac <__aeabi_dsub+0x364>)
 80010c0:	3001      	adds	r0, #1
 80010c2:	4220      	tst	r0, r4
 80010c4:	d000      	beq.n	80010c8 <__aeabi_dsub+0x280>
 80010c6:	e0b4      	b.n	8001232 <__aeabi_dsub+0x3ea>
 80010c8:	4640      	mov	r0, r8
 80010ca:	2800      	cmp	r0, #0
 80010cc:	d000      	beq.n	80010d0 <__aeabi_dsub+0x288>
 80010ce:	e144      	b.n	800135a <__aeabi_dsub+0x512>
 80010d0:	4660      	mov	r0, ip
 80010d2:	4318      	orrs	r0, r3
 80010d4:	d100      	bne.n	80010d8 <__aeabi_dsub+0x290>
 80010d6:	e190      	b.n	80013fa <__aeabi_dsub+0x5b2>
 80010d8:	0008      	movs	r0, r1
 80010da:	4338      	orrs	r0, r7
 80010dc:	d000      	beq.n	80010e0 <__aeabi_dsub+0x298>
 80010de:	e1aa      	b.n	8001436 <__aeabi_dsub+0x5ee>
 80010e0:	4661      	mov	r1, ip
 80010e2:	08db      	lsrs	r3, r3, #3
 80010e4:	0749      	lsls	r1, r1, #29
 80010e6:	430b      	orrs	r3, r1
 80010e8:	4661      	mov	r1, ip
 80010ea:	08cc      	lsrs	r4, r1, #3
 80010ec:	e027      	b.n	800113e <__aeabi_dsub+0x2f6>
 80010ee:	0008      	movs	r0, r1
 80010f0:	4338      	orrs	r0, r7
 80010f2:	d061      	beq.n	80011b8 <__aeabi_dsub+0x370>
 80010f4:	1e50      	subs	r0, r2, #1
 80010f6:	2a01      	cmp	r2, #1
 80010f8:	d100      	bne.n	80010fc <__aeabi_dsub+0x2b4>
 80010fa:	e139      	b.n	8001370 <__aeabi_dsub+0x528>
 80010fc:	42a2      	cmp	r2, r4
 80010fe:	d027      	beq.n	8001150 <__aeabi_dsub+0x308>
 8001100:	0002      	movs	r2, r0
 8001102:	e75d      	b.n	8000fc0 <__aeabi_dsub+0x178>
 8001104:	0002      	movs	r2, r0
 8001106:	391f      	subs	r1, #31
 8001108:	40ca      	lsrs	r2, r1
 800110a:	0011      	movs	r1, r2
 800110c:	2b20      	cmp	r3, #32
 800110e:	d003      	beq.n	8001118 <__aeabi_dsub+0x2d0>
 8001110:	2240      	movs	r2, #64	; 0x40
 8001112:	1ad3      	subs	r3, r2, r3
 8001114:	4098      	lsls	r0, r3
 8001116:	4304      	orrs	r4, r0
 8001118:	1e63      	subs	r3, r4, #1
 800111a:	419c      	sbcs	r4, r3
 800111c:	2300      	movs	r3, #0
 800111e:	4699      	mov	r9, r3
 8001120:	4698      	mov	r8, r3
 8001122:	430c      	orrs	r4, r1
 8001124:	0763      	lsls	r3, r4, #29
 8001126:	d000      	beq.n	800112a <__aeabi_dsub+0x2e2>
 8001128:	e712      	b.n	8000f50 <__aeabi_dsub+0x108>
 800112a:	464b      	mov	r3, r9
 800112c:	464a      	mov	r2, r9
 800112e:	08e4      	lsrs	r4, r4, #3
 8001130:	075b      	lsls	r3, r3, #29
 8001132:	4323      	orrs	r3, r4
 8001134:	08d4      	lsrs	r4, r2, #3
 8001136:	4642      	mov	r2, r8
 8001138:	4919      	ldr	r1, [pc, #100]	; (80011a0 <__aeabi_dsub+0x358>)
 800113a:	428a      	cmp	r2, r1
 800113c:	d00e      	beq.n	800115c <__aeabi_dsub+0x314>
 800113e:	0324      	lsls	r4, r4, #12
 8001140:	0552      	lsls	r2, r2, #21
 8001142:	0b24      	lsrs	r4, r4, #12
 8001144:	0d52      	lsrs	r2, r2, #21
 8001146:	e722      	b.n	8000f8e <__aeabi_dsub+0x146>
 8001148:	000a      	movs	r2, r1
 800114a:	2400      	movs	r4, #0
 800114c:	2300      	movs	r3, #0
 800114e:	e71e      	b.n	8000f8e <__aeabi_dsub+0x146>
 8001150:	08db      	lsrs	r3, r3, #3
 8001152:	4662      	mov	r2, ip
 8001154:	0752      	lsls	r2, r2, #29
 8001156:	4313      	orrs	r3, r2
 8001158:	4662      	mov	r2, ip
 800115a:	08d4      	lsrs	r4, r2, #3
 800115c:	001a      	movs	r2, r3
 800115e:	4322      	orrs	r2, r4
 8001160:	d100      	bne.n	8001164 <__aeabi_dsub+0x31c>
 8001162:	e1fc      	b.n	800155e <__aeabi_dsub+0x716>
 8001164:	2280      	movs	r2, #128	; 0x80
 8001166:	0312      	lsls	r2, r2, #12
 8001168:	4314      	orrs	r4, r2
 800116a:	0324      	lsls	r4, r4, #12
 800116c:	4a0c      	ldr	r2, [pc, #48]	; (80011a0 <__aeabi_dsub+0x358>)
 800116e:	0b24      	lsrs	r4, r4, #12
 8001170:	e70d      	b.n	8000f8e <__aeabi_dsub+0x146>
 8001172:	0020      	movs	r0, r4
 8001174:	f000 fab6 	bl	80016e4 <__clzsi2>
 8001178:	0001      	movs	r1, r0
 800117a:	3118      	adds	r1, #24
 800117c:	291f      	cmp	r1, #31
 800117e:	dc00      	bgt.n	8001182 <__aeabi_dsub+0x33a>
 8001180:	e6c4      	b.n	8000f0c <__aeabi_dsub+0xc4>
 8001182:	3808      	subs	r0, #8
 8001184:	4084      	lsls	r4, r0
 8001186:	4643      	mov	r3, r8
 8001188:	0020      	movs	r0, r4
 800118a:	2400      	movs	r4, #0
 800118c:	4588      	cmp	r8, r1
 800118e:	dc00      	bgt.n	8001192 <__aeabi_dsub+0x34a>
 8001190:	e6c8      	b.n	8000f24 <__aeabi_dsub+0xdc>
 8001192:	4a04      	ldr	r2, [pc, #16]	; (80011a4 <__aeabi_dsub+0x35c>)
 8001194:	1a5b      	subs	r3, r3, r1
 8001196:	4010      	ands	r0, r2
 8001198:	4698      	mov	r8, r3
 800119a:	4681      	mov	r9, r0
 800119c:	e6d6      	b.n	8000f4c <__aeabi_dsub+0x104>
 800119e:	46c0      	nop			; (mov r8, r8)
 80011a0:	000007ff 	.word	0x000007ff
 80011a4:	ff7fffff 	.word	0xff7fffff
 80011a8:	fffff801 	.word	0xfffff801
 80011ac:	000007fe 	.word	0x000007fe
 80011b0:	430f      	orrs	r7, r1
 80011b2:	1e7a      	subs	r2, r7, #1
 80011b4:	4197      	sbcs	r7, r2
 80011b6:	e691      	b.n	8000edc <__aeabi_dsub+0x94>
 80011b8:	4661      	mov	r1, ip
 80011ba:	08db      	lsrs	r3, r3, #3
 80011bc:	0749      	lsls	r1, r1, #29
 80011be:	430b      	orrs	r3, r1
 80011c0:	4661      	mov	r1, ip
 80011c2:	08cc      	lsrs	r4, r1, #3
 80011c4:	e7b8      	b.n	8001138 <__aeabi_dsub+0x2f0>
 80011c6:	4640      	mov	r0, r8
 80011c8:	4cd3      	ldr	r4, [pc, #844]	; (8001518 <__aeabi_dsub+0x6d0>)
 80011ca:	3001      	adds	r0, #1
 80011cc:	4220      	tst	r0, r4
 80011ce:	d000      	beq.n	80011d2 <__aeabi_dsub+0x38a>
 80011d0:	e0a2      	b.n	8001318 <__aeabi_dsub+0x4d0>
 80011d2:	4640      	mov	r0, r8
 80011d4:	2800      	cmp	r0, #0
 80011d6:	d000      	beq.n	80011da <__aeabi_dsub+0x392>
 80011d8:	e101      	b.n	80013de <__aeabi_dsub+0x596>
 80011da:	4660      	mov	r0, ip
 80011dc:	4318      	orrs	r0, r3
 80011de:	d100      	bne.n	80011e2 <__aeabi_dsub+0x39a>
 80011e0:	e15e      	b.n	80014a0 <__aeabi_dsub+0x658>
 80011e2:	0008      	movs	r0, r1
 80011e4:	4338      	orrs	r0, r7
 80011e6:	d000      	beq.n	80011ea <__aeabi_dsub+0x3a2>
 80011e8:	e15f      	b.n	80014aa <__aeabi_dsub+0x662>
 80011ea:	4661      	mov	r1, ip
 80011ec:	08db      	lsrs	r3, r3, #3
 80011ee:	0749      	lsls	r1, r1, #29
 80011f0:	430b      	orrs	r3, r1
 80011f2:	4661      	mov	r1, ip
 80011f4:	08cc      	lsrs	r4, r1, #3
 80011f6:	e7a2      	b.n	800113e <__aeabi_dsub+0x2f6>
 80011f8:	4dc8      	ldr	r5, [pc, #800]	; (800151c <__aeabi_dsub+0x6d4>)
 80011fa:	42a8      	cmp	r0, r5
 80011fc:	d100      	bne.n	8001200 <__aeabi_dsub+0x3b8>
 80011fe:	e0cf      	b.n	80013a0 <__aeabi_dsub+0x558>
 8001200:	2580      	movs	r5, #128	; 0x80
 8001202:	4664      	mov	r4, ip
 8001204:	042d      	lsls	r5, r5, #16
 8001206:	432c      	orrs	r4, r5
 8001208:	46a4      	mov	ip, r4
 800120a:	2a38      	cmp	r2, #56	; 0x38
 800120c:	dc56      	bgt.n	80012bc <__aeabi_dsub+0x474>
 800120e:	2a1f      	cmp	r2, #31
 8001210:	dd00      	ble.n	8001214 <__aeabi_dsub+0x3cc>
 8001212:	e0d1      	b.n	80013b8 <__aeabi_dsub+0x570>
 8001214:	2520      	movs	r5, #32
 8001216:	001e      	movs	r6, r3
 8001218:	1aad      	subs	r5, r5, r2
 800121a:	4664      	mov	r4, ip
 800121c:	40ab      	lsls	r3, r5
 800121e:	40ac      	lsls	r4, r5
 8001220:	40d6      	lsrs	r6, r2
 8001222:	1e5d      	subs	r5, r3, #1
 8001224:	41ab      	sbcs	r3, r5
 8001226:	4334      	orrs	r4, r6
 8001228:	4323      	orrs	r3, r4
 800122a:	4664      	mov	r4, ip
 800122c:	40d4      	lsrs	r4, r2
 800122e:	1b09      	subs	r1, r1, r4
 8001230:	e049      	b.n	80012c6 <__aeabi_dsub+0x47e>
 8001232:	4660      	mov	r0, ip
 8001234:	1bdc      	subs	r4, r3, r7
 8001236:	1a46      	subs	r6, r0, r1
 8001238:	42a3      	cmp	r3, r4
 800123a:	4180      	sbcs	r0, r0
 800123c:	4240      	negs	r0, r0
 800123e:	4681      	mov	r9, r0
 8001240:	0030      	movs	r0, r6
 8001242:	464e      	mov	r6, r9
 8001244:	1b80      	subs	r0, r0, r6
 8001246:	4681      	mov	r9, r0
 8001248:	0200      	lsls	r0, r0, #8
 800124a:	d476      	bmi.n	800133a <__aeabi_dsub+0x4f2>
 800124c:	464b      	mov	r3, r9
 800124e:	4323      	orrs	r3, r4
 8001250:	d000      	beq.n	8001254 <__aeabi_dsub+0x40c>
 8001252:	e652      	b.n	8000efa <__aeabi_dsub+0xb2>
 8001254:	2400      	movs	r4, #0
 8001256:	2500      	movs	r5, #0
 8001258:	e771      	b.n	800113e <__aeabi_dsub+0x2f6>
 800125a:	4339      	orrs	r1, r7
 800125c:	000c      	movs	r4, r1
 800125e:	1e62      	subs	r2, r4, #1
 8001260:	4194      	sbcs	r4, r2
 8001262:	18e4      	adds	r4, r4, r3
 8001264:	429c      	cmp	r4, r3
 8001266:	419b      	sbcs	r3, r3
 8001268:	425b      	negs	r3, r3
 800126a:	4463      	add	r3, ip
 800126c:	4699      	mov	r9, r3
 800126e:	464b      	mov	r3, r9
 8001270:	021b      	lsls	r3, r3, #8
 8001272:	d400      	bmi.n	8001276 <__aeabi_dsub+0x42e>
 8001274:	e756      	b.n	8001124 <__aeabi_dsub+0x2dc>
 8001276:	2301      	movs	r3, #1
 8001278:	469c      	mov	ip, r3
 800127a:	4ba8      	ldr	r3, [pc, #672]	; (800151c <__aeabi_dsub+0x6d4>)
 800127c:	44e0      	add	r8, ip
 800127e:	4598      	cmp	r8, r3
 8001280:	d038      	beq.n	80012f4 <__aeabi_dsub+0x4ac>
 8001282:	464b      	mov	r3, r9
 8001284:	48a6      	ldr	r0, [pc, #664]	; (8001520 <__aeabi_dsub+0x6d8>)
 8001286:	2201      	movs	r2, #1
 8001288:	4003      	ands	r3, r0
 800128a:	0018      	movs	r0, r3
 800128c:	0863      	lsrs	r3, r4, #1
 800128e:	4014      	ands	r4, r2
 8001290:	431c      	orrs	r4, r3
 8001292:	07c3      	lsls	r3, r0, #31
 8001294:	431c      	orrs	r4, r3
 8001296:	0843      	lsrs	r3, r0, #1
 8001298:	4699      	mov	r9, r3
 800129a:	e657      	b.n	8000f4c <__aeabi_dsub+0x104>
 800129c:	0010      	movs	r0, r2
 800129e:	000e      	movs	r6, r1
 80012a0:	3820      	subs	r0, #32
 80012a2:	40c6      	lsrs	r6, r0
 80012a4:	2a20      	cmp	r2, #32
 80012a6:	d004      	beq.n	80012b2 <__aeabi_dsub+0x46a>
 80012a8:	2040      	movs	r0, #64	; 0x40
 80012aa:	1a82      	subs	r2, r0, r2
 80012ac:	4091      	lsls	r1, r2
 80012ae:	430f      	orrs	r7, r1
 80012b0:	46b9      	mov	r9, r7
 80012b2:	464f      	mov	r7, r9
 80012b4:	1e7a      	subs	r2, r7, #1
 80012b6:	4197      	sbcs	r7, r2
 80012b8:	4337      	orrs	r7, r6
 80012ba:	e60f      	b.n	8000edc <__aeabi_dsub+0x94>
 80012bc:	4662      	mov	r2, ip
 80012be:	431a      	orrs	r2, r3
 80012c0:	0013      	movs	r3, r2
 80012c2:	1e5a      	subs	r2, r3, #1
 80012c4:	4193      	sbcs	r3, r2
 80012c6:	1afc      	subs	r4, r7, r3
 80012c8:	42a7      	cmp	r7, r4
 80012ca:	41bf      	sbcs	r7, r7
 80012cc:	427f      	negs	r7, r7
 80012ce:	1bcb      	subs	r3, r1, r7
 80012d0:	4699      	mov	r9, r3
 80012d2:	465d      	mov	r5, fp
 80012d4:	4680      	mov	r8, r0
 80012d6:	e608      	b.n	8000eea <__aeabi_dsub+0xa2>
 80012d8:	4666      	mov	r6, ip
 80012da:	431e      	orrs	r6, r3
 80012dc:	d100      	bne.n	80012e0 <__aeabi_dsub+0x498>
 80012de:	e0be      	b.n	800145e <__aeabi_dsub+0x616>
 80012e0:	1e56      	subs	r6, r2, #1
 80012e2:	2a01      	cmp	r2, #1
 80012e4:	d100      	bne.n	80012e8 <__aeabi_dsub+0x4a0>
 80012e6:	e109      	b.n	80014fc <__aeabi_dsub+0x6b4>
 80012e8:	4c8c      	ldr	r4, [pc, #560]	; (800151c <__aeabi_dsub+0x6d4>)
 80012ea:	42a2      	cmp	r2, r4
 80012ec:	d100      	bne.n	80012f0 <__aeabi_dsub+0x4a8>
 80012ee:	e119      	b.n	8001524 <__aeabi_dsub+0x6dc>
 80012f0:	0032      	movs	r2, r6
 80012f2:	e6c1      	b.n	8001078 <__aeabi_dsub+0x230>
 80012f4:	4642      	mov	r2, r8
 80012f6:	2400      	movs	r4, #0
 80012f8:	2300      	movs	r3, #0
 80012fa:	e648      	b.n	8000f8e <__aeabi_dsub+0x146>
 80012fc:	2020      	movs	r0, #32
 80012fe:	000c      	movs	r4, r1
 8001300:	1a80      	subs	r0, r0, r2
 8001302:	003e      	movs	r6, r7
 8001304:	4087      	lsls	r7, r0
 8001306:	4084      	lsls	r4, r0
 8001308:	40d6      	lsrs	r6, r2
 800130a:	1e78      	subs	r0, r7, #1
 800130c:	4187      	sbcs	r7, r0
 800130e:	40d1      	lsrs	r1, r2
 8001310:	4334      	orrs	r4, r6
 8001312:	433c      	orrs	r4, r7
 8001314:	448c      	add	ip, r1
 8001316:	e7a4      	b.n	8001262 <__aeabi_dsub+0x41a>
 8001318:	4a80      	ldr	r2, [pc, #512]	; (800151c <__aeabi_dsub+0x6d4>)
 800131a:	4290      	cmp	r0, r2
 800131c:	d100      	bne.n	8001320 <__aeabi_dsub+0x4d8>
 800131e:	e0e9      	b.n	80014f4 <__aeabi_dsub+0x6ac>
 8001320:	19df      	adds	r7, r3, r7
 8001322:	429f      	cmp	r7, r3
 8001324:	419b      	sbcs	r3, r3
 8001326:	4461      	add	r1, ip
 8001328:	425b      	negs	r3, r3
 800132a:	18c9      	adds	r1, r1, r3
 800132c:	07cc      	lsls	r4, r1, #31
 800132e:	087f      	lsrs	r7, r7, #1
 8001330:	084b      	lsrs	r3, r1, #1
 8001332:	4699      	mov	r9, r3
 8001334:	4680      	mov	r8, r0
 8001336:	433c      	orrs	r4, r7
 8001338:	e6f4      	b.n	8001124 <__aeabi_dsub+0x2dc>
 800133a:	1afc      	subs	r4, r7, r3
 800133c:	42a7      	cmp	r7, r4
 800133e:	41bf      	sbcs	r7, r7
 8001340:	4663      	mov	r3, ip
 8001342:	427f      	negs	r7, r7
 8001344:	1ac9      	subs	r1, r1, r3
 8001346:	1bcb      	subs	r3, r1, r7
 8001348:	4699      	mov	r9, r3
 800134a:	465d      	mov	r5, fp
 800134c:	e5d5      	b.n	8000efa <__aeabi_dsub+0xb2>
 800134e:	08ff      	lsrs	r7, r7, #3
 8001350:	074b      	lsls	r3, r1, #29
 8001352:	465d      	mov	r5, fp
 8001354:	433b      	orrs	r3, r7
 8001356:	08cc      	lsrs	r4, r1, #3
 8001358:	e6ee      	b.n	8001138 <__aeabi_dsub+0x2f0>
 800135a:	4662      	mov	r2, ip
 800135c:	431a      	orrs	r2, r3
 800135e:	d000      	beq.n	8001362 <__aeabi_dsub+0x51a>
 8001360:	e082      	b.n	8001468 <__aeabi_dsub+0x620>
 8001362:	000b      	movs	r3, r1
 8001364:	433b      	orrs	r3, r7
 8001366:	d11b      	bne.n	80013a0 <__aeabi_dsub+0x558>
 8001368:	2480      	movs	r4, #128	; 0x80
 800136a:	2500      	movs	r5, #0
 800136c:	0324      	lsls	r4, r4, #12
 800136e:	e6f9      	b.n	8001164 <__aeabi_dsub+0x31c>
 8001370:	19dc      	adds	r4, r3, r7
 8001372:	429c      	cmp	r4, r3
 8001374:	419b      	sbcs	r3, r3
 8001376:	4461      	add	r1, ip
 8001378:	4689      	mov	r9, r1
 800137a:	425b      	negs	r3, r3
 800137c:	4499      	add	r9, r3
 800137e:	464b      	mov	r3, r9
 8001380:	021b      	lsls	r3, r3, #8
 8001382:	d444      	bmi.n	800140e <__aeabi_dsub+0x5c6>
 8001384:	2301      	movs	r3, #1
 8001386:	4698      	mov	r8, r3
 8001388:	e6cc      	b.n	8001124 <__aeabi_dsub+0x2dc>
 800138a:	1bdc      	subs	r4, r3, r7
 800138c:	4662      	mov	r2, ip
 800138e:	42a3      	cmp	r3, r4
 8001390:	419b      	sbcs	r3, r3
 8001392:	1a51      	subs	r1, r2, r1
 8001394:	425b      	negs	r3, r3
 8001396:	1acb      	subs	r3, r1, r3
 8001398:	4699      	mov	r9, r3
 800139a:	2301      	movs	r3, #1
 800139c:	4698      	mov	r8, r3
 800139e:	e5a4      	b.n	8000eea <__aeabi_dsub+0xa2>
 80013a0:	08ff      	lsrs	r7, r7, #3
 80013a2:	074b      	lsls	r3, r1, #29
 80013a4:	465d      	mov	r5, fp
 80013a6:	433b      	orrs	r3, r7
 80013a8:	08cc      	lsrs	r4, r1, #3
 80013aa:	e6d7      	b.n	800115c <__aeabi_dsub+0x314>
 80013ac:	4662      	mov	r2, ip
 80013ae:	431a      	orrs	r2, r3
 80013b0:	0014      	movs	r4, r2
 80013b2:	1e63      	subs	r3, r4, #1
 80013b4:	419c      	sbcs	r4, r3
 80013b6:	e679      	b.n	80010ac <__aeabi_dsub+0x264>
 80013b8:	0015      	movs	r5, r2
 80013ba:	4664      	mov	r4, ip
 80013bc:	3d20      	subs	r5, #32
 80013be:	40ec      	lsrs	r4, r5
 80013c0:	46a0      	mov	r8, r4
 80013c2:	2a20      	cmp	r2, #32
 80013c4:	d005      	beq.n	80013d2 <__aeabi_dsub+0x58a>
 80013c6:	2540      	movs	r5, #64	; 0x40
 80013c8:	4664      	mov	r4, ip
 80013ca:	1aaa      	subs	r2, r5, r2
 80013cc:	4094      	lsls	r4, r2
 80013ce:	4323      	orrs	r3, r4
 80013d0:	469a      	mov	sl, r3
 80013d2:	4654      	mov	r4, sl
 80013d4:	1e63      	subs	r3, r4, #1
 80013d6:	419c      	sbcs	r4, r3
 80013d8:	4643      	mov	r3, r8
 80013da:	4323      	orrs	r3, r4
 80013dc:	e773      	b.n	80012c6 <__aeabi_dsub+0x47e>
 80013de:	4662      	mov	r2, ip
 80013e0:	431a      	orrs	r2, r3
 80013e2:	d023      	beq.n	800142c <__aeabi_dsub+0x5e4>
 80013e4:	000a      	movs	r2, r1
 80013e6:	433a      	orrs	r2, r7
 80013e8:	d000      	beq.n	80013ec <__aeabi_dsub+0x5a4>
 80013ea:	e0a0      	b.n	800152e <__aeabi_dsub+0x6e6>
 80013ec:	4662      	mov	r2, ip
 80013ee:	08db      	lsrs	r3, r3, #3
 80013f0:	0752      	lsls	r2, r2, #29
 80013f2:	4313      	orrs	r3, r2
 80013f4:	4662      	mov	r2, ip
 80013f6:	08d4      	lsrs	r4, r2, #3
 80013f8:	e6b0      	b.n	800115c <__aeabi_dsub+0x314>
 80013fa:	000b      	movs	r3, r1
 80013fc:	433b      	orrs	r3, r7
 80013fe:	d100      	bne.n	8001402 <__aeabi_dsub+0x5ba>
 8001400:	e728      	b.n	8001254 <__aeabi_dsub+0x40c>
 8001402:	08ff      	lsrs	r7, r7, #3
 8001404:	074b      	lsls	r3, r1, #29
 8001406:	465d      	mov	r5, fp
 8001408:	433b      	orrs	r3, r7
 800140a:	08cc      	lsrs	r4, r1, #3
 800140c:	e697      	b.n	800113e <__aeabi_dsub+0x2f6>
 800140e:	2302      	movs	r3, #2
 8001410:	4698      	mov	r8, r3
 8001412:	e736      	b.n	8001282 <__aeabi_dsub+0x43a>
 8001414:	1afc      	subs	r4, r7, r3
 8001416:	42a7      	cmp	r7, r4
 8001418:	41bf      	sbcs	r7, r7
 800141a:	4663      	mov	r3, ip
 800141c:	427f      	negs	r7, r7
 800141e:	1ac9      	subs	r1, r1, r3
 8001420:	1bcb      	subs	r3, r1, r7
 8001422:	4699      	mov	r9, r3
 8001424:	2301      	movs	r3, #1
 8001426:	465d      	mov	r5, fp
 8001428:	4698      	mov	r8, r3
 800142a:	e55e      	b.n	8000eea <__aeabi_dsub+0xa2>
 800142c:	074b      	lsls	r3, r1, #29
 800142e:	08ff      	lsrs	r7, r7, #3
 8001430:	433b      	orrs	r3, r7
 8001432:	08cc      	lsrs	r4, r1, #3
 8001434:	e692      	b.n	800115c <__aeabi_dsub+0x314>
 8001436:	1bdc      	subs	r4, r3, r7
 8001438:	4660      	mov	r0, ip
 800143a:	42a3      	cmp	r3, r4
 800143c:	41b6      	sbcs	r6, r6
 800143e:	1a40      	subs	r0, r0, r1
 8001440:	4276      	negs	r6, r6
 8001442:	1b80      	subs	r0, r0, r6
 8001444:	4681      	mov	r9, r0
 8001446:	0200      	lsls	r0, r0, #8
 8001448:	d560      	bpl.n	800150c <__aeabi_dsub+0x6c4>
 800144a:	1afc      	subs	r4, r7, r3
 800144c:	42a7      	cmp	r7, r4
 800144e:	41bf      	sbcs	r7, r7
 8001450:	4663      	mov	r3, ip
 8001452:	427f      	negs	r7, r7
 8001454:	1ac9      	subs	r1, r1, r3
 8001456:	1bcb      	subs	r3, r1, r7
 8001458:	4699      	mov	r9, r3
 800145a:	465d      	mov	r5, fp
 800145c:	e576      	b.n	8000f4c <__aeabi_dsub+0x104>
 800145e:	08ff      	lsrs	r7, r7, #3
 8001460:	074b      	lsls	r3, r1, #29
 8001462:	433b      	orrs	r3, r7
 8001464:	08cc      	lsrs	r4, r1, #3
 8001466:	e667      	b.n	8001138 <__aeabi_dsub+0x2f0>
 8001468:	000a      	movs	r2, r1
 800146a:	08db      	lsrs	r3, r3, #3
 800146c:	433a      	orrs	r2, r7
 800146e:	d100      	bne.n	8001472 <__aeabi_dsub+0x62a>
 8001470:	e66f      	b.n	8001152 <__aeabi_dsub+0x30a>
 8001472:	4662      	mov	r2, ip
 8001474:	0752      	lsls	r2, r2, #29
 8001476:	4313      	orrs	r3, r2
 8001478:	4662      	mov	r2, ip
 800147a:	08d4      	lsrs	r4, r2, #3
 800147c:	2280      	movs	r2, #128	; 0x80
 800147e:	0312      	lsls	r2, r2, #12
 8001480:	4214      	tst	r4, r2
 8001482:	d007      	beq.n	8001494 <__aeabi_dsub+0x64c>
 8001484:	08c8      	lsrs	r0, r1, #3
 8001486:	4210      	tst	r0, r2
 8001488:	d104      	bne.n	8001494 <__aeabi_dsub+0x64c>
 800148a:	465d      	mov	r5, fp
 800148c:	0004      	movs	r4, r0
 800148e:	08fb      	lsrs	r3, r7, #3
 8001490:	0749      	lsls	r1, r1, #29
 8001492:	430b      	orrs	r3, r1
 8001494:	0f5a      	lsrs	r2, r3, #29
 8001496:	00db      	lsls	r3, r3, #3
 8001498:	08db      	lsrs	r3, r3, #3
 800149a:	0752      	lsls	r2, r2, #29
 800149c:	4313      	orrs	r3, r2
 800149e:	e65d      	b.n	800115c <__aeabi_dsub+0x314>
 80014a0:	074b      	lsls	r3, r1, #29
 80014a2:	08ff      	lsrs	r7, r7, #3
 80014a4:	433b      	orrs	r3, r7
 80014a6:	08cc      	lsrs	r4, r1, #3
 80014a8:	e649      	b.n	800113e <__aeabi_dsub+0x2f6>
 80014aa:	19dc      	adds	r4, r3, r7
 80014ac:	429c      	cmp	r4, r3
 80014ae:	419b      	sbcs	r3, r3
 80014b0:	4461      	add	r1, ip
 80014b2:	4689      	mov	r9, r1
 80014b4:	425b      	negs	r3, r3
 80014b6:	4499      	add	r9, r3
 80014b8:	464b      	mov	r3, r9
 80014ba:	021b      	lsls	r3, r3, #8
 80014bc:	d400      	bmi.n	80014c0 <__aeabi_dsub+0x678>
 80014be:	e631      	b.n	8001124 <__aeabi_dsub+0x2dc>
 80014c0:	464a      	mov	r2, r9
 80014c2:	4b17      	ldr	r3, [pc, #92]	; (8001520 <__aeabi_dsub+0x6d8>)
 80014c4:	401a      	ands	r2, r3
 80014c6:	2301      	movs	r3, #1
 80014c8:	4691      	mov	r9, r2
 80014ca:	4698      	mov	r8, r3
 80014cc:	e62a      	b.n	8001124 <__aeabi_dsub+0x2dc>
 80014ce:	0016      	movs	r6, r2
 80014d0:	4664      	mov	r4, ip
 80014d2:	3e20      	subs	r6, #32
 80014d4:	40f4      	lsrs	r4, r6
 80014d6:	46a0      	mov	r8, r4
 80014d8:	2a20      	cmp	r2, #32
 80014da:	d005      	beq.n	80014e8 <__aeabi_dsub+0x6a0>
 80014dc:	2640      	movs	r6, #64	; 0x40
 80014de:	4664      	mov	r4, ip
 80014e0:	1ab2      	subs	r2, r6, r2
 80014e2:	4094      	lsls	r4, r2
 80014e4:	4323      	orrs	r3, r4
 80014e6:	469a      	mov	sl, r3
 80014e8:	4654      	mov	r4, sl
 80014ea:	1e63      	subs	r3, r4, #1
 80014ec:	419c      	sbcs	r4, r3
 80014ee:	4643      	mov	r3, r8
 80014f0:	431c      	orrs	r4, r3
 80014f2:	e5db      	b.n	80010ac <__aeabi_dsub+0x264>
 80014f4:	0002      	movs	r2, r0
 80014f6:	2400      	movs	r4, #0
 80014f8:	2300      	movs	r3, #0
 80014fa:	e548      	b.n	8000f8e <__aeabi_dsub+0x146>
 80014fc:	19dc      	adds	r4, r3, r7
 80014fe:	42bc      	cmp	r4, r7
 8001500:	41bf      	sbcs	r7, r7
 8001502:	4461      	add	r1, ip
 8001504:	4689      	mov	r9, r1
 8001506:	427f      	negs	r7, r7
 8001508:	44b9      	add	r9, r7
 800150a:	e738      	b.n	800137e <__aeabi_dsub+0x536>
 800150c:	464b      	mov	r3, r9
 800150e:	4323      	orrs	r3, r4
 8001510:	d100      	bne.n	8001514 <__aeabi_dsub+0x6cc>
 8001512:	e69f      	b.n	8001254 <__aeabi_dsub+0x40c>
 8001514:	e606      	b.n	8001124 <__aeabi_dsub+0x2dc>
 8001516:	46c0      	nop			; (mov r8, r8)
 8001518:	000007fe 	.word	0x000007fe
 800151c:	000007ff 	.word	0x000007ff
 8001520:	ff7fffff 	.word	0xff7fffff
 8001524:	08ff      	lsrs	r7, r7, #3
 8001526:	074b      	lsls	r3, r1, #29
 8001528:	433b      	orrs	r3, r7
 800152a:	08cc      	lsrs	r4, r1, #3
 800152c:	e616      	b.n	800115c <__aeabi_dsub+0x314>
 800152e:	4662      	mov	r2, ip
 8001530:	08db      	lsrs	r3, r3, #3
 8001532:	0752      	lsls	r2, r2, #29
 8001534:	4313      	orrs	r3, r2
 8001536:	4662      	mov	r2, ip
 8001538:	08d4      	lsrs	r4, r2, #3
 800153a:	2280      	movs	r2, #128	; 0x80
 800153c:	0312      	lsls	r2, r2, #12
 800153e:	4214      	tst	r4, r2
 8001540:	d007      	beq.n	8001552 <__aeabi_dsub+0x70a>
 8001542:	08c8      	lsrs	r0, r1, #3
 8001544:	4210      	tst	r0, r2
 8001546:	d104      	bne.n	8001552 <__aeabi_dsub+0x70a>
 8001548:	465d      	mov	r5, fp
 800154a:	0004      	movs	r4, r0
 800154c:	08fb      	lsrs	r3, r7, #3
 800154e:	0749      	lsls	r1, r1, #29
 8001550:	430b      	orrs	r3, r1
 8001552:	0f5a      	lsrs	r2, r3, #29
 8001554:	00db      	lsls	r3, r3, #3
 8001556:	0752      	lsls	r2, r2, #29
 8001558:	08db      	lsrs	r3, r3, #3
 800155a:	4313      	orrs	r3, r2
 800155c:	e5fe      	b.n	800115c <__aeabi_dsub+0x314>
 800155e:	2300      	movs	r3, #0
 8001560:	4a01      	ldr	r2, [pc, #4]	; (8001568 <__aeabi_dsub+0x720>)
 8001562:	001c      	movs	r4, r3
 8001564:	e513      	b.n	8000f8e <__aeabi_dsub+0x146>
 8001566:	46c0      	nop			; (mov r8, r8)
 8001568:	000007ff 	.word	0x000007ff

0800156c <__aeabi_d2iz>:
 800156c:	000a      	movs	r2, r1
 800156e:	b530      	push	{r4, r5, lr}
 8001570:	4c13      	ldr	r4, [pc, #76]	; (80015c0 <__aeabi_d2iz+0x54>)
 8001572:	0053      	lsls	r3, r2, #1
 8001574:	0309      	lsls	r1, r1, #12
 8001576:	0005      	movs	r5, r0
 8001578:	0b09      	lsrs	r1, r1, #12
 800157a:	2000      	movs	r0, #0
 800157c:	0d5b      	lsrs	r3, r3, #21
 800157e:	0fd2      	lsrs	r2, r2, #31
 8001580:	42a3      	cmp	r3, r4
 8001582:	dd04      	ble.n	800158e <__aeabi_d2iz+0x22>
 8001584:	480f      	ldr	r0, [pc, #60]	; (80015c4 <__aeabi_d2iz+0x58>)
 8001586:	4283      	cmp	r3, r0
 8001588:	dd02      	ble.n	8001590 <__aeabi_d2iz+0x24>
 800158a:	4b0f      	ldr	r3, [pc, #60]	; (80015c8 <__aeabi_d2iz+0x5c>)
 800158c:	18d0      	adds	r0, r2, r3
 800158e:	bd30      	pop	{r4, r5, pc}
 8001590:	2080      	movs	r0, #128	; 0x80
 8001592:	0340      	lsls	r0, r0, #13
 8001594:	4301      	orrs	r1, r0
 8001596:	480d      	ldr	r0, [pc, #52]	; (80015cc <__aeabi_d2iz+0x60>)
 8001598:	1ac0      	subs	r0, r0, r3
 800159a:	281f      	cmp	r0, #31
 800159c:	dd08      	ble.n	80015b0 <__aeabi_d2iz+0x44>
 800159e:	480c      	ldr	r0, [pc, #48]	; (80015d0 <__aeabi_d2iz+0x64>)
 80015a0:	1ac3      	subs	r3, r0, r3
 80015a2:	40d9      	lsrs	r1, r3
 80015a4:	000b      	movs	r3, r1
 80015a6:	4258      	negs	r0, r3
 80015a8:	2a00      	cmp	r2, #0
 80015aa:	d1f0      	bne.n	800158e <__aeabi_d2iz+0x22>
 80015ac:	0018      	movs	r0, r3
 80015ae:	e7ee      	b.n	800158e <__aeabi_d2iz+0x22>
 80015b0:	4c08      	ldr	r4, [pc, #32]	; (80015d4 <__aeabi_d2iz+0x68>)
 80015b2:	40c5      	lsrs	r5, r0
 80015b4:	46a4      	mov	ip, r4
 80015b6:	4463      	add	r3, ip
 80015b8:	4099      	lsls	r1, r3
 80015ba:	000b      	movs	r3, r1
 80015bc:	432b      	orrs	r3, r5
 80015be:	e7f2      	b.n	80015a6 <__aeabi_d2iz+0x3a>
 80015c0:	000003fe 	.word	0x000003fe
 80015c4:	0000041d 	.word	0x0000041d
 80015c8:	7fffffff 	.word	0x7fffffff
 80015cc:	00000433 	.word	0x00000433
 80015d0:	00000413 	.word	0x00000413
 80015d4:	fffffbed 	.word	0xfffffbed

080015d8 <__aeabi_f2d>:
 80015d8:	b570      	push	{r4, r5, r6, lr}
 80015da:	0043      	lsls	r3, r0, #1
 80015dc:	0246      	lsls	r6, r0, #9
 80015de:	0fc4      	lsrs	r4, r0, #31
 80015e0:	20fe      	movs	r0, #254	; 0xfe
 80015e2:	0e1b      	lsrs	r3, r3, #24
 80015e4:	1c59      	adds	r1, r3, #1
 80015e6:	0a75      	lsrs	r5, r6, #9
 80015e8:	4208      	tst	r0, r1
 80015ea:	d00c      	beq.n	8001606 <__aeabi_f2d+0x2e>
 80015ec:	22e0      	movs	r2, #224	; 0xe0
 80015ee:	0092      	lsls	r2, r2, #2
 80015f0:	4694      	mov	ip, r2
 80015f2:	076d      	lsls	r5, r5, #29
 80015f4:	0b36      	lsrs	r6, r6, #12
 80015f6:	4463      	add	r3, ip
 80015f8:	051b      	lsls	r3, r3, #20
 80015fa:	4333      	orrs	r3, r6
 80015fc:	07e4      	lsls	r4, r4, #31
 80015fe:	4323      	orrs	r3, r4
 8001600:	0028      	movs	r0, r5
 8001602:	0019      	movs	r1, r3
 8001604:	bd70      	pop	{r4, r5, r6, pc}
 8001606:	2b00      	cmp	r3, #0
 8001608:	d114      	bne.n	8001634 <__aeabi_f2d+0x5c>
 800160a:	2d00      	cmp	r5, #0
 800160c:	d01b      	beq.n	8001646 <__aeabi_f2d+0x6e>
 800160e:	0028      	movs	r0, r5
 8001610:	f000 f868 	bl	80016e4 <__clzsi2>
 8001614:	280a      	cmp	r0, #10
 8001616:	dc1c      	bgt.n	8001652 <__aeabi_f2d+0x7a>
 8001618:	230b      	movs	r3, #11
 800161a:	002e      	movs	r6, r5
 800161c:	1a1b      	subs	r3, r3, r0
 800161e:	40de      	lsrs	r6, r3
 8001620:	0003      	movs	r3, r0
 8001622:	3315      	adds	r3, #21
 8001624:	409d      	lsls	r5, r3
 8001626:	4a0e      	ldr	r2, [pc, #56]	; (8001660 <__aeabi_f2d+0x88>)
 8001628:	0336      	lsls	r6, r6, #12
 800162a:	1a12      	subs	r2, r2, r0
 800162c:	0552      	lsls	r2, r2, #21
 800162e:	0b36      	lsrs	r6, r6, #12
 8001630:	0d53      	lsrs	r3, r2, #21
 8001632:	e7e1      	b.n	80015f8 <__aeabi_f2d+0x20>
 8001634:	2d00      	cmp	r5, #0
 8001636:	d009      	beq.n	800164c <__aeabi_f2d+0x74>
 8001638:	2280      	movs	r2, #128	; 0x80
 800163a:	0b36      	lsrs	r6, r6, #12
 800163c:	0312      	lsls	r2, r2, #12
 800163e:	4b09      	ldr	r3, [pc, #36]	; (8001664 <__aeabi_f2d+0x8c>)
 8001640:	076d      	lsls	r5, r5, #29
 8001642:	4316      	orrs	r6, r2
 8001644:	e7d8      	b.n	80015f8 <__aeabi_f2d+0x20>
 8001646:	2300      	movs	r3, #0
 8001648:	2600      	movs	r6, #0
 800164a:	e7d5      	b.n	80015f8 <__aeabi_f2d+0x20>
 800164c:	2600      	movs	r6, #0
 800164e:	4b05      	ldr	r3, [pc, #20]	; (8001664 <__aeabi_f2d+0x8c>)
 8001650:	e7d2      	b.n	80015f8 <__aeabi_f2d+0x20>
 8001652:	0003      	movs	r3, r0
 8001654:	3b0b      	subs	r3, #11
 8001656:	409d      	lsls	r5, r3
 8001658:	002e      	movs	r6, r5
 800165a:	2500      	movs	r5, #0
 800165c:	e7e3      	b.n	8001626 <__aeabi_f2d+0x4e>
 800165e:	46c0      	nop			; (mov r8, r8)
 8001660:	00000389 	.word	0x00000389
 8001664:	000007ff 	.word	0x000007ff

08001668 <__aeabi_cdrcmple>:
 8001668:	4684      	mov	ip, r0
 800166a:	0010      	movs	r0, r2
 800166c:	4662      	mov	r2, ip
 800166e:	468c      	mov	ip, r1
 8001670:	0019      	movs	r1, r3
 8001672:	4663      	mov	r3, ip
 8001674:	e000      	b.n	8001678 <__aeabi_cdcmpeq>
 8001676:	46c0      	nop			; (mov r8, r8)

08001678 <__aeabi_cdcmpeq>:
 8001678:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800167a:	f000 f8f9 	bl	8001870 <__ledf2>
 800167e:	2800      	cmp	r0, #0
 8001680:	d401      	bmi.n	8001686 <__aeabi_cdcmpeq+0xe>
 8001682:	2100      	movs	r1, #0
 8001684:	42c8      	cmn	r0, r1
 8001686:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08001688 <__aeabi_dcmpeq>:
 8001688:	b510      	push	{r4, lr}
 800168a:	f000 f849 	bl	8001720 <__eqdf2>
 800168e:	4240      	negs	r0, r0
 8001690:	3001      	adds	r0, #1
 8001692:	bd10      	pop	{r4, pc}

08001694 <__aeabi_dcmplt>:
 8001694:	b510      	push	{r4, lr}
 8001696:	f000 f8eb 	bl	8001870 <__ledf2>
 800169a:	2800      	cmp	r0, #0
 800169c:	db01      	blt.n	80016a2 <__aeabi_dcmplt+0xe>
 800169e:	2000      	movs	r0, #0
 80016a0:	bd10      	pop	{r4, pc}
 80016a2:	2001      	movs	r0, #1
 80016a4:	bd10      	pop	{r4, pc}
 80016a6:	46c0      	nop			; (mov r8, r8)

080016a8 <__aeabi_dcmple>:
 80016a8:	b510      	push	{r4, lr}
 80016aa:	f000 f8e1 	bl	8001870 <__ledf2>
 80016ae:	2800      	cmp	r0, #0
 80016b0:	dd01      	ble.n	80016b6 <__aeabi_dcmple+0xe>
 80016b2:	2000      	movs	r0, #0
 80016b4:	bd10      	pop	{r4, pc}
 80016b6:	2001      	movs	r0, #1
 80016b8:	bd10      	pop	{r4, pc}
 80016ba:	46c0      	nop			; (mov r8, r8)

080016bc <__aeabi_dcmpgt>:
 80016bc:	b510      	push	{r4, lr}
 80016be:	f000 f871 	bl	80017a4 <__gedf2>
 80016c2:	2800      	cmp	r0, #0
 80016c4:	dc01      	bgt.n	80016ca <__aeabi_dcmpgt+0xe>
 80016c6:	2000      	movs	r0, #0
 80016c8:	bd10      	pop	{r4, pc}
 80016ca:	2001      	movs	r0, #1
 80016cc:	bd10      	pop	{r4, pc}
 80016ce:	46c0      	nop			; (mov r8, r8)

080016d0 <__aeabi_dcmpge>:
 80016d0:	b510      	push	{r4, lr}
 80016d2:	f000 f867 	bl	80017a4 <__gedf2>
 80016d6:	2800      	cmp	r0, #0
 80016d8:	da01      	bge.n	80016de <__aeabi_dcmpge+0xe>
 80016da:	2000      	movs	r0, #0
 80016dc:	bd10      	pop	{r4, pc}
 80016de:	2001      	movs	r0, #1
 80016e0:	bd10      	pop	{r4, pc}
 80016e2:	46c0      	nop			; (mov r8, r8)

080016e4 <__clzsi2>:
 80016e4:	211c      	movs	r1, #28
 80016e6:	2301      	movs	r3, #1
 80016e8:	041b      	lsls	r3, r3, #16
 80016ea:	4298      	cmp	r0, r3
 80016ec:	d301      	bcc.n	80016f2 <__clzsi2+0xe>
 80016ee:	0c00      	lsrs	r0, r0, #16
 80016f0:	3910      	subs	r1, #16
 80016f2:	0a1b      	lsrs	r3, r3, #8
 80016f4:	4298      	cmp	r0, r3
 80016f6:	d301      	bcc.n	80016fc <__clzsi2+0x18>
 80016f8:	0a00      	lsrs	r0, r0, #8
 80016fa:	3908      	subs	r1, #8
 80016fc:	091b      	lsrs	r3, r3, #4
 80016fe:	4298      	cmp	r0, r3
 8001700:	d301      	bcc.n	8001706 <__clzsi2+0x22>
 8001702:	0900      	lsrs	r0, r0, #4
 8001704:	3904      	subs	r1, #4
 8001706:	a202      	add	r2, pc, #8	; (adr r2, 8001710 <__clzsi2+0x2c>)
 8001708:	5c10      	ldrb	r0, [r2, r0]
 800170a:	1840      	adds	r0, r0, r1
 800170c:	4770      	bx	lr
 800170e:	46c0      	nop			; (mov r8, r8)
 8001710:	02020304 	.word	0x02020304
 8001714:	01010101 	.word	0x01010101
	...

08001720 <__eqdf2>:
 8001720:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001722:	464e      	mov	r6, r9
 8001724:	4645      	mov	r5, r8
 8001726:	46de      	mov	lr, fp
 8001728:	4657      	mov	r7, sl
 800172a:	4690      	mov	r8, r2
 800172c:	b5e0      	push	{r5, r6, r7, lr}
 800172e:	0017      	movs	r7, r2
 8001730:	031a      	lsls	r2, r3, #12
 8001732:	0b12      	lsrs	r2, r2, #12
 8001734:	0005      	movs	r5, r0
 8001736:	4684      	mov	ip, r0
 8001738:	4819      	ldr	r0, [pc, #100]	; (80017a0 <__eqdf2+0x80>)
 800173a:	030e      	lsls	r6, r1, #12
 800173c:	004c      	lsls	r4, r1, #1
 800173e:	4691      	mov	r9, r2
 8001740:	005a      	lsls	r2, r3, #1
 8001742:	0fdb      	lsrs	r3, r3, #31
 8001744:	469b      	mov	fp, r3
 8001746:	0b36      	lsrs	r6, r6, #12
 8001748:	0d64      	lsrs	r4, r4, #21
 800174a:	0fc9      	lsrs	r1, r1, #31
 800174c:	0d52      	lsrs	r2, r2, #21
 800174e:	4284      	cmp	r4, r0
 8001750:	d019      	beq.n	8001786 <__eqdf2+0x66>
 8001752:	4282      	cmp	r2, r0
 8001754:	d010      	beq.n	8001778 <__eqdf2+0x58>
 8001756:	2001      	movs	r0, #1
 8001758:	4294      	cmp	r4, r2
 800175a:	d10e      	bne.n	800177a <__eqdf2+0x5a>
 800175c:	454e      	cmp	r6, r9
 800175e:	d10c      	bne.n	800177a <__eqdf2+0x5a>
 8001760:	2001      	movs	r0, #1
 8001762:	45c4      	cmp	ip, r8
 8001764:	d109      	bne.n	800177a <__eqdf2+0x5a>
 8001766:	4559      	cmp	r1, fp
 8001768:	d017      	beq.n	800179a <__eqdf2+0x7a>
 800176a:	2c00      	cmp	r4, #0
 800176c:	d105      	bne.n	800177a <__eqdf2+0x5a>
 800176e:	0030      	movs	r0, r6
 8001770:	4328      	orrs	r0, r5
 8001772:	1e43      	subs	r3, r0, #1
 8001774:	4198      	sbcs	r0, r3
 8001776:	e000      	b.n	800177a <__eqdf2+0x5a>
 8001778:	2001      	movs	r0, #1
 800177a:	bcf0      	pop	{r4, r5, r6, r7}
 800177c:	46bb      	mov	fp, r7
 800177e:	46b2      	mov	sl, r6
 8001780:	46a9      	mov	r9, r5
 8001782:	46a0      	mov	r8, r4
 8001784:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001786:	0033      	movs	r3, r6
 8001788:	2001      	movs	r0, #1
 800178a:	432b      	orrs	r3, r5
 800178c:	d1f5      	bne.n	800177a <__eqdf2+0x5a>
 800178e:	42a2      	cmp	r2, r4
 8001790:	d1f3      	bne.n	800177a <__eqdf2+0x5a>
 8001792:	464b      	mov	r3, r9
 8001794:	433b      	orrs	r3, r7
 8001796:	d1f0      	bne.n	800177a <__eqdf2+0x5a>
 8001798:	e7e2      	b.n	8001760 <__eqdf2+0x40>
 800179a:	2000      	movs	r0, #0
 800179c:	e7ed      	b.n	800177a <__eqdf2+0x5a>
 800179e:	46c0      	nop			; (mov r8, r8)
 80017a0:	000007ff 	.word	0x000007ff

080017a4 <__gedf2>:
 80017a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80017a6:	4647      	mov	r7, r8
 80017a8:	46ce      	mov	lr, r9
 80017aa:	0004      	movs	r4, r0
 80017ac:	0018      	movs	r0, r3
 80017ae:	0016      	movs	r6, r2
 80017b0:	031b      	lsls	r3, r3, #12
 80017b2:	0b1b      	lsrs	r3, r3, #12
 80017b4:	4d2d      	ldr	r5, [pc, #180]	; (800186c <__gedf2+0xc8>)
 80017b6:	004a      	lsls	r2, r1, #1
 80017b8:	4699      	mov	r9, r3
 80017ba:	b580      	push	{r7, lr}
 80017bc:	0043      	lsls	r3, r0, #1
 80017be:	030f      	lsls	r7, r1, #12
 80017c0:	46a4      	mov	ip, r4
 80017c2:	46b0      	mov	r8, r6
 80017c4:	0b3f      	lsrs	r7, r7, #12
 80017c6:	0d52      	lsrs	r2, r2, #21
 80017c8:	0fc9      	lsrs	r1, r1, #31
 80017ca:	0d5b      	lsrs	r3, r3, #21
 80017cc:	0fc0      	lsrs	r0, r0, #31
 80017ce:	42aa      	cmp	r2, r5
 80017d0:	d021      	beq.n	8001816 <__gedf2+0x72>
 80017d2:	42ab      	cmp	r3, r5
 80017d4:	d013      	beq.n	80017fe <__gedf2+0x5a>
 80017d6:	2a00      	cmp	r2, #0
 80017d8:	d122      	bne.n	8001820 <__gedf2+0x7c>
 80017da:	433c      	orrs	r4, r7
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d102      	bne.n	80017e6 <__gedf2+0x42>
 80017e0:	464d      	mov	r5, r9
 80017e2:	432e      	orrs	r6, r5
 80017e4:	d022      	beq.n	800182c <__gedf2+0x88>
 80017e6:	2c00      	cmp	r4, #0
 80017e8:	d010      	beq.n	800180c <__gedf2+0x68>
 80017ea:	4281      	cmp	r1, r0
 80017ec:	d022      	beq.n	8001834 <__gedf2+0x90>
 80017ee:	2002      	movs	r0, #2
 80017f0:	3901      	subs	r1, #1
 80017f2:	4008      	ands	r0, r1
 80017f4:	3801      	subs	r0, #1
 80017f6:	bcc0      	pop	{r6, r7}
 80017f8:	46b9      	mov	r9, r7
 80017fa:	46b0      	mov	r8, r6
 80017fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80017fe:	464d      	mov	r5, r9
 8001800:	432e      	orrs	r6, r5
 8001802:	d129      	bne.n	8001858 <__gedf2+0xb4>
 8001804:	2a00      	cmp	r2, #0
 8001806:	d1f0      	bne.n	80017ea <__gedf2+0x46>
 8001808:	433c      	orrs	r4, r7
 800180a:	d1ee      	bne.n	80017ea <__gedf2+0x46>
 800180c:	2800      	cmp	r0, #0
 800180e:	d1f2      	bne.n	80017f6 <__gedf2+0x52>
 8001810:	2001      	movs	r0, #1
 8001812:	4240      	negs	r0, r0
 8001814:	e7ef      	b.n	80017f6 <__gedf2+0x52>
 8001816:	003d      	movs	r5, r7
 8001818:	4325      	orrs	r5, r4
 800181a:	d11d      	bne.n	8001858 <__gedf2+0xb4>
 800181c:	4293      	cmp	r3, r2
 800181e:	d0ee      	beq.n	80017fe <__gedf2+0x5a>
 8001820:	2b00      	cmp	r3, #0
 8001822:	d1e2      	bne.n	80017ea <__gedf2+0x46>
 8001824:	464c      	mov	r4, r9
 8001826:	4326      	orrs	r6, r4
 8001828:	d1df      	bne.n	80017ea <__gedf2+0x46>
 800182a:	e7e0      	b.n	80017ee <__gedf2+0x4a>
 800182c:	2000      	movs	r0, #0
 800182e:	2c00      	cmp	r4, #0
 8001830:	d0e1      	beq.n	80017f6 <__gedf2+0x52>
 8001832:	e7dc      	b.n	80017ee <__gedf2+0x4a>
 8001834:	429a      	cmp	r2, r3
 8001836:	dc0a      	bgt.n	800184e <__gedf2+0xaa>
 8001838:	dbe8      	blt.n	800180c <__gedf2+0x68>
 800183a:	454f      	cmp	r7, r9
 800183c:	d8d7      	bhi.n	80017ee <__gedf2+0x4a>
 800183e:	d00e      	beq.n	800185e <__gedf2+0xba>
 8001840:	2000      	movs	r0, #0
 8001842:	454f      	cmp	r7, r9
 8001844:	d2d7      	bcs.n	80017f6 <__gedf2+0x52>
 8001846:	2900      	cmp	r1, #0
 8001848:	d0e2      	beq.n	8001810 <__gedf2+0x6c>
 800184a:	0008      	movs	r0, r1
 800184c:	e7d3      	b.n	80017f6 <__gedf2+0x52>
 800184e:	4243      	negs	r3, r0
 8001850:	4158      	adcs	r0, r3
 8001852:	0040      	lsls	r0, r0, #1
 8001854:	3801      	subs	r0, #1
 8001856:	e7ce      	b.n	80017f6 <__gedf2+0x52>
 8001858:	2002      	movs	r0, #2
 800185a:	4240      	negs	r0, r0
 800185c:	e7cb      	b.n	80017f6 <__gedf2+0x52>
 800185e:	45c4      	cmp	ip, r8
 8001860:	d8c5      	bhi.n	80017ee <__gedf2+0x4a>
 8001862:	2000      	movs	r0, #0
 8001864:	45c4      	cmp	ip, r8
 8001866:	d2c6      	bcs.n	80017f6 <__gedf2+0x52>
 8001868:	e7ed      	b.n	8001846 <__gedf2+0xa2>
 800186a:	46c0      	nop			; (mov r8, r8)
 800186c:	000007ff 	.word	0x000007ff

08001870 <__ledf2>:
 8001870:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001872:	4647      	mov	r7, r8
 8001874:	46ce      	mov	lr, r9
 8001876:	0004      	movs	r4, r0
 8001878:	0018      	movs	r0, r3
 800187a:	0016      	movs	r6, r2
 800187c:	031b      	lsls	r3, r3, #12
 800187e:	0b1b      	lsrs	r3, r3, #12
 8001880:	4d2c      	ldr	r5, [pc, #176]	; (8001934 <__ledf2+0xc4>)
 8001882:	004a      	lsls	r2, r1, #1
 8001884:	4699      	mov	r9, r3
 8001886:	b580      	push	{r7, lr}
 8001888:	0043      	lsls	r3, r0, #1
 800188a:	030f      	lsls	r7, r1, #12
 800188c:	46a4      	mov	ip, r4
 800188e:	46b0      	mov	r8, r6
 8001890:	0b3f      	lsrs	r7, r7, #12
 8001892:	0d52      	lsrs	r2, r2, #21
 8001894:	0fc9      	lsrs	r1, r1, #31
 8001896:	0d5b      	lsrs	r3, r3, #21
 8001898:	0fc0      	lsrs	r0, r0, #31
 800189a:	42aa      	cmp	r2, r5
 800189c:	d00d      	beq.n	80018ba <__ledf2+0x4a>
 800189e:	42ab      	cmp	r3, r5
 80018a0:	d010      	beq.n	80018c4 <__ledf2+0x54>
 80018a2:	2a00      	cmp	r2, #0
 80018a4:	d127      	bne.n	80018f6 <__ledf2+0x86>
 80018a6:	433c      	orrs	r4, r7
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d111      	bne.n	80018d0 <__ledf2+0x60>
 80018ac:	464d      	mov	r5, r9
 80018ae:	432e      	orrs	r6, r5
 80018b0:	d10e      	bne.n	80018d0 <__ledf2+0x60>
 80018b2:	2000      	movs	r0, #0
 80018b4:	2c00      	cmp	r4, #0
 80018b6:	d015      	beq.n	80018e4 <__ledf2+0x74>
 80018b8:	e00e      	b.n	80018d8 <__ledf2+0x68>
 80018ba:	003d      	movs	r5, r7
 80018bc:	4325      	orrs	r5, r4
 80018be:	d110      	bne.n	80018e2 <__ledf2+0x72>
 80018c0:	4293      	cmp	r3, r2
 80018c2:	d118      	bne.n	80018f6 <__ledf2+0x86>
 80018c4:	464d      	mov	r5, r9
 80018c6:	432e      	orrs	r6, r5
 80018c8:	d10b      	bne.n	80018e2 <__ledf2+0x72>
 80018ca:	2a00      	cmp	r2, #0
 80018cc:	d102      	bne.n	80018d4 <__ledf2+0x64>
 80018ce:	433c      	orrs	r4, r7
 80018d0:	2c00      	cmp	r4, #0
 80018d2:	d00b      	beq.n	80018ec <__ledf2+0x7c>
 80018d4:	4281      	cmp	r1, r0
 80018d6:	d014      	beq.n	8001902 <__ledf2+0x92>
 80018d8:	2002      	movs	r0, #2
 80018da:	3901      	subs	r1, #1
 80018dc:	4008      	ands	r0, r1
 80018de:	3801      	subs	r0, #1
 80018e0:	e000      	b.n	80018e4 <__ledf2+0x74>
 80018e2:	2002      	movs	r0, #2
 80018e4:	bcc0      	pop	{r6, r7}
 80018e6:	46b9      	mov	r9, r7
 80018e8:	46b0      	mov	r8, r6
 80018ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80018ec:	2800      	cmp	r0, #0
 80018ee:	d1f9      	bne.n	80018e4 <__ledf2+0x74>
 80018f0:	2001      	movs	r0, #1
 80018f2:	4240      	negs	r0, r0
 80018f4:	e7f6      	b.n	80018e4 <__ledf2+0x74>
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d1ec      	bne.n	80018d4 <__ledf2+0x64>
 80018fa:	464c      	mov	r4, r9
 80018fc:	4326      	orrs	r6, r4
 80018fe:	d1e9      	bne.n	80018d4 <__ledf2+0x64>
 8001900:	e7ea      	b.n	80018d8 <__ledf2+0x68>
 8001902:	429a      	cmp	r2, r3
 8001904:	dd04      	ble.n	8001910 <__ledf2+0xa0>
 8001906:	4243      	negs	r3, r0
 8001908:	4158      	adcs	r0, r3
 800190a:	0040      	lsls	r0, r0, #1
 800190c:	3801      	subs	r0, #1
 800190e:	e7e9      	b.n	80018e4 <__ledf2+0x74>
 8001910:	429a      	cmp	r2, r3
 8001912:	dbeb      	blt.n	80018ec <__ledf2+0x7c>
 8001914:	454f      	cmp	r7, r9
 8001916:	d8df      	bhi.n	80018d8 <__ledf2+0x68>
 8001918:	d006      	beq.n	8001928 <__ledf2+0xb8>
 800191a:	2000      	movs	r0, #0
 800191c:	454f      	cmp	r7, r9
 800191e:	d2e1      	bcs.n	80018e4 <__ledf2+0x74>
 8001920:	2900      	cmp	r1, #0
 8001922:	d0e5      	beq.n	80018f0 <__ledf2+0x80>
 8001924:	0008      	movs	r0, r1
 8001926:	e7dd      	b.n	80018e4 <__ledf2+0x74>
 8001928:	45c4      	cmp	ip, r8
 800192a:	d8d5      	bhi.n	80018d8 <__ledf2+0x68>
 800192c:	2000      	movs	r0, #0
 800192e:	45c4      	cmp	ip, r8
 8001930:	d2d8      	bcs.n	80018e4 <__ledf2+0x74>
 8001932:	e7f5      	b.n	8001920 <__ledf2+0xb0>
 8001934:	000007ff 	.word	0x000007ff

08001938 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b084      	sub	sp, #16
 800193c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800193e:	4b17      	ldr	r3, [pc, #92]	; (800199c <MX_GPIO_Init+0x64>)
 8001940:	695a      	ldr	r2, [r3, #20]
 8001942:	4b16      	ldr	r3, [pc, #88]	; (800199c <MX_GPIO_Init+0x64>)
 8001944:	2180      	movs	r1, #128	; 0x80
 8001946:	03c9      	lsls	r1, r1, #15
 8001948:	430a      	orrs	r2, r1
 800194a:	615a      	str	r2, [r3, #20]
 800194c:	4b13      	ldr	r3, [pc, #76]	; (800199c <MX_GPIO_Init+0x64>)
 800194e:	695a      	ldr	r2, [r3, #20]
 8001950:	2380      	movs	r3, #128	; 0x80
 8001952:	03db      	lsls	r3, r3, #15
 8001954:	4013      	ands	r3, r2
 8001956:	60fb      	str	r3, [r7, #12]
 8001958:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800195a:	4b10      	ldr	r3, [pc, #64]	; (800199c <MX_GPIO_Init+0x64>)
 800195c:	695a      	ldr	r2, [r3, #20]
 800195e:	4b0f      	ldr	r3, [pc, #60]	; (800199c <MX_GPIO_Init+0x64>)
 8001960:	2180      	movs	r1, #128	; 0x80
 8001962:	0289      	lsls	r1, r1, #10
 8001964:	430a      	orrs	r2, r1
 8001966:	615a      	str	r2, [r3, #20]
 8001968:	4b0c      	ldr	r3, [pc, #48]	; (800199c <MX_GPIO_Init+0x64>)
 800196a:	695a      	ldr	r2, [r3, #20]
 800196c:	2380      	movs	r3, #128	; 0x80
 800196e:	029b      	lsls	r3, r3, #10
 8001970:	4013      	ands	r3, r2
 8001972:	60bb      	str	r3, [r7, #8]
 8001974:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001976:	4b09      	ldr	r3, [pc, #36]	; (800199c <MX_GPIO_Init+0x64>)
 8001978:	695a      	ldr	r2, [r3, #20]
 800197a:	4b08      	ldr	r3, [pc, #32]	; (800199c <MX_GPIO_Init+0x64>)
 800197c:	2180      	movs	r1, #128	; 0x80
 800197e:	02c9      	lsls	r1, r1, #11
 8001980:	430a      	orrs	r2, r1
 8001982:	615a      	str	r2, [r3, #20]
 8001984:	4b05      	ldr	r3, [pc, #20]	; (800199c <MX_GPIO_Init+0x64>)
 8001986:	695a      	ldr	r2, [r3, #20]
 8001988:	2380      	movs	r3, #128	; 0x80
 800198a:	02db      	lsls	r3, r3, #11
 800198c:	4013      	ands	r3, r2
 800198e:	607b      	str	r3, [r7, #4]
 8001990:	687b      	ldr	r3, [r7, #4]

}
 8001992:	46c0      	nop			; (mov r8, r8)
 8001994:	46bd      	mov	sp, r7
 8001996:	b004      	add	sp, #16
 8001998:	bd80      	pop	{r7, pc}
 800199a:	46c0      	nop			; (mov r8, r8)
 800199c:	40021000 	.word	0x40021000

080019a0 <computeProportionForwardDrive>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

uint8_t computeProportionForwardDrive(int8_t in){
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b082      	sub	sp, #8
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	0002      	movs	r2, r0
 80019a8:	1dfb      	adds	r3, r7, #7
 80019aa:	701a      	strb	r2, [r3, #0]
	return (((float)in*(0.5)) + 150.0);
 80019ac:	1dfb      	adds	r3, r7, #7
 80019ae:	781b      	ldrb	r3, [r3, #0]
 80019b0:	b25b      	sxtb	r3, r3
 80019b2:	0018      	movs	r0, r3
 80019b4:	f7fe fc52 	bl	800025c <__aeabi_i2f>
 80019b8:	1c03      	adds	r3, r0, #0
 80019ba:	1c18      	adds	r0, r3, #0
 80019bc:	f7ff fe0c 	bl	80015d8 <__aeabi_f2d>
 80019c0:	2200      	movs	r2, #0
 80019c2:	4b0b      	ldr	r3, [pc, #44]	; (80019f0 <computeProportionForwardDrive+0x50>)
 80019c4:	f7fe ffd4 	bl	8000970 <__aeabi_dmul>
 80019c8:	0002      	movs	r2, r0
 80019ca:	000b      	movs	r3, r1
 80019cc:	0010      	movs	r0, r2
 80019ce:	0019      	movs	r1, r3
 80019d0:	2200      	movs	r2, #0
 80019d2:	4b08      	ldr	r3, [pc, #32]	; (80019f4 <computeProportionForwardDrive+0x54>)
 80019d4:	f7fe fc90 	bl	80002f8 <__aeabi_dadd>
 80019d8:	0002      	movs	r2, r0
 80019da:	000b      	movs	r3, r1
 80019dc:	0010      	movs	r0, r2
 80019de:	0019      	movs	r1, r3
 80019e0:	f7fe fc1e 	bl	8000220 <__aeabi_d2uiz>
 80019e4:	0003      	movs	r3, r0
 80019e6:	b2db      	uxtb	r3, r3
}
 80019e8:	0018      	movs	r0, r3
 80019ea:	46bd      	mov	sp, r7
 80019ec:	b002      	add	sp, #8
 80019ee:	bd80      	pop	{r7, pc}
 80019f0:	3fe00000 	.word	0x3fe00000
 80019f4:	4062c000 	.word	0x4062c000

080019f8 <computeProportionBackwardDrive>:

uint8_t computeProportionBackwardDrive(int8_t in){
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b082      	sub	sp, #8
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	0002      	movs	r2, r0
 8001a00:	1dfb      	adds	r3, r7, #7
 8001a02:	701a      	strb	r2, [r3, #0]
	return (((float)in*(0.5)) + 150.0);
 8001a04:	1dfb      	adds	r3, r7, #7
 8001a06:	781b      	ldrb	r3, [r3, #0]
 8001a08:	b25b      	sxtb	r3, r3
 8001a0a:	0018      	movs	r0, r3
 8001a0c:	f7fe fc26 	bl	800025c <__aeabi_i2f>
 8001a10:	1c03      	adds	r3, r0, #0
 8001a12:	1c18      	adds	r0, r3, #0
 8001a14:	f7ff fde0 	bl	80015d8 <__aeabi_f2d>
 8001a18:	2200      	movs	r2, #0
 8001a1a:	4b0b      	ldr	r3, [pc, #44]	; (8001a48 <computeProportionBackwardDrive+0x50>)
 8001a1c:	f7fe ffa8 	bl	8000970 <__aeabi_dmul>
 8001a20:	0002      	movs	r2, r0
 8001a22:	000b      	movs	r3, r1
 8001a24:	0010      	movs	r0, r2
 8001a26:	0019      	movs	r1, r3
 8001a28:	2200      	movs	r2, #0
 8001a2a:	4b08      	ldr	r3, [pc, #32]	; (8001a4c <computeProportionBackwardDrive+0x54>)
 8001a2c:	f7fe fc64 	bl	80002f8 <__aeabi_dadd>
 8001a30:	0002      	movs	r2, r0
 8001a32:	000b      	movs	r3, r1
 8001a34:	0010      	movs	r0, r2
 8001a36:	0019      	movs	r1, r3
 8001a38:	f7fe fbf2 	bl	8000220 <__aeabi_d2uiz>
 8001a3c:	0003      	movs	r3, r0
 8001a3e:	b2db      	uxtb	r3, r3
}
 8001a40:	0018      	movs	r0, r3
 8001a42:	46bd      	mov	sp, r7
 8001a44:	b002      	add	sp, #8
 8001a46:	bd80      	pop	{r7, pc}
 8001a48:	3fe00000 	.word	0x3fe00000
 8001a4c:	4062c000 	.word	0x4062c000

08001a50 <computeLeftServo>:

uint8_t computeLeftServo(int8_t in){
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b082      	sub	sp, #8
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	0002      	movs	r2, r0
 8001a58:	1dfb      	adds	r3, r7, #7
 8001a5a:	701a      	strb	r2, [r3, #0]
	if(in == 0){
 8001a5c:	1dfb      	adds	r3, r7, #7
 8001a5e:	781b      	ldrb	r3, [r3, #0]
 8001a60:	b25b      	sxtb	r3, r3
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d101      	bne.n	8001a6a <computeLeftServo+0x1a>
		return 150;
 8001a66:	2396      	movs	r3, #150	; 0x96
 8001a68:	e01d      	b.n	8001aa6 <computeLeftServo+0x56>
	}
	return (((float)in*(-0.7)) + 150);
 8001a6a:	1dfb      	adds	r3, r7, #7
 8001a6c:	781b      	ldrb	r3, [r3, #0]
 8001a6e:	b25b      	sxtb	r3, r3
 8001a70:	0018      	movs	r0, r3
 8001a72:	f7fe fbf3 	bl	800025c <__aeabi_i2f>
 8001a76:	1c03      	adds	r3, r0, #0
 8001a78:	1c18      	adds	r0, r3, #0
 8001a7a:	f7ff fdad 	bl	80015d8 <__aeabi_f2d>
 8001a7e:	4a0c      	ldr	r2, [pc, #48]	; (8001ab0 <computeLeftServo+0x60>)
 8001a80:	4b0c      	ldr	r3, [pc, #48]	; (8001ab4 <computeLeftServo+0x64>)
 8001a82:	f7fe ff75 	bl	8000970 <__aeabi_dmul>
 8001a86:	0002      	movs	r2, r0
 8001a88:	000b      	movs	r3, r1
 8001a8a:	0010      	movs	r0, r2
 8001a8c:	0019      	movs	r1, r3
 8001a8e:	2200      	movs	r2, #0
 8001a90:	4b09      	ldr	r3, [pc, #36]	; (8001ab8 <computeLeftServo+0x68>)
 8001a92:	f7fe fc31 	bl	80002f8 <__aeabi_dadd>
 8001a96:	0002      	movs	r2, r0
 8001a98:	000b      	movs	r3, r1
 8001a9a:	0010      	movs	r0, r2
 8001a9c:	0019      	movs	r1, r3
 8001a9e:	f7fe fbbf 	bl	8000220 <__aeabi_d2uiz>
 8001aa2:	0003      	movs	r3, r0
 8001aa4:	b2db      	uxtb	r3, r3
}
 8001aa6:	0018      	movs	r0, r3
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	b002      	add	sp, #8
 8001aac:	bd80      	pop	{r7, pc}
 8001aae:	46c0      	nop			; (mov r8, r8)
 8001ab0:	66666666 	.word	0x66666666
 8001ab4:	bfe66666 	.word	0xbfe66666
 8001ab8:	4062c000 	.word	0x4062c000

08001abc <computeRightServo>:

uint8_t computeRightServo(int8_t in){
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b082      	sub	sp, #8
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	0002      	movs	r2, r0
 8001ac4:	1dfb      	adds	r3, r7, #7
 8001ac6:	701a      	strb	r2, [r3, #0]

	if(in == 0){
 8001ac8:	1dfb      	adds	r3, r7, #7
 8001aca:	781b      	ldrb	r3, [r3, #0]
 8001acc:	b25b      	sxtb	r3, r3
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d101      	bne.n	8001ad6 <computeRightServo+0x1a>
		return 150;
 8001ad2:	2396      	movs	r3, #150	; 0x96
 8001ad4:	e01d      	b.n	8001b12 <computeRightServo+0x56>
	}

	return (((float)in*(-0.65)) + 150);
 8001ad6:	1dfb      	adds	r3, r7, #7
 8001ad8:	781b      	ldrb	r3, [r3, #0]
 8001ada:	b25b      	sxtb	r3, r3
 8001adc:	0018      	movs	r0, r3
 8001ade:	f7fe fbbd 	bl	800025c <__aeabi_i2f>
 8001ae2:	1c03      	adds	r3, r0, #0
 8001ae4:	1c18      	adds	r0, r3, #0
 8001ae6:	f7ff fd77 	bl	80015d8 <__aeabi_f2d>
 8001aea:	4a0c      	ldr	r2, [pc, #48]	; (8001b1c <computeRightServo+0x60>)
 8001aec:	4b0c      	ldr	r3, [pc, #48]	; (8001b20 <computeRightServo+0x64>)
 8001aee:	f7fe ff3f 	bl	8000970 <__aeabi_dmul>
 8001af2:	0002      	movs	r2, r0
 8001af4:	000b      	movs	r3, r1
 8001af6:	0010      	movs	r0, r2
 8001af8:	0019      	movs	r1, r3
 8001afa:	2200      	movs	r2, #0
 8001afc:	4b09      	ldr	r3, [pc, #36]	; (8001b24 <computeRightServo+0x68>)
 8001afe:	f7fe fbfb 	bl	80002f8 <__aeabi_dadd>
 8001b02:	0002      	movs	r2, r0
 8001b04:	000b      	movs	r3, r1
 8001b06:	0010      	movs	r0, r2
 8001b08:	0019      	movs	r1, r3
 8001b0a:	f7fe fb89 	bl	8000220 <__aeabi_d2uiz>
 8001b0e:	0003      	movs	r3, r0
 8001b10:	b2db      	uxtb	r3, r3
}
 8001b12:	0018      	movs	r0, r3
 8001b14:	46bd      	mov	sp, r7
 8001b16:	b002      	add	sp, #8
 8001b18:	bd80      	pop	{r7, pc}
 8001b1a:	46c0      	nop			; (mov r8, r8)
 8001b1c:	cccccccd 	.word	0xcccccccd
 8001b20:	bfe4cccc 	.word	0xbfe4cccc
 8001b24:	4062c000 	.word	0x4062c000

08001b28 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001b2c:	f000 ff10 	bl	8002950 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b30:	f000 fa40 	bl	8001fb4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b34:	f7ff ff00 	bl	8001938 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001b38:	f000 fdfe 	bl	8002738 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8001b3c:	f000 fdcc 	bl	80026d8 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 8001b40:	f000 fb48 	bl	80021d4 <MX_TIM1_Init>
  MX_TIM3_Init();
 8001b44:	f000 fc40 	bl	80023c8 <MX_TIM3_Init>



*/

  HAL_UART_Receive_IT(&huart1, &RxBuff, 1);
 8001b48:	49ce      	ldr	r1, [pc, #824]	; (8001e84 <main+0x35c>)
 8001b4a:	4bcf      	ldr	r3, [pc, #828]	; (8001e88 <main+0x360>)
 8001b4c:	2201      	movs	r2, #1
 8001b4e:	0018      	movs	r0, r3
 8001b50:	f002 ff20 	bl	8004994 <HAL_UART_Receive_IT>

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1); // SERWO P1 | PA8
 8001b54:	4bcd      	ldr	r3, [pc, #820]	; (8001e8c <main+0x364>)
 8001b56:	2100      	movs	r1, #0
 8001b58:	0018      	movs	r0, r3
 8001b5a:	f002 f8b7 	bl	8003ccc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2); // SERWO L1 | PA9
 8001b5e:	4bcb      	ldr	r3, [pc, #812]	; (8001e8c <main+0x364>)
 8001b60:	2104      	movs	r1, #4
 8001b62:	0018      	movs	r0, r3
 8001b64:	f002 f8b2 	bl	8003ccc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3); // SERWO P2 | PA10
 8001b68:	4bc8      	ldr	r3, [pc, #800]	; (8001e8c <main+0x364>)
 8001b6a:	2108      	movs	r1, #8
 8001b6c:	0018      	movs	r0, r3
 8001b6e:	f002 f8ad 	bl	8003ccc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4); // SERWO L2 | PA11
 8001b72:	4bc6      	ldr	r3, [pc, #792]	; (8001e8c <main+0x364>)
 8001b74:	210c      	movs	r1, #12
 8001b76:	0018      	movs	r0, r3
 8001b78:	f002 f8a8 	bl	8003ccc <HAL_TIM_PWM_Start>

  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1); // SERWO P3 | PB4
 8001b7c:	4bc4      	ldr	r3, [pc, #784]	; (8001e90 <main+0x368>)
 8001b7e:	2100      	movs	r1, #0
 8001b80:	0018      	movs	r0, r3
 8001b82:	f002 f8a3 	bl	8003ccc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2); // SERWO L3 | PA7
 8001b86:	4bc2      	ldr	r3, [pc, #776]	; (8001e90 <main+0x368>)
 8001b88:	2104      	movs	r1, #4
 8001b8a:	0018      	movs	r0, r3
 8001b8c:	f002 f89e 	bl	8003ccc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4); // POLOLU | PB1
 8001b90:	4bbf      	ldr	r3, [pc, #764]	; (8001e90 <main+0x368>)
 8001b92:	210c      	movs	r1, #12
 8001b94:	0018      	movs	r0, r3
 8001b96:	f002 f899 	bl	8003ccc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3); // POLOLU | PB0
 8001b9a:	4bbd      	ldr	r3, [pc, #756]	; (8001e90 <main+0x368>)
 8001b9c:	2108      	movs	r1, #8
 8001b9e:	0018      	movs	r0, r3
 8001ba0:	f002 f894 	bl	8003ccc <HAL_TIM_PWM_Start>

 // Ustawienie serw oraz kol w poczatkowa pozycje
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 150);
 8001ba4:	4bb9      	ldr	r3, [pc, #740]	; (8001e8c <main+0x364>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	2296      	movs	r2, #150	; 0x96
 8001baa:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 150);
 8001bac:	4bb7      	ldr	r3, [pc, #732]	; (8001e8c <main+0x364>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	2296      	movs	r2, #150	; 0x96
 8001bb2:	639a      	str	r2, [r3, #56]	; 0x38
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 150);
 8001bb4:	4bb5      	ldr	r3, [pc, #724]	; (8001e8c <main+0x364>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	2296      	movs	r2, #150	; 0x96
 8001bba:	63da      	str	r2, [r3, #60]	; 0x3c
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 150);
 8001bbc:	4bb3      	ldr	r3, [pc, #716]	; (8001e8c <main+0x364>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	2296      	movs	r2, #150	; 0x96
 8001bc2:	641a      	str	r2, [r3, #64]	; 0x40

  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 150);
 8001bc4:	4bb2      	ldr	r3, [pc, #712]	; (8001e90 <main+0x368>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	2296      	movs	r2, #150	; 0x96
 8001bca:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 150);
 8001bcc:	4bb0      	ldr	r3, [pc, #704]	; (8001e90 <main+0x368>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	2296      	movs	r2, #150	; 0x96
 8001bd2:	639a      	str	r2, [r3, #56]	; 0x38

  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, 150);
 8001bd4:	4bae      	ldr	r3, [pc, #696]	; (8001e90 <main+0x368>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	2296      	movs	r2, #150	; 0x96
 8001bda:	641a      	str	r2, [r3, #64]	; 0x40
  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 150);
 8001bdc:	4bac      	ldr	r3, [pc, #688]	; (8001e90 <main+0x368>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	2296      	movs	r2, #150	; 0x96
 8001be2:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  if(finalframeready == 1){
 8001be4:	4bab      	ldr	r3, [pc, #684]	; (8001e94 <main+0x36c>)
 8001be6:	781b      	ldrb	r3, [r3, #0]
 8001be8:	2b01      	cmp	r3, #1
 8001bea:	d1fb      	bne.n	8001be4 <main+0xbc>

		  // ###### FRONT LEFT STEER ######
		  if(FinalBuffer[1] > 0 && FinalBuffer[1] <= 100){ // RIGHT
 8001bec:	4baa      	ldr	r3, [pc, #680]	; (8001e98 <main+0x370>)
 8001bee:	785b      	ldrb	r3, [r3, #1]
 8001bf0:	b25b      	sxtb	r3, r3
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	dd14      	ble.n	8001c20 <main+0xf8>
 8001bf6:	4ba8      	ldr	r3, [pc, #672]	; (8001e98 <main+0x370>)
 8001bf8:	785b      	ldrb	r3, [r3, #1]
 8001bfa:	b25b      	sxtb	r3, r3
 8001bfc:	2b64      	cmp	r3, #100	; 0x64
 8001bfe:	dc0f      	bgt.n	8001c20 <main+0xf8>
			  Values[0] = computeRightServo(FinalBuffer[1]);
 8001c00:	4ba5      	ldr	r3, [pc, #660]	; (8001e98 <main+0x370>)
 8001c02:	785b      	ldrb	r3, [r3, #1]
 8001c04:	b25b      	sxtb	r3, r3
 8001c06:	0018      	movs	r0, r3
 8001c08:	f7ff ff58 	bl	8001abc <computeRightServo>
 8001c0c:	0003      	movs	r3, r0
 8001c0e:	001a      	movs	r2, r3
 8001c10:	4ba2      	ldr	r3, [pc, #648]	; (8001e9c <main+0x374>)
 8001c12:	701a      	strb	r2, [r3, #0]
			  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, Values[0]);
 8001c14:	4ba1      	ldr	r3, [pc, #644]	; (8001e9c <main+0x374>)
 8001c16:	781a      	ldrb	r2, [r3, #0]
 8001c18:	4b9c      	ldr	r3, [pc, #624]	; (8001e8c <main+0x364>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	639a      	str	r2, [r3, #56]	; 0x38
 8001c1e:	e01d      	b.n	8001c5c <main+0x134>
		  } else if(FinalBuffer[1] >= -100 && FinalBuffer[1] < 0){ // LEFT
 8001c20:	4b9d      	ldr	r3, [pc, #628]	; (8001e98 <main+0x370>)
 8001c22:	785b      	ldrb	r3, [r3, #1]
 8001c24:	b25b      	sxtb	r3, r3
 8001c26:	3364      	adds	r3, #100	; 0x64
 8001c28:	db14      	blt.n	8001c54 <main+0x12c>
 8001c2a:	4b9b      	ldr	r3, [pc, #620]	; (8001e98 <main+0x370>)
 8001c2c:	785b      	ldrb	r3, [r3, #1]
 8001c2e:	b25b      	sxtb	r3, r3
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	da0f      	bge.n	8001c54 <main+0x12c>
			  Values[0] = computeLeftServo(FinalBuffer[1]);
 8001c34:	4b98      	ldr	r3, [pc, #608]	; (8001e98 <main+0x370>)
 8001c36:	785b      	ldrb	r3, [r3, #1]
 8001c38:	b25b      	sxtb	r3, r3
 8001c3a:	0018      	movs	r0, r3
 8001c3c:	f7ff ff08 	bl	8001a50 <computeLeftServo>
 8001c40:	0003      	movs	r3, r0
 8001c42:	001a      	movs	r2, r3
 8001c44:	4b95      	ldr	r3, [pc, #596]	; (8001e9c <main+0x374>)
 8001c46:	701a      	strb	r2, [r3, #0]
			  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, Values[0]);
 8001c48:	4b94      	ldr	r3, [pc, #592]	; (8001e9c <main+0x374>)
 8001c4a:	781a      	ldrb	r2, [r3, #0]
 8001c4c:	4b8f      	ldr	r3, [pc, #572]	; (8001e8c <main+0x364>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	639a      	str	r2, [r3, #56]	; 0x38
 8001c52:	e003      	b.n	8001c5c <main+0x134>
		  } else { // NEUTRAL
			  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 150);
 8001c54:	4b8d      	ldr	r3, [pc, #564]	; (8001e8c <main+0x364>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	2296      	movs	r2, #150	; 0x96
 8001c5a:	639a      	str	r2, [r3, #56]	; 0x38
		  }


		  // ###### FRONT RIGHT STEER ######
		  if(FinalBuffer[3] > 0 && FinalBuffer[3] <= 100){ // RIGHT
 8001c5c:	4b8e      	ldr	r3, [pc, #568]	; (8001e98 <main+0x370>)
 8001c5e:	78db      	ldrb	r3, [r3, #3]
 8001c60:	b25b      	sxtb	r3, r3
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	dd14      	ble.n	8001c90 <main+0x168>
 8001c66:	4b8c      	ldr	r3, [pc, #560]	; (8001e98 <main+0x370>)
 8001c68:	78db      	ldrb	r3, [r3, #3]
 8001c6a:	b25b      	sxtb	r3, r3
 8001c6c:	2b64      	cmp	r3, #100	; 0x64
 8001c6e:	dc0f      	bgt.n	8001c90 <main+0x168>
			  Values[1] = computeRightServo(FinalBuffer[3]);
 8001c70:	4b89      	ldr	r3, [pc, #548]	; (8001e98 <main+0x370>)
 8001c72:	78db      	ldrb	r3, [r3, #3]
 8001c74:	b25b      	sxtb	r3, r3
 8001c76:	0018      	movs	r0, r3
 8001c78:	f7ff ff20 	bl	8001abc <computeRightServo>
 8001c7c:	0003      	movs	r3, r0
 8001c7e:	001a      	movs	r2, r3
 8001c80:	4b86      	ldr	r3, [pc, #536]	; (8001e9c <main+0x374>)
 8001c82:	705a      	strb	r2, [r3, #1]
			  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, Values[1]);
 8001c84:	4b85      	ldr	r3, [pc, #532]	; (8001e9c <main+0x374>)
 8001c86:	785a      	ldrb	r2, [r3, #1]
 8001c88:	4b80      	ldr	r3, [pc, #512]	; (8001e8c <main+0x364>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	635a      	str	r2, [r3, #52]	; 0x34
 8001c8e:	e01d      	b.n	8001ccc <main+0x1a4>
		  } else if(FinalBuffer[3] >= -100 && FinalBuffer[3] < 0){ // LEFT
 8001c90:	4b81      	ldr	r3, [pc, #516]	; (8001e98 <main+0x370>)
 8001c92:	78db      	ldrb	r3, [r3, #3]
 8001c94:	b25b      	sxtb	r3, r3
 8001c96:	3364      	adds	r3, #100	; 0x64
 8001c98:	db14      	blt.n	8001cc4 <main+0x19c>
 8001c9a:	4b7f      	ldr	r3, [pc, #508]	; (8001e98 <main+0x370>)
 8001c9c:	78db      	ldrb	r3, [r3, #3]
 8001c9e:	b25b      	sxtb	r3, r3
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	da0f      	bge.n	8001cc4 <main+0x19c>
			  Values[1] = computeLeftServo(FinalBuffer[3]);
 8001ca4:	4b7c      	ldr	r3, [pc, #496]	; (8001e98 <main+0x370>)
 8001ca6:	78db      	ldrb	r3, [r3, #3]
 8001ca8:	b25b      	sxtb	r3, r3
 8001caa:	0018      	movs	r0, r3
 8001cac:	f7ff fed0 	bl	8001a50 <computeLeftServo>
 8001cb0:	0003      	movs	r3, r0
 8001cb2:	001a      	movs	r2, r3
 8001cb4:	4b79      	ldr	r3, [pc, #484]	; (8001e9c <main+0x374>)
 8001cb6:	705a      	strb	r2, [r3, #1]
			  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, Values[1]);
 8001cb8:	4b78      	ldr	r3, [pc, #480]	; (8001e9c <main+0x374>)
 8001cba:	785a      	ldrb	r2, [r3, #1]
 8001cbc:	4b73      	ldr	r3, [pc, #460]	; (8001e8c <main+0x364>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	635a      	str	r2, [r3, #52]	; 0x34
 8001cc2:	e003      	b.n	8001ccc <main+0x1a4>
		  } else { // NEUTRAL
			  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 150);
 8001cc4:	4b71      	ldr	r3, [pc, #452]	; (8001e8c <main+0x364>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	2296      	movs	r2, #150	; 0x96
 8001cca:	635a      	str	r2, [r3, #52]	; 0x34
		  }

		  // ###### MID LEFT STEER ######
		  if(FinalBuffer[5] > 0 && FinalBuffer[5] <= 100){ // RIGHT
 8001ccc:	4b72      	ldr	r3, [pc, #456]	; (8001e98 <main+0x370>)
 8001cce:	795b      	ldrb	r3, [r3, #5]
 8001cd0:	b25b      	sxtb	r3, r3
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	dd14      	ble.n	8001d00 <main+0x1d8>
 8001cd6:	4b70      	ldr	r3, [pc, #448]	; (8001e98 <main+0x370>)
 8001cd8:	795b      	ldrb	r3, [r3, #5]
 8001cda:	b25b      	sxtb	r3, r3
 8001cdc:	2b64      	cmp	r3, #100	; 0x64
 8001cde:	dc0f      	bgt.n	8001d00 <main+0x1d8>
			  Values[2] = computeRightServo(FinalBuffer[5]);
 8001ce0:	4b6d      	ldr	r3, [pc, #436]	; (8001e98 <main+0x370>)
 8001ce2:	795b      	ldrb	r3, [r3, #5]
 8001ce4:	b25b      	sxtb	r3, r3
 8001ce6:	0018      	movs	r0, r3
 8001ce8:	f7ff fee8 	bl	8001abc <computeRightServo>
 8001cec:	0003      	movs	r3, r0
 8001cee:	001a      	movs	r2, r3
 8001cf0:	4b6a      	ldr	r3, [pc, #424]	; (8001e9c <main+0x374>)
 8001cf2:	709a      	strb	r2, [r3, #2]
			  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, Values[2]);
 8001cf4:	4b69      	ldr	r3, [pc, #420]	; (8001e9c <main+0x374>)
 8001cf6:	789a      	ldrb	r2, [r3, #2]
 8001cf8:	4b64      	ldr	r3, [pc, #400]	; (8001e8c <main+0x364>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	641a      	str	r2, [r3, #64]	; 0x40
 8001cfe:	e01d      	b.n	8001d3c <main+0x214>
		  } else if(FinalBuffer[5] >= -100 && FinalBuffer[5] < 0){ // LEFT
 8001d00:	4b65      	ldr	r3, [pc, #404]	; (8001e98 <main+0x370>)
 8001d02:	795b      	ldrb	r3, [r3, #5]
 8001d04:	b25b      	sxtb	r3, r3
 8001d06:	3364      	adds	r3, #100	; 0x64
 8001d08:	db14      	blt.n	8001d34 <main+0x20c>
 8001d0a:	4b63      	ldr	r3, [pc, #396]	; (8001e98 <main+0x370>)
 8001d0c:	795b      	ldrb	r3, [r3, #5]
 8001d0e:	b25b      	sxtb	r3, r3
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	da0f      	bge.n	8001d34 <main+0x20c>
			  Values[2] = computeLeftServo(FinalBuffer[5]);
 8001d14:	4b60      	ldr	r3, [pc, #384]	; (8001e98 <main+0x370>)
 8001d16:	795b      	ldrb	r3, [r3, #5]
 8001d18:	b25b      	sxtb	r3, r3
 8001d1a:	0018      	movs	r0, r3
 8001d1c:	f7ff fe98 	bl	8001a50 <computeLeftServo>
 8001d20:	0003      	movs	r3, r0
 8001d22:	001a      	movs	r2, r3
 8001d24:	4b5d      	ldr	r3, [pc, #372]	; (8001e9c <main+0x374>)
 8001d26:	709a      	strb	r2, [r3, #2]
			  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, Values[2]);
 8001d28:	4b5c      	ldr	r3, [pc, #368]	; (8001e9c <main+0x374>)
 8001d2a:	789a      	ldrb	r2, [r3, #2]
 8001d2c:	4b57      	ldr	r3, [pc, #348]	; (8001e8c <main+0x364>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	641a      	str	r2, [r3, #64]	; 0x40
 8001d32:	e003      	b.n	8001d3c <main+0x214>
		  } else { // NEUTRAL
			  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 150);
 8001d34:	4b55      	ldr	r3, [pc, #340]	; (8001e8c <main+0x364>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	2296      	movs	r2, #150	; 0x96
 8001d3a:	641a      	str	r2, [r3, #64]	; 0x40
		  }

		  // ###### MID RIGHT STEER ######
		  if(FinalBuffer[7] > 0 && FinalBuffer[7] <= 100){ // RIGHT
 8001d3c:	4b56      	ldr	r3, [pc, #344]	; (8001e98 <main+0x370>)
 8001d3e:	79db      	ldrb	r3, [r3, #7]
 8001d40:	b25b      	sxtb	r3, r3
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	dd14      	ble.n	8001d70 <main+0x248>
 8001d46:	4b54      	ldr	r3, [pc, #336]	; (8001e98 <main+0x370>)
 8001d48:	79db      	ldrb	r3, [r3, #7]
 8001d4a:	b25b      	sxtb	r3, r3
 8001d4c:	2b64      	cmp	r3, #100	; 0x64
 8001d4e:	dc0f      	bgt.n	8001d70 <main+0x248>
			  Values[3] = computeRightServo(FinalBuffer[7]);
 8001d50:	4b51      	ldr	r3, [pc, #324]	; (8001e98 <main+0x370>)
 8001d52:	79db      	ldrb	r3, [r3, #7]
 8001d54:	b25b      	sxtb	r3, r3
 8001d56:	0018      	movs	r0, r3
 8001d58:	f7ff feb0 	bl	8001abc <computeRightServo>
 8001d5c:	0003      	movs	r3, r0
 8001d5e:	001a      	movs	r2, r3
 8001d60:	4b4e      	ldr	r3, [pc, #312]	; (8001e9c <main+0x374>)
 8001d62:	70da      	strb	r2, [r3, #3]
			  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, Values[3]);
 8001d64:	4b4d      	ldr	r3, [pc, #308]	; (8001e9c <main+0x374>)
 8001d66:	78da      	ldrb	r2, [r3, #3]
 8001d68:	4b48      	ldr	r3, [pc, #288]	; (8001e8c <main+0x364>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	63da      	str	r2, [r3, #60]	; 0x3c
 8001d6e:	e01d      	b.n	8001dac <main+0x284>
		  } else if(FinalBuffer[7] >= -100 && FinalBuffer[7] < 0){ // LEFT
 8001d70:	4b49      	ldr	r3, [pc, #292]	; (8001e98 <main+0x370>)
 8001d72:	79db      	ldrb	r3, [r3, #7]
 8001d74:	b25b      	sxtb	r3, r3
 8001d76:	3364      	adds	r3, #100	; 0x64
 8001d78:	db14      	blt.n	8001da4 <main+0x27c>
 8001d7a:	4b47      	ldr	r3, [pc, #284]	; (8001e98 <main+0x370>)
 8001d7c:	79db      	ldrb	r3, [r3, #7]
 8001d7e:	b25b      	sxtb	r3, r3
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	da0f      	bge.n	8001da4 <main+0x27c>
			  Values[3] = computeLeftServo(FinalBuffer[7]);
 8001d84:	4b44      	ldr	r3, [pc, #272]	; (8001e98 <main+0x370>)
 8001d86:	79db      	ldrb	r3, [r3, #7]
 8001d88:	b25b      	sxtb	r3, r3
 8001d8a:	0018      	movs	r0, r3
 8001d8c:	f7ff fe60 	bl	8001a50 <computeLeftServo>
 8001d90:	0003      	movs	r3, r0
 8001d92:	001a      	movs	r2, r3
 8001d94:	4b41      	ldr	r3, [pc, #260]	; (8001e9c <main+0x374>)
 8001d96:	70da      	strb	r2, [r3, #3]
			  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, Values[3]);
 8001d98:	4b40      	ldr	r3, [pc, #256]	; (8001e9c <main+0x374>)
 8001d9a:	78da      	ldrb	r2, [r3, #3]
 8001d9c:	4b3b      	ldr	r3, [pc, #236]	; (8001e8c <main+0x364>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	63da      	str	r2, [r3, #60]	; 0x3c
 8001da2:	e003      	b.n	8001dac <main+0x284>
		  } else { // NEUTRAL
			  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 150);
 8001da4:	4b39      	ldr	r3, [pc, #228]	; (8001e8c <main+0x364>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	2296      	movs	r2, #150	; 0x96
 8001daa:	63da      	str	r2, [r3, #60]	; 0x3c
		  }

		  // ###### REAR LEFT STEER ######
		  if(FinalBuffer[9] > 0 && FinalBuffer[9] <= 100){ // RIGHT
 8001dac:	4b3a      	ldr	r3, [pc, #232]	; (8001e98 <main+0x370>)
 8001dae:	7a5b      	ldrb	r3, [r3, #9]
 8001db0:	b25b      	sxtb	r3, r3
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	dd14      	ble.n	8001de0 <main+0x2b8>
 8001db6:	4b38      	ldr	r3, [pc, #224]	; (8001e98 <main+0x370>)
 8001db8:	7a5b      	ldrb	r3, [r3, #9]
 8001dba:	b25b      	sxtb	r3, r3
 8001dbc:	2b64      	cmp	r3, #100	; 0x64
 8001dbe:	dc0f      	bgt.n	8001de0 <main+0x2b8>
			  Values[4] = computeRightServo(FinalBuffer[9]);
 8001dc0:	4b35      	ldr	r3, [pc, #212]	; (8001e98 <main+0x370>)
 8001dc2:	7a5b      	ldrb	r3, [r3, #9]
 8001dc4:	b25b      	sxtb	r3, r3
 8001dc6:	0018      	movs	r0, r3
 8001dc8:	f7ff fe78 	bl	8001abc <computeRightServo>
 8001dcc:	0003      	movs	r3, r0
 8001dce:	001a      	movs	r2, r3
 8001dd0:	4b32      	ldr	r3, [pc, #200]	; (8001e9c <main+0x374>)
 8001dd2:	711a      	strb	r2, [r3, #4]
			  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, Values[4]);
 8001dd4:	4b31      	ldr	r3, [pc, #196]	; (8001e9c <main+0x374>)
 8001dd6:	791a      	ldrb	r2, [r3, #4]
 8001dd8:	4b2d      	ldr	r3, [pc, #180]	; (8001e90 <main+0x368>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	639a      	str	r2, [r3, #56]	; 0x38
 8001dde:	e01d      	b.n	8001e1c <main+0x2f4>
		  } else if(FinalBuffer[9] >= -100 && FinalBuffer[9] < 0){ // LEFT
 8001de0:	4b2d      	ldr	r3, [pc, #180]	; (8001e98 <main+0x370>)
 8001de2:	7a5b      	ldrb	r3, [r3, #9]
 8001de4:	b25b      	sxtb	r3, r3
 8001de6:	3364      	adds	r3, #100	; 0x64
 8001de8:	db14      	blt.n	8001e14 <main+0x2ec>
 8001dea:	4b2b      	ldr	r3, [pc, #172]	; (8001e98 <main+0x370>)
 8001dec:	7a5b      	ldrb	r3, [r3, #9]
 8001dee:	b25b      	sxtb	r3, r3
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	da0f      	bge.n	8001e14 <main+0x2ec>
			  Values[4] = computeLeftServo(FinalBuffer[9]);
 8001df4:	4b28      	ldr	r3, [pc, #160]	; (8001e98 <main+0x370>)
 8001df6:	7a5b      	ldrb	r3, [r3, #9]
 8001df8:	b25b      	sxtb	r3, r3
 8001dfa:	0018      	movs	r0, r3
 8001dfc:	f7ff fe28 	bl	8001a50 <computeLeftServo>
 8001e00:	0003      	movs	r3, r0
 8001e02:	001a      	movs	r2, r3
 8001e04:	4b25      	ldr	r3, [pc, #148]	; (8001e9c <main+0x374>)
 8001e06:	711a      	strb	r2, [r3, #4]
			  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, Values[4]);
 8001e08:	4b24      	ldr	r3, [pc, #144]	; (8001e9c <main+0x374>)
 8001e0a:	791a      	ldrb	r2, [r3, #4]
 8001e0c:	4b20      	ldr	r3, [pc, #128]	; (8001e90 <main+0x368>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	639a      	str	r2, [r3, #56]	; 0x38
 8001e12:	e003      	b.n	8001e1c <main+0x2f4>
		  } else { // NEUTRAL
			  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 150);
 8001e14:	4b1e      	ldr	r3, [pc, #120]	; (8001e90 <main+0x368>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	2296      	movs	r2, #150	; 0x96
 8001e1a:	639a      	str	r2, [r3, #56]	; 0x38
		  }

		  // ###### REAR RIGHT STEER ######
		  if(FinalBuffer[11] > 0 && FinalBuffer[11] <= 100){ // RIGHT
 8001e1c:	4b1e      	ldr	r3, [pc, #120]	; (8001e98 <main+0x370>)
 8001e1e:	7adb      	ldrb	r3, [r3, #11]
 8001e20:	b25b      	sxtb	r3, r3
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	dd14      	ble.n	8001e50 <main+0x328>
 8001e26:	4b1c      	ldr	r3, [pc, #112]	; (8001e98 <main+0x370>)
 8001e28:	7adb      	ldrb	r3, [r3, #11]
 8001e2a:	b25b      	sxtb	r3, r3
 8001e2c:	2b64      	cmp	r3, #100	; 0x64
 8001e2e:	dc0f      	bgt.n	8001e50 <main+0x328>
			  Values[5] = computeRightServo(FinalBuffer[11]);
 8001e30:	4b19      	ldr	r3, [pc, #100]	; (8001e98 <main+0x370>)
 8001e32:	7adb      	ldrb	r3, [r3, #11]
 8001e34:	b25b      	sxtb	r3, r3
 8001e36:	0018      	movs	r0, r3
 8001e38:	f7ff fe40 	bl	8001abc <computeRightServo>
 8001e3c:	0003      	movs	r3, r0
 8001e3e:	001a      	movs	r2, r3
 8001e40:	4b16      	ldr	r3, [pc, #88]	; (8001e9c <main+0x374>)
 8001e42:	715a      	strb	r2, [r3, #5]
			  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, Values[5]);
 8001e44:	4b15      	ldr	r3, [pc, #84]	; (8001e9c <main+0x374>)
 8001e46:	795a      	ldrb	r2, [r3, #5]
 8001e48:	4b11      	ldr	r3, [pc, #68]	; (8001e90 <main+0x368>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	635a      	str	r2, [r3, #52]	; 0x34
 8001e4e:	e02b      	b.n	8001ea8 <main+0x380>
		  } else if(FinalBuffer[11] >= -100 && FinalBuffer[11] < 0){ // LEFT
 8001e50:	4b11      	ldr	r3, [pc, #68]	; (8001e98 <main+0x370>)
 8001e52:	7adb      	ldrb	r3, [r3, #11]
 8001e54:	b25b      	sxtb	r3, r3
 8001e56:	3364      	adds	r3, #100	; 0x64
 8001e58:	db22      	blt.n	8001ea0 <main+0x378>
 8001e5a:	4b0f      	ldr	r3, [pc, #60]	; (8001e98 <main+0x370>)
 8001e5c:	7adb      	ldrb	r3, [r3, #11]
 8001e5e:	b25b      	sxtb	r3, r3
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	da1d      	bge.n	8001ea0 <main+0x378>
			  Values[5] = computeLeftServo(FinalBuffer[11]);
 8001e64:	4b0c      	ldr	r3, [pc, #48]	; (8001e98 <main+0x370>)
 8001e66:	7adb      	ldrb	r3, [r3, #11]
 8001e68:	b25b      	sxtb	r3, r3
 8001e6a:	0018      	movs	r0, r3
 8001e6c:	f7ff fdf0 	bl	8001a50 <computeLeftServo>
 8001e70:	0003      	movs	r3, r0
 8001e72:	001a      	movs	r2, r3
 8001e74:	4b09      	ldr	r3, [pc, #36]	; (8001e9c <main+0x374>)
 8001e76:	715a      	strb	r2, [r3, #5]
			  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, Values[5]);
 8001e78:	4b08      	ldr	r3, [pc, #32]	; (8001e9c <main+0x374>)
 8001e7a:	795a      	ldrb	r2, [r3, #5]
 8001e7c:	4b04      	ldr	r3, [pc, #16]	; (8001e90 <main+0x368>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	635a      	str	r2, [r3, #52]	; 0x34
 8001e82:	e011      	b.n	8001ea8 <main+0x380>
 8001e84:	20000028 	.word	0x20000028
 8001e88:	200000dc 	.word	0x200000dc
 8001e8c:	2000004c 	.word	0x2000004c
 8001e90:	20000094 	.word	0x20000094
 8001e94:	2000003e 	.word	0x2000003e
 8001e98:	2000002c 	.word	0x2000002c
 8001e9c:	20000040 	.word	0x20000040
		  } else { // NEUTRAL
			  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 150);
 8001ea0:	4b40      	ldr	r3, [pc, #256]	; (8001fa4 <main+0x47c>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	2296      	movs	r2, #150	; 0x96
 8001ea6:	635a      	str	r2, [r3, #52]	; 0x34
		  }

		  if(FinalBuffer[0] > 0 && FinalBuffer[0] <= 100){
 8001ea8:	4b3f      	ldr	r3, [pc, #252]	; (8001fa8 <main+0x480>)
 8001eaa:	781b      	ldrb	r3, [r3, #0]
 8001eac:	b25b      	sxtb	r3, r3
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	dd14      	ble.n	8001edc <main+0x3b4>
 8001eb2:	4b3d      	ldr	r3, [pc, #244]	; (8001fa8 <main+0x480>)
 8001eb4:	781b      	ldrb	r3, [r3, #0]
 8001eb6:	b25b      	sxtb	r3, r3
 8001eb8:	2b64      	cmp	r3, #100	; 0x64
 8001eba:	dc0f      	bgt.n	8001edc <main+0x3b4>
			  Values[6] = computeProportionForwardDrive(FinalBuffer[0]);
 8001ebc:	4b3a      	ldr	r3, [pc, #232]	; (8001fa8 <main+0x480>)
 8001ebe:	781b      	ldrb	r3, [r3, #0]
 8001ec0:	b25b      	sxtb	r3, r3
 8001ec2:	0018      	movs	r0, r3
 8001ec4:	f7ff fd6c 	bl	80019a0 <computeProportionForwardDrive>
 8001ec8:	0003      	movs	r3, r0
 8001eca:	001a      	movs	r2, r3
 8001ecc:	4b37      	ldr	r3, [pc, #220]	; (8001fac <main+0x484>)
 8001ece:	719a      	strb	r2, [r3, #6]
			  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, Values[6]);
 8001ed0:	4b36      	ldr	r3, [pc, #216]	; (8001fac <main+0x484>)
 8001ed2:	799a      	ldrb	r2, [r3, #6]
 8001ed4:	4b33      	ldr	r3, [pc, #204]	; (8001fa4 <main+0x47c>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	641a      	str	r2, [r3, #64]	; 0x40
 8001eda:	e022      	b.n	8001f22 <main+0x3fa>
		  } else if(FinalBuffer[0] >= -100 && FinalBuffer[0] < 0){
 8001edc:	4b32      	ldr	r3, [pc, #200]	; (8001fa8 <main+0x480>)
 8001ede:	781b      	ldrb	r3, [r3, #0]
 8001ee0:	b25b      	sxtb	r3, r3
 8001ee2:	3364      	adds	r3, #100	; 0x64
 8001ee4:	db14      	blt.n	8001f10 <main+0x3e8>
 8001ee6:	4b30      	ldr	r3, [pc, #192]	; (8001fa8 <main+0x480>)
 8001ee8:	781b      	ldrb	r3, [r3, #0]
 8001eea:	b25b      	sxtb	r3, r3
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	da0f      	bge.n	8001f10 <main+0x3e8>
			  Values[7] = computeProportionBackwardDrive(FinalBuffer[0]);
 8001ef0:	4b2d      	ldr	r3, [pc, #180]	; (8001fa8 <main+0x480>)
 8001ef2:	781b      	ldrb	r3, [r3, #0]
 8001ef4:	b25b      	sxtb	r3, r3
 8001ef6:	0018      	movs	r0, r3
 8001ef8:	f7ff fd7e 	bl	80019f8 <computeProportionBackwardDrive>
 8001efc:	0003      	movs	r3, r0
 8001efe:	001a      	movs	r2, r3
 8001f00:	4b2a      	ldr	r3, [pc, #168]	; (8001fac <main+0x484>)
 8001f02:	71da      	strb	r2, [r3, #7]
			 __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, Values[7]);
 8001f04:	4b29      	ldr	r3, [pc, #164]	; (8001fac <main+0x484>)
 8001f06:	79da      	ldrb	r2, [r3, #7]
 8001f08:	4b26      	ldr	r3, [pc, #152]	; (8001fa4 <main+0x47c>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	641a      	str	r2, [r3, #64]	; 0x40
 8001f0e:	e008      	b.n	8001f22 <main+0x3fa>
		  } else if(FinalBuffer[0] == 0){
 8001f10:	4b25      	ldr	r3, [pc, #148]	; (8001fa8 <main+0x480>)
 8001f12:	781b      	ldrb	r3, [r3, #0]
 8001f14:	b25b      	sxtb	r3, r3
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d103      	bne.n	8001f22 <main+0x3fa>
			  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, 150);
 8001f1a:	4b22      	ldr	r3, [pc, #136]	; (8001fa4 <main+0x47c>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	2296      	movs	r2, #150	; 0x96
 8001f20:	641a      	str	r2, [r3, #64]	; 0x40
		  }

		  if(FinalBuffer[2] > 0 && FinalBuffer[2] <= 100){
 8001f22:	4b21      	ldr	r3, [pc, #132]	; (8001fa8 <main+0x480>)
 8001f24:	789b      	ldrb	r3, [r3, #2]
 8001f26:	b25b      	sxtb	r3, r3
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	dd14      	ble.n	8001f56 <main+0x42e>
 8001f2c:	4b1e      	ldr	r3, [pc, #120]	; (8001fa8 <main+0x480>)
 8001f2e:	789b      	ldrb	r3, [r3, #2]
 8001f30:	b25b      	sxtb	r3, r3
 8001f32:	2b64      	cmp	r3, #100	; 0x64
 8001f34:	dc0f      	bgt.n	8001f56 <main+0x42e>
			  Values[8] = computeProportionForwardDrive(FinalBuffer[0]);
 8001f36:	4b1c      	ldr	r3, [pc, #112]	; (8001fa8 <main+0x480>)
 8001f38:	781b      	ldrb	r3, [r3, #0]
 8001f3a:	b25b      	sxtb	r3, r3
 8001f3c:	0018      	movs	r0, r3
 8001f3e:	f7ff fd2f 	bl	80019a0 <computeProportionForwardDrive>
 8001f42:	0003      	movs	r3, r0
 8001f44:	001a      	movs	r2, r3
 8001f46:	4b19      	ldr	r3, [pc, #100]	; (8001fac <main+0x484>)
 8001f48:	721a      	strb	r2, [r3, #8]
			  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, Values[8]);
 8001f4a:	4b18      	ldr	r3, [pc, #96]	; (8001fac <main+0x484>)
 8001f4c:	7a1a      	ldrb	r2, [r3, #8]
 8001f4e:	4b15      	ldr	r3, [pc, #84]	; (8001fa4 <main+0x47c>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	63da      	str	r2, [r3, #60]	; 0x3c
 8001f54:	e022      	b.n	8001f9c <main+0x474>
		  } else if(FinalBuffer[2] >= -100 && FinalBuffer[2] < 0){
 8001f56:	4b14      	ldr	r3, [pc, #80]	; (8001fa8 <main+0x480>)
 8001f58:	789b      	ldrb	r3, [r3, #2]
 8001f5a:	b25b      	sxtb	r3, r3
 8001f5c:	3364      	adds	r3, #100	; 0x64
 8001f5e:	db14      	blt.n	8001f8a <main+0x462>
 8001f60:	4b11      	ldr	r3, [pc, #68]	; (8001fa8 <main+0x480>)
 8001f62:	789b      	ldrb	r3, [r3, #2]
 8001f64:	b25b      	sxtb	r3, r3
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	da0f      	bge.n	8001f8a <main+0x462>
			  Values[9] = computeProportionBackwardDrive(FinalBuffer[0]);
 8001f6a:	4b0f      	ldr	r3, [pc, #60]	; (8001fa8 <main+0x480>)
 8001f6c:	781b      	ldrb	r3, [r3, #0]
 8001f6e:	b25b      	sxtb	r3, r3
 8001f70:	0018      	movs	r0, r3
 8001f72:	f7ff fd41 	bl	80019f8 <computeProportionBackwardDrive>
 8001f76:	0003      	movs	r3, r0
 8001f78:	001a      	movs	r2, r3
 8001f7a:	4b0c      	ldr	r3, [pc, #48]	; (8001fac <main+0x484>)
 8001f7c:	725a      	strb	r2, [r3, #9]
			 __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, Values[9]);
 8001f7e:	4b0b      	ldr	r3, [pc, #44]	; (8001fac <main+0x484>)
 8001f80:	7a5a      	ldrb	r2, [r3, #9]
 8001f82:	4b08      	ldr	r3, [pc, #32]	; (8001fa4 <main+0x47c>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	63da      	str	r2, [r3, #60]	; 0x3c
 8001f88:	e008      	b.n	8001f9c <main+0x474>
		  } else if(FinalBuffer[2] == 0){
 8001f8a:	4b07      	ldr	r3, [pc, #28]	; (8001fa8 <main+0x480>)
 8001f8c:	789b      	ldrb	r3, [r3, #2]
 8001f8e:	b25b      	sxtb	r3, r3
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d103      	bne.n	8001f9c <main+0x474>
			  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 150);
 8001f94:	4b03      	ldr	r3, [pc, #12]	; (8001fa4 <main+0x47c>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	2296      	movs	r2, #150	; 0x96
 8001f9a:	63da      	str	r2, [r3, #60]	; 0x3c
		  }

		  finalframeready = 0;
 8001f9c:	4b04      	ldr	r3, [pc, #16]	; (8001fb0 <main+0x488>)
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	701a      	strb	r2, [r3, #0]
	  if(finalframeready == 1){
 8001fa2:	e61f      	b.n	8001be4 <main+0xbc>
 8001fa4:	20000094 	.word	0x20000094
 8001fa8:	2000002c 	.word	0x2000002c
 8001fac:	20000040 	.word	0x20000040
 8001fb0:	2000003e 	.word	0x2000003e

08001fb4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001fb4:	b590      	push	{r4, r7, lr}
 8001fb6:	b099      	sub	sp, #100	; 0x64
 8001fb8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001fba:	242c      	movs	r4, #44	; 0x2c
 8001fbc:	193b      	adds	r3, r7, r4
 8001fbe:	0018      	movs	r0, r3
 8001fc0:	2334      	movs	r3, #52	; 0x34
 8001fc2:	001a      	movs	r2, r3
 8001fc4:	2100      	movs	r1, #0
 8001fc6:	f003 fe23 	bl	8005c10 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001fca:	231c      	movs	r3, #28
 8001fcc:	18fb      	adds	r3, r7, r3
 8001fce:	0018      	movs	r0, r3
 8001fd0:	2310      	movs	r3, #16
 8001fd2:	001a      	movs	r2, r3
 8001fd4:	2100      	movs	r1, #0
 8001fd6:	f003 fe1b 	bl	8005c10 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001fda:	1d3b      	adds	r3, r7, #4
 8001fdc:	0018      	movs	r0, r3
 8001fde:	2318      	movs	r3, #24
 8001fe0:	001a      	movs	r2, r3
 8001fe2:	2100      	movs	r1, #0
 8001fe4:	f003 fe14 	bl	8005c10 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001fe8:	0021      	movs	r1, r4
 8001fea:	187b      	adds	r3, r7, r1
 8001fec:	2202      	movs	r2, #2
 8001fee:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001ff0:	187b      	adds	r3, r7, r1
 8001ff2:	2201      	movs	r2, #1
 8001ff4:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001ff6:	187b      	adds	r3, r7, r1
 8001ff8:	2210      	movs	r2, #16
 8001ffa:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001ffc:	187b      	adds	r3, r7, r1
 8001ffe:	2202      	movs	r2, #2
 8002000:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002002:	187b      	adds	r3, r7, r1
 8002004:	2280      	movs	r2, #128	; 0x80
 8002006:	0212      	lsls	r2, r2, #8
 8002008:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 800200a:	187b      	adds	r3, r7, r1
 800200c:	2280      	movs	r2, #128	; 0x80
 800200e:	0352      	lsls	r2, r2, #13
 8002010:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8002012:	187b      	adds	r3, r7, r1
 8002014:	2200      	movs	r2, #0
 8002016:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002018:	187b      	adds	r3, r7, r1
 800201a:	0018      	movs	r0, r3
 800201c:	f000 ffc0 	bl	8002fa0 <HAL_RCC_OscConfig>
 8002020:	1e03      	subs	r3, r0, #0
 8002022:	d001      	beq.n	8002028 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8002024:	f000 f876 	bl	8002114 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002028:	211c      	movs	r1, #28
 800202a:	187b      	adds	r3, r7, r1
 800202c:	2207      	movs	r2, #7
 800202e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002030:	187b      	adds	r3, r7, r1
 8002032:	2202      	movs	r2, #2
 8002034:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002036:	187b      	adds	r3, r7, r1
 8002038:	2200      	movs	r2, #0
 800203a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800203c:	187b      	adds	r3, r7, r1
 800203e:	2200      	movs	r2, #0
 8002040:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002042:	187b      	adds	r3, r7, r1
 8002044:	2101      	movs	r1, #1
 8002046:	0018      	movs	r0, r3
 8002048:	f001 fb30 	bl	80036ac <HAL_RCC_ClockConfig>
 800204c:	1e03      	subs	r3, r0, #0
 800204e:	d001      	beq.n	8002054 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8002050:	f000 f860 	bl	8002114 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002054:	1d3b      	adds	r3, r7, #4
 8002056:	2201      	movs	r2, #1
 8002058:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 800205a:	1d3b      	adds	r3, r7, #4
 800205c:	2200      	movs	r2, #0
 800205e:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002060:	1d3b      	adds	r3, r7, #4
 8002062:	0018      	movs	r0, r3
 8002064:	f001 fc9c 	bl	80039a0 <HAL_RCCEx_PeriphCLKConfig>
 8002068:	1e03      	subs	r3, r0, #0
 800206a:	d001      	beq.n	8002070 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 800206c:	f000 f852 	bl	8002114 <Error_Handler>
  }
}
 8002070:	46c0      	nop			; (mov r8, r8)
 8002072:	46bd      	mov	sp, r7
 8002074:	b019      	add	sp, #100	; 0x64
 8002076:	bd90      	pop	{r4, r7, pc}

08002078 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8002078:	b580      	push	{r7, lr}
 800207a:	b082      	sub	sp, #8
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
	//if(huart2.Instance == huart){

		HAL_UART_Receive_IT(&huart1, &RxBuff, 1);
 8002080:	491d      	ldr	r1, [pc, #116]	; (80020f8 <HAL_UART_RxCpltCallback+0x80>)
 8002082:	4b1e      	ldr	r3, [pc, #120]	; (80020fc <HAL_UART_RxCpltCallback+0x84>)
 8002084:	2201      	movs	r2, #1
 8002086:	0018      	movs	r0, r3
 8002088:	f002 fc84 	bl	8004994 <HAL_UART_Receive_IT>

		if(RxBuff == 0x9B){
 800208c:	4b1a      	ldr	r3, [pc, #104]	; (80020f8 <HAL_UART_RxCpltCallback+0x80>)
 800208e:	781b      	ldrb	r3, [r3, #0]
 8002090:	2b9b      	cmp	r3, #155	; 0x9b
 8002092:	d106      	bne.n	80020a2 <HAL_UART_RxCpltCallback+0x2a>
			frameready = 1;
 8002094:	4b1a      	ldr	r3, [pc, #104]	; (8002100 <HAL_UART_RxCpltCallback+0x88>)
 8002096:	2201      	movs	r2, #1
 8002098:	701a      	strb	r2, [r3, #0]
			framefirst = 1;
 800209a:	4b1a      	ldr	r3, [pc, #104]	; (8002104 <HAL_UART_RxCpltCallback+0x8c>)
 800209c:	2201      	movs	r2, #1
 800209e:	701a      	strb	r2, [r3, #0]
 80020a0:	e002      	b.n	80020a8 <HAL_UART_RxCpltCallback+0x30>
		} else {
			framefirst = 0;
 80020a2:	4b18      	ldr	r3, [pc, #96]	; (8002104 <HAL_UART_RxCpltCallback+0x8c>)
 80020a4:	2200      	movs	r2, #0
 80020a6:	701a      	strb	r2, [r3, #0]
		}

		if(RxBuff == 0x65){
 80020a8:	4b13      	ldr	r3, [pc, #76]	; (80020f8 <HAL_UART_RxCpltCallback+0x80>)
 80020aa:	781b      	ldrb	r3, [r3, #0]
 80020ac:	2b65      	cmp	r3, #101	; 0x65
 80020ae:	d108      	bne.n	80020c2 <HAL_UART_RxCpltCallback+0x4a>
			i = 0;
 80020b0:	4b15      	ldr	r3, [pc, #84]	; (8002108 <HAL_UART_RxCpltCallback+0x90>)
 80020b2:	2200      	movs	r2, #0
 80020b4:	801a      	strh	r2, [r3, #0]
			frameready = 0;
 80020b6:	4b12      	ldr	r3, [pc, #72]	; (8002100 <HAL_UART_RxCpltCallback+0x88>)
 80020b8:	2200      	movs	r2, #0
 80020ba:	701a      	strb	r2, [r3, #0]
			//memset(FinalBuffer, 0, 64);
			finalframeready = 1;
 80020bc:	4b13      	ldr	r3, [pc, #76]	; (800210c <HAL_UART_RxCpltCallback+0x94>)
 80020be:	2201      	movs	r2, #1
 80020c0:	701a      	strb	r2, [r3, #0]
		}

		if(frameready == 1 && framefirst == 0){
 80020c2:	4b0f      	ldr	r3, [pc, #60]	; (8002100 <HAL_UART_RxCpltCallback+0x88>)
 80020c4:	781b      	ldrb	r3, [r3, #0]
 80020c6:	2b01      	cmp	r3, #1
 80020c8:	d111      	bne.n	80020ee <HAL_UART_RxCpltCallback+0x76>
 80020ca:	4b0e      	ldr	r3, [pc, #56]	; (8002104 <HAL_UART_RxCpltCallback+0x8c>)
 80020cc:	781b      	ldrb	r3, [r3, #0]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d10d      	bne.n	80020ee <HAL_UART_RxCpltCallback+0x76>
			FinalBuffer[i] = RxBuff;
 80020d2:	4b09      	ldr	r3, [pc, #36]	; (80020f8 <HAL_UART_RxCpltCallback+0x80>)
 80020d4:	7819      	ldrb	r1, [r3, #0]
 80020d6:	4b0c      	ldr	r3, [pc, #48]	; (8002108 <HAL_UART_RxCpltCallback+0x90>)
 80020d8:	881b      	ldrh	r3, [r3, #0]
 80020da:	001a      	movs	r2, r3
 80020dc:	b249      	sxtb	r1, r1
 80020de:	4b0c      	ldr	r3, [pc, #48]	; (8002110 <HAL_UART_RxCpltCallback+0x98>)
 80020e0:	5499      	strb	r1, [r3, r2]
			i++;
 80020e2:	4b09      	ldr	r3, [pc, #36]	; (8002108 <HAL_UART_RxCpltCallback+0x90>)
 80020e4:	881b      	ldrh	r3, [r3, #0]
 80020e6:	3301      	adds	r3, #1
 80020e8:	b29a      	uxth	r2, r3
 80020ea:	4b07      	ldr	r3, [pc, #28]	; (8002108 <HAL_UART_RxCpltCallback+0x90>)
 80020ec:	801a      	strh	r2, [r3, #0]

		}

	//}
}
 80020ee:	46c0      	nop			; (mov r8, r8)
 80020f0:	46bd      	mov	sp, r7
 80020f2:	b002      	add	sp, #8
 80020f4:	bd80      	pop	{r7, pc}
 80020f6:	46c0      	nop			; (mov r8, r8)
 80020f8:	20000028 	.word	0x20000028
 80020fc:	200000dc 	.word	0x200000dc
 8002100:	2000003c 	.word	0x2000003c
 8002104:	2000003d 	.word	0x2000003d
 8002108:	2000002a 	.word	0x2000002a
 800210c:	2000003e 	.word	0x2000003e
 8002110:	2000002c 	.word	0x2000002c

08002114 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002118:	b672      	cpsid	i
}
 800211a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800211c:	e7fe      	b.n	800211c <Error_Handler+0x8>
	...

08002120 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b082      	sub	sp, #8
 8002124:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002126:	4b0f      	ldr	r3, [pc, #60]	; (8002164 <HAL_MspInit+0x44>)
 8002128:	699a      	ldr	r2, [r3, #24]
 800212a:	4b0e      	ldr	r3, [pc, #56]	; (8002164 <HAL_MspInit+0x44>)
 800212c:	2101      	movs	r1, #1
 800212e:	430a      	orrs	r2, r1
 8002130:	619a      	str	r2, [r3, #24]
 8002132:	4b0c      	ldr	r3, [pc, #48]	; (8002164 <HAL_MspInit+0x44>)
 8002134:	699b      	ldr	r3, [r3, #24]
 8002136:	2201      	movs	r2, #1
 8002138:	4013      	ands	r3, r2
 800213a:	607b      	str	r3, [r7, #4]
 800213c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800213e:	4b09      	ldr	r3, [pc, #36]	; (8002164 <HAL_MspInit+0x44>)
 8002140:	69da      	ldr	r2, [r3, #28]
 8002142:	4b08      	ldr	r3, [pc, #32]	; (8002164 <HAL_MspInit+0x44>)
 8002144:	2180      	movs	r1, #128	; 0x80
 8002146:	0549      	lsls	r1, r1, #21
 8002148:	430a      	orrs	r2, r1
 800214a:	61da      	str	r2, [r3, #28]
 800214c:	4b05      	ldr	r3, [pc, #20]	; (8002164 <HAL_MspInit+0x44>)
 800214e:	69da      	ldr	r2, [r3, #28]
 8002150:	2380      	movs	r3, #128	; 0x80
 8002152:	055b      	lsls	r3, r3, #21
 8002154:	4013      	ands	r3, r2
 8002156:	603b      	str	r3, [r7, #0]
 8002158:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800215a:	46c0      	nop			; (mov r8, r8)
 800215c:	46bd      	mov	sp, r7
 800215e:	b002      	add	sp, #8
 8002160:	bd80      	pop	{r7, pc}
 8002162:	46c0      	nop			; (mov r8, r8)
 8002164:	40021000 	.word	0x40021000

08002168 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800216c:	e7fe      	b.n	800216c <NMI_Handler+0x4>

0800216e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800216e:	b580      	push	{r7, lr}
 8002170:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002172:	e7fe      	b.n	8002172 <HardFault_Handler+0x4>

08002174 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002178:	46c0      	nop			; (mov r8, r8)
 800217a:	46bd      	mov	sp, r7
 800217c:	bd80      	pop	{r7, pc}

0800217e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800217e:	b580      	push	{r7, lr}
 8002180:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002182:	46c0      	nop			; (mov r8, r8)
 8002184:	46bd      	mov	sp, r7
 8002186:	bd80      	pop	{r7, pc}

08002188 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800218c:	f000 fc28 	bl	80029e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002190:	46c0      	nop			; (mov r8, r8)
 8002192:	46bd      	mov	sp, r7
 8002194:	bd80      	pop	{r7, pc}
	...

08002198 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800219c:	4b03      	ldr	r3, [pc, #12]	; (80021ac <USART1_IRQHandler+0x14>)
 800219e:	0018      	movs	r0, r3
 80021a0:	f002 fc5a 	bl	8004a58 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80021a4:	46c0      	nop			; (mov r8, r8)
 80021a6:	46bd      	mov	sp, r7
 80021a8:	bd80      	pop	{r7, pc}
 80021aa:	46c0      	nop			; (mov r8, r8)
 80021ac:	200000dc 	.word	0x200000dc

080021b0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80021b4:	4b03      	ldr	r3, [pc, #12]	; (80021c4 <USART2_IRQHandler+0x14>)
 80021b6:	0018      	movs	r0, r3
 80021b8:	f002 fc4e 	bl	8004a58 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80021bc:	46c0      	nop			; (mov r8, r8)
 80021be:	46bd      	mov	sp, r7
 80021c0:	bd80      	pop	{r7, pc}
 80021c2:	46c0      	nop			; (mov r8, r8)
 80021c4:	20000160 	.word	0x20000160

080021c8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80021cc:	46c0      	nop			; (mov r8, r8)
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bd80      	pop	{r7, pc}
	...

080021d4 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b096      	sub	sp, #88	; 0x58
 80021d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80021da:	2348      	movs	r3, #72	; 0x48
 80021dc:	18fb      	adds	r3, r7, r3
 80021de:	0018      	movs	r0, r3
 80021e0:	2310      	movs	r3, #16
 80021e2:	001a      	movs	r2, r3
 80021e4:	2100      	movs	r1, #0
 80021e6:	f003 fd13 	bl	8005c10 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021ea:	2340      	movs	r3, #64	; 0x40
 80021ec:	18fb      	adds	r3, r7, r3
 80021ee:	0018      	movs	r0, r3
 80021f0:	2308      	movs	r3, #8
 80021f2:	001a      	movs	r2, r3
 80021f4:	2100      	movs	r1, #0
 80021f6:	f003 fd0b 	bl	8005c10 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80021fa:	2324      	movs	r3, #36	; 0x24
 80021fc:	18fb      	adds	r3, r7, r3
 80021fe:	0018      	movs	r0, r3
 8002200:	231c      	movs	r3, #28
 8002202:	001a      	movs	r2, r3
 8002204:	2100      	movs	r1, #0
 8002206:	f003 fd03 	bl	8005c10 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800220a:	1d3b      	adds	r3, r7, #4
 800220c:	0018      	movs	r0, r3
 800220e:	2320      	movs	r3, #32
 8002210:	001a      	movs	r2, r3
 8002212:	2100      	movs	r1, #0
 8002214:	f003 fcfc 	bl	8005c10 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002218:	4b67      	ldr	r3, [pc, #412]	; (80023b8 <MX_TIM1_Init+0x1e4>)
 800221a:	4a68      	ldr	r2, [pc, #416]	; (80023bc <MX_TIM1_Init+0x1e8>)
 800221c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 479;
 800221e:	4b66      	ldr	r3, [pc, #408]	; (80023b8 <MX_TIM1_Init+0x1e4>)
 8002220:	22e0      	movs	r2, #224	; 0xe0
 8002222:	32ff      	adds	r2, #255	; 0xff
 8002224:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002226:	4b64      	ldr	r3, [pc, #400]	; (80023b8 <MX_TIM1_Init+0x1e4>)
 8002228:	2200      	movs	r2, #0
 800222a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1999;
 800222c:	4b62      	ldr	r3, [pc, #392]	; (80023b8 <MX_TIM1_Init+0x1e4>)
 800222e:	4a64      	ldr	r2, [pc, #400]	; (80023c0 <MX_TIM1_Init+0x1ec>)
 8002230:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002232:	4b61      	ldr	r3, [pc, #388]	; (80023b8 <MX_TIM1_Init+0x1e4>)
 8002234:	2200      	movs	r2, #0
 8002236:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002238:	4b5f      	ldr	r3, [pc, #380]	; (80023b8 <MX_TIM1_Init+0x1e4>)
 800223a:	2200      	movs	r2, #0
 800223c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800223e:	4b5e      	ldr	r3, [pc, #376]	; (80023b8 <MX_TIM1_Init+0x1e4>)
 8002240:	2280      	movs	r2, #128	; 0x80
 8002242:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002244:	4b5c      	ldr	r3, [pc, #368]	; (80023b8 <MX_TIM1_Init+0x1e4>)
 8002246:	0018      	movs	r0, r3
 8002248:	f001 fc98 	bl	8003b7c <HAL_TIM_Base_Init>
 800224c:	1e03      	subs	r3, r0, #0
 800224e:	d001      	beq.n	8002254 <MX_TIM1_Init+0x80>
  {
    Error_Handler();
 8002250:	f7ff ff60 	bl	8002114 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002254:	2148      	movs	r1, #72	; 0x48
 8002256:	187b      	adds	r3, r7, r1
 8002258:	2280      	movs	r2, #128	; 0x80
 800225a:	0152      	lsls	r2, r2, #5
 800225c:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800225e:	187a      	adds	r2, r7, r1
 8002260:	4b55      	ldr	r3, [pc, #340]	; (80023b8 <MX_TIM1_Init+0x1e4>)
 8002262:	0011      	movs	r1, r2
 8002264:	0018      	movs	r0, r3
 8002266:	f001 fea3 	bl	8003fb0 <HAL_TIM_ConfigClockSource>
 800226a:	1e03      	subs	r3, r0, #0
 800226c:	d001      	beq.n	8002272 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 800226e:	f7ff ff51 	bl	8002114 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002272:	4b51      	ldr	r3, [pc, #324]	; (80023b8 <MX_TIM1_Init+0x1e4>)
 8002274:	0018      	movs	r0, r3
 8002276:	f001 fcd1 	bl	8003c1c <HAL_TIM_PWM_Init>
 800227a:	1e03      	subs	r3, r0, #0
 800227c:	d001      	beq.n	8002282 <MX_TIM1_Init+0xae>
  {
    Error_Handler();
 800227e:	f7ff ff49 	bl	8002114 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002282:	2140      	movs	r1, #64	; 0x40
 8002284:	187b      	adds	r3, r7, r1
 8002286:	2200      	movs	r2, #0
 8002288:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800228a:	187b      	adds	r3, r7, r1
 800228c:	2200      	movs	r2, #0
 800228e:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002290:	187a      	adds	r2, r7, r1
 8002292:	4b49      	ldr	r3, [pc, #292]	; (80023b8 <MX_TIM1_Init+0x1e4>)
 8002294:	0011      	movs	r1, r2
 8002296:	0018      	movs	r0, r3
 8002298:	f002 fa72 	bl	8004780 <HAL_TIMEx_MasterConfigSynchronization>
 800229c:	1e03      	subs	r3, r0, #0
 800229e:	d001      	beq.n	80022a4 <MX_TIM1_Init+0xd0>
  {
    Error_Handler();
 80022a0:	f7ff ff38 	bl	8002114 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80022a4:	2124      	movs	r1, #36	; 0x24
 80022a6:	187b      	adds	r3, r7, r1
 80022a8:	2260      	movs	r2, #96	; 0x60
 80022aa:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80022ac:	187b      	adds	r3, r7, r1
 80022ae:	2200      	movs	r2, #0
 80022b0:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80022b2:	187b      	adds	r3, r7, r1
 80022b4:	2200      	movs	r2, #0
 80022b6:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80022b8:	187b      	adds	r3, r7, r1
 80022ba:	2200      	movs	r2, #0
 80022bc:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 80022be:	187b      	adds	r3, r7, r1
 80022c0:	2204      	movs	r2, #4
 80022c2:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80022c4:	187b      	adds	r3, r7, r1
 80022c6:	2200      	movs	r2, #0
 80022c8:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80022ca:	187b      	adds	r3, r7, r1
 80022cc:	2200      	movs	r2, #0
 80022ce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80022d0:	1879      	adds	r1, r7, r1
 80022d2:	4b39      	ldr	r3, [pc, #228]	; (80023b8 <MX_TIM1_Init+0x1e4>)
 80022d4:	2200      	movs	r2, #0
 80022d6:	0018      	movs	r0, r3
 80022d8:	f001 fda4 	bl	8003e24 <HAL_TIM_PWM_ConfigChannel>
 80022dc:	1e03      	subs	r3, r0, #0
 80022de:	d001      	beq.n	80022e4 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 80022e0:	f7ff ff18 	bl	8002114 <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim1, TIM_CHANNEL_1);
 80022e4:	4b34      	ldr	r3, [pc, #208]	; (80023b8 <MX_TIM1_Init+0x1e4>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	699a      	ldr	r2, [r3, #24]
 80022ea:	4b33      	ldr	r3, [pc, #204]	; (80023b8 <MX_TIM1_Init+0x1e4>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	2108      	movs	r1, #8
 80022f0:	438a      	bics	r2, r1
 80022f2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80022f4:	2324      	movs	r3, #36	; 0x24
 80022f6:	18f9      	adds	r1, r7, r3
 80022f8:	4b2f      	ldr	r3, [pc, #188]	; (80023b8 <MX_TIM1_Init+0x1e4>)
 80022fa:	2204      	movs	r2, #4
 80022fc:	0018      	movs	r0, r3
 80022fe:	f001 fd91 	bl	8003e24 <HAL_TIM_PWM_ConfigChannel>
 8002302:	1e03      	subs	r3, r0, #0
 8002304:	d001      	beq.n	800230a <MX_TIM1_Init+0x136>
  {
    Error_Handler();
 8002306:	f7ff ff05 	bl	8002114 <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim1, TIM_CHANNEL_2);
 800230a:	4b2b      	ldr	r3, [pc, #172]	; (80023b8 <MX_TIM1_Init+0x1e4>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	699a      	ldr	r2, [r3, #24]
 8002310:	4b29      	ldr	r3, [pc, #164]	; (80023b8 <MX_TIM1_Init+0x1e4>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	492b      	ldr	r1, [pc, #172]	; (80023c4 <MX_TIM1_Init+0x1f0>)
 8002316:	400a      	ands	r2, r1
 8002318:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800231a:	2324      	movs	r3, #36	; 0x24
 800231c:	18f9      	adds	r1, r7, r3
 800231e:	4b26      	ldr	r3, [pc, #152]	; (80023b8 <MX_TIM1_Init+0x1e4>)
 8002320:	2208      	movs	r2, #8
 8002322:	0018      	movs	r0, r3
 8002324:	f001 fd7e 	bl	8003e24 <HAL_TIM_PWM_ConfigChannel>
 8002328:	1e03      	subs	r3, r0, #0
 800232a:	d001      	beq.n	8002330 <MX_TIM1_Init+0x15c>
  {
    Error_Handler();
 800232c:	f7ff fef2 	bl	8002114 <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim1, TIM_CHANNEL_3);
 8002330:	4b21      	ldr	r3, [pc, #132]	; (80023b8 <MX_TIM1_Init+0x1e4>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	69da      	ldr	r2, [r3, #28]
 8002336:	4b20      	ldr	r3, [pc, #128]	; (80023b8 <MX_TIM1_Init+0x1e4>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	2108      	movs	r1, #8
 800233c:	438a      	bics	r2, r1
 800233e:	61da      	str	r2, [r3, #28]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002340:	2324      	movs	r3, #36	; 0x24
 8002342:	18f9      	adds	r1, r7, r3
 8002344:	4b1c      	ldr	r3, [pc, #112]	; (80023b8 <MX_TIM1_Init+0x1e4>)
 8002346:	220c      	movs	r2, #12
 8002348:	0018      	movs	r0, r3
 800234a:	f001 fd6b 	bl	8003e24 <HAL_TIM_PWM_ConfigChannel>
 800234e:	1e03      	subs	r3, r0, #0
 8002350:	d001      	beq.n	8002356 <MX_TIM1_Init+0x182>
  {
    Error_Handler();
 8002352:	f7ff fedf 	bl	8002114 <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim1, TIM_CHANNEL_4);
 8002356:	4b18      	ldr	r3, [pc, #96]	; (80023b8 <MX_TIM1_Init+0x1e4>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	69da      	ldr	r2, [r3, #28]
 800235c:	4b16      	ldr	r3, [pc, #88]	; (80023b8 <MX_TIM1_Init+0x1e4>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	4918      	ldr	r1, [pc, #96]	; (80023c4 <MX_TIM1_Init+0x1f0>)
 8002362:	400a      	ands	r2, r1
 8002364:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002366:	1d3b      	adds	r3, r7, #4
 8002368:	2200      	movs	r2, #0
 800236a:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800236c:	1d3b      	adds	r3, r7, #4
 800236e:	2200      	movs	r2, #0
 8002370:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002372:	1d3b      	adds	r3, r7, #4
 8002374:	2200      	movs	r2, #0
 8002376:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002378:	1d3b      	adds	r3, r7, #4
 800237a:	2200      	movs	r2, #0
 800237c:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800237e:	1d3b      	adds	r3, r7, #4
 8002380:	2200      	movs	r2, #0
 8002382:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002384:	1d3b      	adds	r3, r7, #4
 8002386:	2280      	movs	r2, #128	; 0x80
 8002388:	0192      	lsls	r2, r2, #6
 800238a:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800238c:	1d3b      	adds	r3, r7, #4
 800238e:	2200      	movs	r2, #0
 8002390:	61da      	str	r2, [r3, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002392:	1d3a      	adds	r2, r7, #4
 8002394:	4b08      	ldr	r3, [pc, #32]	; (80023b8 <MX_TIM1_Init+0x1e4>)
 8002396:	0011      	movs	r1, r2
 8002398:	0018      	movs	r0, r3
 800239a:	f002 fa49 	bl	8004830 <HAL_TIMEx_ConfigBreakDeadTime>
 800239e:	1e03      	subs	r3, r0, #0
 80023a0:	d001      	beq.n	80023a6 <MX_TIM1_Init+0x1d2>
  {
    Error_Handler();
 80023a2:	f7ff feb7 	bl	8002114 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80023a6:	4b04      	ldr	r3, [pc, #16]	; (80023b8 <MX_TIM1_Init+0x1e4>)
 80023a8:	0018      	movs	r0, r3
 80023aa:	f000 f903 	bl	80025b4 <HAL_TIM_MspPostInit>

}
 80023ae:	46c0      	nop			; (mov r8, r8)
 80023b0:	46bd      	mov	sp, r7
 80023b2:	b016      	add	sp, #88	; 0x58
 80023b4:	bd80      	pop	{r7, pc}
 80023b6:	46c0      	nop			; (mov r8, r8)
 80023b8:	2000004c 	.word	0x2000004c
 80023bc:	40012c00 	.word	0x40012c00
 80023c0:	000007cf 	.word	0x000007cf
 80023c4:	fffff7ff 	.word	0xfffff7ff

080023c8 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b08e      	sub	sp, #56	; 0x38
 80023cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80023ce:	2328      	movs	r3, #40	; 0x28
 80023d0:	18fb      	adds	r3, r7, r3
 80023d2:	0018      	movs	r0, r3
 80023d4:	2310      	movs	r3, #16
 80023d6:	001a      	movs	r2, r3
 80023d8:	2100      	movs	r1, #0
 80023da:	f003 fc19 	bl	8005c10 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80023de:	2320      	movs	r3, #32
 80023e0:	18fb      	adds	r3, r7, r3
 80023e2:	0018      	movs	r0, r3
 80023e4:	2308      	movs	r3, #8
 80023e6:	001a      	movs	r2, r3
 80023e8:	2100      	movs	r1, #0
 80023ea:	f003 fc11 	bl	8005c10 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80023ee:	1d3b      	adds	r3, r7, #4
 80023f0:	0018      	movs	r0, r3
 80023f2:	231c      	movs	r3, #28
 80023f4:	001a      	movs	r2, r3
 80023f6:	2100      	movs	r1, #0
 80023f8:	f003 fc0a 	bl	8005c10 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80023fc:	4b4f      	ldr	r3, [pc, #316]	; (800253c <MX_TIM3_Init+0x174>)
 80023fe:	4a50      	ldr	r2, [pc, #320]	; (8002540 <MX_TIM3_Init+0x178>)
 8002400:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 479;
 8002402:	4b4e      	ldr	r3, [pc, #312]	; (800253c <MX_TIM3_Init+0x174>)
 8002404:	22e0      	movs	r2, #224	; 0xe0
 8002406:	32ff      	adds	r2, #255	; 0xff
 8002408:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800240a:	4b4c      	ldr	r3, [pc, #304]	; (800253c <MX_TIM3_Init+0x174>)
 800240c:	2200      	movs	r2, #0
 800240e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1999;
 8002410:	4b4a      	ldr	r3, [pc, #296]	; (800253c <MX_TIM3_Init+0x174>)
 8002412:	4a4c      	ldr	r2, [pc, #304]	; (8002544 <MX_TIM3_Init+0x17c>)
 8002414:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002416:	4b49      	ldr	r3, [pc, #292]	; (800253c <MX_TIM3_Init+0x174>)
 8002418:	2200      	movs	r2, #0
 800241a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800241c:	4b47      	ldr	r3, [pc, #284]	; (800253c <MX_TIM3_Init+0x174>)
 800241e:	2280      	movs	r2, #128	; 0x80
 8002420:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002422:	4b46      	ldr	r3, [pc, #280]	; (800253c <MX_TIM3_Init+0x174>)
 8002424:	0018      	movs	r0, r3
 8002426:	f001 fba9 	bl	8003b7c <HAL_TIM_Base_Init>
 800242a:	1e03      	subs	r3, r0, #0
 800242c:	d001      	beq.n	8002432 <MX_TIM3_Init+0x6a>
  {
    Error_Handler();
 800242e:	f7ff fe71 	bl	8002114 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002432:	2128      	movs	r1, #40	; 0x28
 8002434:	187b      	adds	r3, r7, r1
 8002436:	2280      	movs	r2, #128	; 0x80
 8002438:	0152      	lsls	r2, r2, #5
 800243a:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800243c:	187a      	adds	r2, r7, r1
 800243e:	4b3f      	ldr	r3, [pc, #252]	; (800253c <MX_TIM3_Init+0x174>)
 8002440:	0011      	movs	r1, r2
 8002442:	0018      	movs	r0, r3
 8002444:	f001 fdb4 	bl	8003fb0 <HAL_TIM_ConfigClockSource>
 8002448:	1e03      	subs	r3, r0, #0
 800244a:	d001      	beq.n	8002450 <MX_TIM3_Init+0x88>
  {
    Error_Handler();
 800244c:	f7ff fe62 	bl	8002114 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002450:	4b3a      	ldr	r3, [pc, #232]	; (800253c <MX_TIM3_Init+0x174>)
 8002452:	0018      	movs	r0, r3
 8002454:	f001 fbe2 	bl	8003c1c <HAL_TIM_PWM_Init>
 8002458:	1e03      	subs	r3, r0, #0
 800245a:	d001      	beq.n	8002460 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 800245c:	f7ff fe5a 	bl	8002114 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002460:	2120      	movs	r1, #32
 8002462:	187b      	adds	r3, r7, r1
 8002464:	2200      	movs	r2, #0
 8002466:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002468:	187b      	adds	r3, r7, r1
 800246a:	2200      	movs	r2, #0
 800246c:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800246e:	187a      	adds	r2, r7, r1
 8002470:	4b32      	ldr	r3, [pc, #200]	; (800253c <MX_TIM3_Init+0x174>)
 8002472:	0011      	movs	r1, r2
 8002474:	0018      	movs	r0, r3
 8002476:	f002 f983 	bl	8004780 <HAL_TIMEx_MasterConfigSynchronization>
 800247a:	1e03      	subs	r3, r0, #0
 800247c:	d001      	beq.n	8002482 <MX_TIM3_Init+0xba>
  {
    Error_Handler();
 800247e:	f7ff fe49 	bl	8002114 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002482:	1d3b      	adds	r3, r7, #4
 8002484:	2260      	movs	r2, #96	; 0x60
 8002486:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8002488:	1d3b      	adds	r3, r7, #4
 800248a:	2200      	movs	r2, #0
 800248c:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800248e:	1d3b      	adds	r3, r7, #4
 8002490:	2200      	movs	r2, #0
 8002492:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8002494:	1d3b      	adds	r3, r7, #4
 8002496:	2204      	movs	r2, #4
 8002498:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800249a:	1d39      	adds	r1, r7, #4
 800249c:	4b27      	ldr	r3, [pc, #156]	; (800253c <MX_TIM3_Init+0x174>)
 800249e:	2200      	movs	r2, #0
 80024a0:	0018      	movs	r0, r3
 80024a2:	f001 fcbf 	bl	8003e24 <HAL_TIM_PWM_ConfigChannel>
 80024a6:	1e03      	subs	r3, r0, #0
 80024a8:	d001      	beq.n	80024ae <MX_TIM3_Init+0xe6>
  {
    Error_Handler();
 80024aa:	f7ff fe33 	bl	8002114 <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim3, TIM_CHANNEL_1);
 80024ae:	4b23      	ldr	r3, [pc, #140]	; (800253c <MX_TIM3_Init+0x174>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	699a      	ldr	r2, [r3, #24]
 80024b4:	4b21      	ldr	r3, [pc, #132]	; (800253c <MX_TIM3_Init+0x174>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	2108      	movs	r1, #8
 80024ba:	438a      	bics	r2, r1
 80024bc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80024be:	1d39      	adds	r1, r7, #4
 80024c0:	4b1e      	ldr	r3, [pc, #120]	; (800253c <MX_TIM3_Init+0x174>)
 80024c2:	2204      	movs	r2, #4
 80024c4:	0018      	movs	r0, r3
 80024c6:	f001 fcad 	bl	8003e24 <HAL_TIM_PWM_ConfigChannel>
 80024ca:	1e03      	subs	r3, r0, #0
 80024cc:	d001      	beq.n	80024d2 <MX_TIM3_Init+0x10a>
  {
    Error_Handler();
 80024ce:	f7ff fe21 	bl	8002114 <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim3, TIM_CHANNEL_2);
 80024d2:	4b1a      	ldr	r3, [pc, #104]	; (800253c <MX_TIM3_Init+0x174>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	699a      	ldr	r2, [r3, #24]
 80024d8:	4b18      	ldr	r3, [pc, #96]	; (800253c <MX_TIM3_Init+0x174>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	491a      	ldr	r1, [pc, #104]	; (8002548 <MX_TIM3_Init+0x180>)
 80024de:	400a      	ands	r2, r1
 80024e0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80024e2:	1d39      	adds	r1, r7, #4
 80024e4:	4b15      	ldr	r3, [pc, #84]	; (800253c <MX_TIM3_Init+0x174>)
 80024e6:	2208      	movs	r2, #8
 80024e8:	0018      	movs	r0, r3
 80024ea:	f001 fc9b 	bl	8003e24 <HAL_TIM_PWM_ConfigChannel>
 80024ee:	1e03      	subs	r3, r0, #0
 80024f0:	d001      	beq.n	80024f6 <MX_TIM3_Init+0x12e>
  {
    Error_Handler();
 80024f2:	f7ff fe0f 	bl	8002114 <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim3, TIM_CHANNEL_3);
 80024f6:	4b11      	ldr	r3, [pc, #68]	; (800253c <MX_TIM3_Init+0x174>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	69da      	ldr	r2, [r3, #28]
 80024fc:	4b0f      	ldr	r3, [pc, #60]	; (800253c <MX_TIM3_Init+0x174>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	2108      	movs	r1, #8
 8002502:	438a      	bics	r2, r1
 8002504:	61da      	str	r2, [r3, #28]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002506:	1d39      	adds	r1, r7, #4
 8002508:	4b0c      	ldr	r3, [pc, #48]	; (800253c <MX_TIM3_Init+0x174>)
 800250a:	220c      	movs	r2, #12
 800250c:	0018      	movs	r0, r3
 800250e:	f001 fc89 	bl	8003e24 <HAL_TIM_PWM_ConfigChannel>
 8002512:	1e03      	subs	r3, r0, #0
 8002514:	d001      	beq.n	800251a <MX_TIM3_Init+0x152>
  {
    Error_Handler();
 8002516:	f7ff fdfd 	bl	8002114 <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim3, TIM_CHANNEL_4);
 800251a:	4b08      	ldr	r3, [pc, #32]	; (800253c <MX_TIM3_Init+0x174>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	69da      	ldr	r2, [r3, #28]
 8002520:	4b06      	ldr	r3, [pc, #24]	; (800253c <MX_TIM3_Init+0x174>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	4908      	ldr	r1, [pc, #32]	; (8002548 <MX_TIM3_Init+0x180>)
 8002526:	400a      	ands	r2, r1
 8002528:	61da      	str	r2, [r3, #28]
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800252a:	4b04      	ldr	r3, [pc, #16]	; (800253c <MX_TIM3_Init+0x174>)
 800252c:	0018      	movs	r0, r3
 800252e:	f000 f841 	bl	80025b4 <HAL_TIM_MspPostInit>

}
 8002532:	46c0      	nop			; (mov r8, r8)
 8002534:	46bd      	mov	sp, r7
 8002536:	b00e      	add	sp, #56	; 0x38
 8002538:	bd80      	pop	{r7, pc}
 800253a:	46c0      	nop			; (mov r8, r8)
 800253c:	20000094 	.word	0x20000094
 8002540:	40000400 	.word	0x40000400
 8002544:	000007cf 	.word	0x000007cf
 8002548:	fffff7ff 	.word	0xfffff7ff

0800254c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b084      	sub	sp, #16
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	4a13      	ldr	r2, [pc, #76]	; (80025a8 <HAL_TIM_Base_MspInit+0x5c>)
 800255a:	4293      	cmp	r3, r2
 800255c:	d10e      	bne.n	800257c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800255e:	4b13      	ldr	r3, [pc, #76]	; (80025ac <HAL_TIM_Base_MspInit+0x60>)
 8002560:	699a      	ldr	r2, [r3, #24]
 8002562:	4b12      	ldr	r3, [pc, #72]	; (80025ac <HAL_TIM_Base_MspInit+0x60>)
 8002564:	2180      	movs	r1, #128	; 0x80
 8002566:	0109      	lsls	r1, r1, #4
 8002568:	430a      	orrs	r2, r1
 800256a:	619a      	str	r2, [r3, #24]
 800256c:	4b0f      	ldr	r3, [pc, #60]	; (80025ac <HAL_TIM_Base_MspInit+0x60>)
 800256e:	699a      	ldr	r2, [r3, #24]
 8002570:	2380      	movs	r3, #128	; 0x80
 8002572:	011b      	lsls	r3, r3, #4
 8002574:	4013      	ands	r3, r2
 8002576:	60fb      	str	r3, [r7, #12]
 8002578:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800257a:	e010      	b.n	800259e <HAL_TIM_Base_MspInit+0x52>
  else if(tim_baseHandle->Instance==TIM3)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	4a0b      	ldr	r2, [pc, #44]	; (80025b0 <HAL_TIM_Base_MspInit+0x64>)
 8002582:	4293      	cmp	r3, r2
 8002584:	d10b      	bne.n	800259e <HAL_TIM_Base_MspInit+0x52>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002586:	4b09      	ldr	r3, [pc, #36]	; (80025ac <HAL_TIM_Base_MspInit+0x60>)
 8002588:	69da      	ldr	r2, [r3, #28]
 800258a:	4b08      	ldr	r3, [pc, #32]	; (80025ac <HAL_TIM_Base_MspInit+0x60>)
 800258c:	2102      	movs	r1, #2
 800258e:	430a      	orrs	r2, r1
 8002590:	61da      	str	r2, [r3, #28]
 8002592:	4b06      	ldr	r3, [pc, #24]	; (80025ac <HAL_TIM_Base_MspInit+0x60>)
 8002594:	69db      	ldr	r3, [r3, #28]
 8002596:	2202      	movs	r2, #2
 8002598:	4013      	ands	r3, r2
 800259a:	60bb      	str	r3, [r7, #8]
 800259c:	68bb      	ldr	r3, [r7, #8]
}
 800259e:	46c0      	nop			; (mov r8, r8)
 80025a0:	46bd      	mov	sp, r7
 80025a2:	b004      	add	sp, #16
 80025a4:	bd80      	pop	{r7, pc}
 80025a6:	46c0      	nop			; (mov r8, r8)
 80025a8:	40012c00 	.word	0x40012c00
 80025ac:	40021000 	.word	0x40021000
 80025b0:	40000400 	.word	0x40000400

080025b4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80025b4:	b590      	push	{r4, r7, lr}
 80025b6:	b08b      	sub	sp, #44	; 0x2c
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025bc:	2414      	movs	r4, #20
 80025be:	193b      	adds	r3, r7, r4
 80025c0:	0018      	movs	r0, r3
 80025c2:	2314      	movs	r3, #20
 80025c4:	001a      	movs	r2, r3
 80025c6:	2100      	movs	r1, #0
 80025c8:	f003 fb22 	bl	8005c10 <memset>
  if(timHandle->Instance==TIM1)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	4a3d      	ldr	r2, [pc, #244]	; (80026c8 <HAL_TIM_MspPostInit+0x114>)
 80025d2:	4293      	cmp	r3, r2
 80025d4:	d126      	bne.n	8002624 <HAL_TIM_MspPostInit+0x70>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025d6:	4b3d      	ldr	r3, [pc, #244]	; (80026cc <HAL_TIM_MspPostInit+0x118>)
 80025d8:	695a      	ldr	r2, [r3, #20]
 80025da:	4b3c      	ldr	r3, [pc, #240]	; (80026cc <HAL_TIM_MspPostInit+0x118>)
 80025dc:	2180      	movs	r1, #128	; 0x80
 80025de:	0289      	lsls	r1, r1, #10
 80025e0:	430a      	orrs	r2, r1
 80025e2:	615a      	str	r2, [r3, #20]
 80025e4:	4b39      	ldr	r3, [pc, #228]	; (80026cc <HAL_TIM_MspPostInit+0x118>)
 80025e6:	695a      	ldr	r2, [r3, #20]
 80025e8:	2380      	movs	r3, #128	; 0x80
 80025ea:	029b      	lsls	r3, r3, #10
 80025ec:	4013      	ands	r3, r2
 80025ee:	613b      	str	r3, [r7, #16]
 80025f0:	693b      	ldr	r3, [r7, #16]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = TIM1_CH1_SERVO_P1_Pin|TIM1_CH2_SERVO_L1_Pin|TIM1_CH3_SERVO_P2_Pin|TIM1_CH4_SERVO_L2_Pin;
 80025f2:	193b      	adds	r3, r7, r4
 80025f4:	22f0      	movs	r2, #240	; 0xf0
 80025f6:	0112      	lsls	r2, r2, #4
 80025f8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025fa:	0021      	movs	r1, r4
 80025fc:	187b      	adds	r3, r7, r1
 80025fe:	2202      	movs	r2, #2
 8002600:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002602:	187b      	adds	r3, r7, r1
 8002604:	2200      	movs	r2, #0
 8002606:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002608:	187b      	adds	r3, r7, r1
 800260a:	2200      	movs	r2, #0
 800260c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 800260e:	187b      	adds	r3, r7, r1
 8002610:	2202      	movs	r2, #2
 8002612:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002614:	187a      	adds	r2, r7, r1
 8002616:	2390      	movs	r3, #144	; 0x90
 8002618:	05db      	lsls	r3, r3, #23
 800261a:	0011      	movs	r1, r2
 800261c:	0018      	movs	r0, r3
 800261e:	f000 fb57 	bl	8002cd0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002622:	e04d      	b.n	80026c0 <HAL_TIM_MspPostInit+0x10c>
  else if(timHandle->Instance==TIM3)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4a29      	ldr	r2, [pc, #164]	; (80026d0 <HAL_TIM_MspPostInit+0x11c>)
 800262a:	4293      	cmp	r3, r2
 800262c:	d148      	bne.n	80026c0 <HAL_TIM_MspPostInit+0x10c>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800262e:	4b27      	ldr	r3, [pc, #156]	; (80026cc <HAL_TIM_MspPostInit+0x118>)
 8002630:	695a      	ldr	r2, [r3, #20]
 8002632:	4b26      	ldr	r3, [pc, #152]	; (80026cc <HAL_TIM_MspPostInit+0x118>)
 8002634:	2180      	movs	r1, #128	; 0x80
 8002636:	0289      	lsls	r1, r1, #10
 8002638:	430a      	orrs	r2, r1
 800263a:	615a      	str	r2, [r3, #20]
 800263c:	4b23      	ldr	r3, [pc, #140]	; (80026cc <HAL_TIM_MspPostInit+0x118>)
 800263e:	695a      	ldr	r2, [r3, #20]
 8002640:	2380      	movs	r3, #128	; 0x80
 8002642:	029b      	lsls	r3, r3, #10
 8002644:	4013      	ands	r3, r2
 8002646:	60fb      	str	r3, [r7, #12]
 8002648:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800264a:	4b20      	ldr	r3, [pc, #128]	; (80026cc <HAL_TIM_MspPostInit+0x118>)
 800264c:	695a      	ldr	r2, [r3, #20]
 800264e:	4b1f      	ldr	r3, [pc, #124]	; (80026cc <HAL_TIM_MspPostInit+0x118>)
 8002650:	2180      	movs	r1, #128	; 0x80
 8002652:	02c9      	lsls	r1, r1, #11
 8002654:	430a      	orrs	r2, r1
 8002656:	615a      	str	r2, [r3, #20]
 8002658:	4b1c      	ldr	r3, [pc, #112]	; (80026cc <HAL_TIM_MspPostInit+0x118>)
 800265a:	695a      	ldr	r2, [r3, #20]
 800265c:	2380      	movs	r3, #128	; 0x80
 800265e:	02db      	lsls	r3, r3, #11
 8002660:	4013      	ands	r3, r2
 8002662:	60bb      	str	r3, [r7, #8]
 8002664:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = TIM3_CH2_SERVO_L3_Pin;
 8002666:	2414      	movs	r4, #20
 8002668:	193b      	adds	r3, r7, r4
 800266a:	2280      	movs	r2, #128	; 0x80
 800266c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800266e:	193b      	adds	r3, r7, r4
 8002670:	2202      	movs	r2, #2
 8002672:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002674:	193b      	adds	r3, r7, r4
 8002676:	2200      	movs	r2, #0
 8002678:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800267a:	193b      	adds	r3, r7, r4
 800267c:	2200      	movs	r2, #0
 800267e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8002680:	193b      	adds	r3, r7, r4
 8002682:	2201      	movs	r2, #1
 8002684:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(TIM3_CH2_SERVO_L3_GPIO_Port, &GPIO_InitStruct);
 8002686:	193a      	adds	r2, r7, r4
 8002688:	2390      	movs	r3, #144	; 0x90
 800268a:	05db      	lsls	r3, r3, #23
 800268c:	0011      	movs	r1, r2
 800268e:	0018      	movs	r0, r3
 8002690:	f000 fb1e 	bl	8002cd0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = TIM3_CH3_POLOLU_P_Pin|TIM3_CH4_POLOLU_L_Pin|TIM3_CH1_SERVO_P3_Pin;
 8002694:	0021      	movs	r1, r4
 8002696:	187b      	adds	r3, r7, r1
 8002698:	2213      	movs	r2, #19
 800269a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800269c:	187b      	adds	r3, r7, r1
 800269e:	2202      	movs	r2, #2
 80026a0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026a2:	187b      	adds	r3, r7, r1
 80026a4:	2200      	movs	r2, #0
 80026a6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026a8:	187b      	adds	r3, r7, r1
 80026aa:	2200      	movs	r2, #0
 80026ac:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 80026ae:	187b      	adds	r3, r7, r1
 80026b0:	2201      	movs	r2, #1
 80026b2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026b4:	187b      	adds	r3, r7, r1
 80026b6:	4a07      	ldr	r2, [pc, #28]	; (80026d4 <HAL_TIM_MspPostInit+0x120>)
 80026b8:	0019      	movs	r1, r3
 80026ba:	0010      	movs	r0, r2
 80026bc:	f000 fb08 	bl	8002cd0 <HAL_GPIO_Init>
}
 80026c0:	46c0      	nop			; (mov r8, r8)
 80026c2:	46bd      	mov	sp, r7
 80026c4:	b00b      	add	sp, #44	; 0x2c
 80026c6:	bd90      	pop	{r4, r7, pc}
 80026c8:	40012c00 	.word	0x40012c00
 80026cc:	40021000 	.word	0x40021000
 80026d0:	40000400 	.word	0x40000400
 80026d4:	48000400 	.word	0x48000400

080026d8 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80026dc:	4b14      	ldr	r3, [pc, #80]	; (8002730 <MX_USART1_UART_Init+0x58>)
 80026de:	4a15      	ldr	r2, [pc, #84]	; (8002734 <MX_USART1_UART_Init+0x5c>)
 80026e0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80026e2:	4b13      	ldr	r3, [pc, #76]	; (8002730 <MX_USART1_UART_Init+0x58>)
 80026e4:	22e1      	movs	r2, #225	; 0xe1
 80026e6:	0252      	lsls	r2, r2, #9
 80026e8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80026ea:	4b11      	ldr	r3, [pc, #68]	; (8002730 <MX_USART1_UART_Init+0x58>)
 80026ec:	2200      	movs	r2, #0
 80026ee:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80026f0:	4b0f      	ldr	r3, [pc, #60]	; (8002730 <MX_USART1_UART_Init+0x58>)
 80026f2:	2200      	movs	r2, #0
 80026f4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80026f6:	4b0e      	ldr	r3, [pc, #56]	; (8002730 <MX_USART1_UART_Init+0x58>)
 80026f8:	2200      	movs	r2, #0
 80026fa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80026fc:	4b0c      	ldr	r3, [pc, #48]	; (8002730 <MX_USART1_UART_Init+0x58>)
 80026fe:	220c      	movs	r2, #12
 8002700:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002702:	4b0b      	ldr	r3, [pc, #44]	; (8002730 <MX_USART1_UART_Init+0x58>)
 8002704:	2200      	movs	r2, #0
 8002706:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002708:	4b09      	ldr	r3, [pc, #36]	; (8002730 <MX_USART1_UART_Init+0x58>)
 800270a:	2200      	movs	r2, #0
 800270c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800270e:	4b08      	ldr	r3, [pc, #32]	; (8002730 <MX_USART1_UART_Init+0x58>)
 8002710:	2200      	movs	r2, #0
 8002712:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002714:	4b06      	ldr	r3, [pc, #24]	; (8002730 <MX_USART1_UART_Init+0x58>)
 8002716:	2200      	movs	r2, #0
 8002718:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800271a:	4b05      	ldr	r3, [pc, #20]	; (8002730 <MX_USART1_UART_Init+0x58>)
 800271c:	0018      	movs	r0, r3
 800271e:	f002 f8e5 	bl	80048ec <HAL_UART_Init>
 8002722:	1e03      	subs	r3, r0, #0
 8002724:	d001      	beq.n	800272a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8002726:	f7ff fcf5 	bl	8002114 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800272a:	46c0      	nop			; (mov r8, r8)
 800272c:	46bd      	mov	sp, r7
 800272e:	bd80      	pop	{r7, pc}
 8002730:	200000dc 	.word	0x200000dc
 8002734:	40013800 	.word	0x40013800

08002738 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800273c:	4b14      	ldr	r3, [pc, #80]	; (8002790 <MX_USART2_UART_Init+0x58>)
 800273e:	4a15      	ldr	r2, [pc, #84]	; (8002794 <MX_USART2_UART_Init+0x5c>)
 8002740:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002742:	4b13      	ldr	r3, [pc, #76]	; (8002790 <MX_USART2_UART_Init+0x58>)
 8002744:	22e1      	movs	r2, #225	; 0xe1
 8002746:	0252      	lsls	r2, r2, #9
 8002748:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800274a:	4b11      	ldr	r3, [pc, #68]	; (8002790 <MX_USART2_UART_Init+0x58>)
 800274c:	2200      	movs	r2, #0
 800274e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002750:	4b0f      	ldr	r3, [pc, #60]	; (8002790 <MX_USART2_UART_Init+0x58>)
 8002752:	2200      	movs	r2, #0
 8002754:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002756:	4b0e      	ldr	r3, [pc, #56]	; (8002790 <MX_USART2_UART_Init+0x58>)
 8002758:	2200      	movs	r2, #0
 800275a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800275c:	4b0c      	ldr	r3, [pc, #48]	; (8002790 <MX_USART2_UART_Init+0x58>)
 800275e:	220c      	movs	r2, #12
 8002760:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002762:	4b0b      	ldr	r3, [pc, #44]	; (8002790 <MX_USART2_UART_Init+0x58>)
 8002764:	2200      	movs	r2, #0
 8002766:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002768:	4b09      	ldr	r3, [pc, #36]	; (8002790 <MX_USART2_UART_Init+0x58>)
 800276a:	2200      	movs	r2, #0
 800276c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800276e:	4b08      	ldr	r3, [pc, #32]	; (8002790 <MX_USART2_UART_Init+0x58>)
 8002770:	2200      	movs	r2, #0
 8002772:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002774:	4b06      	ldr	r3, [pc, #24]	; (8002790 <MX_USART2_UART_Init+0x58>)
 8002776:	2200      	movs	r2, #0
 8002778:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800277a:	4b05      	ldr	r3, [pc, #20]	; (8002790 <MX_USART2_UART_Init+0x58>)
 800277c:	0018      	movs	r0, r3
 800277e:	f002 f8b5 	bl	80048ec <HAL_UART_Init>
 8002782:	1e03      	subs	r3, r0, #0
 8002784:	d001      	beq.n	800278a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8002786:	f7ff fcc5 	bl	8002114 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800278a:	46c0      	nop			; (mov r8, r8)
 800278c:	46bd      	mov	sp, r7
 800278e:	bd80      	pop	{r7, pc}
 8002790:	20000160 	.word	0x20000160
 8002794:	40004400 	.word	0x40004400

08002798 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002798:	b590      	push	{r4, r7, lr}
 800279a:	b08d      	sub	sp, #52	; 0x34
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027a0:	241c      	movs	r4, #28
 80027a2:	193b      	adds	r3, r7, r4
 80027a4:	0018      	movs	r0, r3
 80027a6:	2314      	movs	r3, #20
 80027a8:	001a      	movs	r2, r3
 80027aa:	2100      	movs	r1, #0
 80027ac:	f003 fa30 	bl	8005c10 <memset>
  if(uartHandle->Instance==USART1)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4a40      	ldr	r2, [pc, #256]	; (80028b8 <HAL_UART_MspInit+0x120>)
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d13a      	bne.n	8002830 <HAL_UART_MspInit+0x98>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80027ba:	4b40      	ldr	r3, [pc, #256]	; (80028bc <HAL_UART_MspInit+0x124>)
 80027bc:	699a      	ldr	r2, [r3, #24]
 80027be:	4b3f      	ldr	r3, [pc, #252]	; (80028bc <HAL_UART_MspInit+0x124>)
 80027c0:	2180      	movs	r1, #128	; 0x80
 80027c2:	01c9      	lsls	r1, r1, #7
 80027c4:	430a      	orrs	r2, r1
 80027c6:	619a      	str	r2, [r3, #24]
 80027c8:	4b3c      	ldr	r3, [pc, #240]	; (80028bc <HAL_UART_MspInit+0x124>)
 80027ca:	699a      	ldr	r2, [r3, #24]
 80027cc:	2380      	movs	r3, #128	; 0x80
 80027ce:	01db      	lsls	r3, r3, #7
 80027d0:	4013      	ands	r3, r2
 80027d2:	61bb      	str	r3, [r7, #24]
 80027d4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80027d6:	4b39      	ldr	r3, [pc, #228]	; (80028bc <HAL_UART_MspInit+0x124>)
 80027d8:	695a      	ldr	r2, [r3, #20]
 80027da:	4b38      	ldr	r3, [pc, #224]	; (80028bc <HAL_UART_MspInit+0x124>)
 80027dc:	2180      	movs	r1, #128	; 0x80
 80027de:	02c9      	lsls	r1, r1, #11
 80027e0:	430a      	orrs	r2, r1
 80027e2:	615a      	str	r2, [r3, #20]
 80027e4:	4b35      	ldr	r3, [pc, #212]	; (80028bc <HAL_UART_MspInit+0x124>)
 80027e6:	695a      	ldr	r2, [r3, #20]
 80027e8:	2380      	movs	r3, #128	; 0x80
 80027ea:	02db      	lsls	r3, r3, #11
 80027ec:	4013      	ands	r3, r2
 80027ee:	617b      	str	r3, [r7, #20]
 80027f0:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80027f2:	0021      	movs	r1, r4
 80027f4:	187b      	adds	r3, r7, r1
 80027f6:	22c0      	movs	r2, #192	; 0xc0
 80027f8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027fa:	187b      	adds	r3, r7, r1
 80027fc:	2202      	movs	r2, #2
 80027fe:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002800:	187b      	adds	r3, r7, r1
 8002802:	2200      	movs	r2, #0
 8002804:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002806:	187b      	adds	r3, r7, r1
 8002808:	2203      	movs	r2, #3
 800280a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 800280c:	187b      	adds	r3, r7, r1
 800280e:	2200      	movs	r2, #0
 8002810:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002812:	187b      	adds	r3, r7, r1
 8002814:	4a2a      	ldr	r2, [pc, #168]	; (80028c0 <HAL_UART_MspInit+0x128>)
 8002816:	0019      	movs	r1, r3
 8002818:	0010      	movs	r0, r2
 800281a:	f000 fa59 	bl	8002cd0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800281e:	2200      	movs	r2, #0
 8002820:	2100      	movs	r1, #0
 8002822:	201b      	movs	r0, #27
 8002824:	f000 f9a4 	bl	8002b70 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002828:	201b      	movs	r0, #27
 800282a:	f000 f9b6 	bl	8002b9a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800282e:	e03f      	b.n	80028b0 <HAL_UART_MspInit+0x118>
  else if(uartHandle->Instance==USART2)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4a23      	ldr	r2, [pc, #140]	; (80028c4 <HAL_UART_MspInit+0x12c>)
 8002836:	4293      	cmp	r3, r2
 8002838:	d13a      	bne.n	80028b0 <HAL_UART_MspInit+0x118>
    __HAL_RCC_USART2_CLK_ENABLE();
 800283a:	4b20      	ldr	r3, [pc, #128]	; (80028bc <HAL_UART_MspInit+0x124>)
 800283c:	69da      	ldr	r2, [r3, #28]
 800283e:	4b1f      	ldr	r3, [pc, #124]	; (80028bc <HAL_UART_MspInit+0x124>)
 8002840:	2180      	movs	r1, #128	; 0x80
 8002842:	0289      	lsls	r1, r1, #10
 8002844:	430a      	orrs	r2, r1
 8002846:	61da      	str	r2, [r3, #28]
 8002848:	4b1c      	ldr	r3, [pc, #112]	; (80028bc <HAL_UART_MspInit+0x124>)
 800284a:	69da      	ldr	r2, [r3, #28]
 800284c:	2380      	movs	r3, #128	; 0x80
 800284e:	029b      	lsls	r3, r3, #10
 8002850:	4013      	ands	r3, r2
 8002852:	613b      	str	r3, [r7, #16]
 8002854:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002856:	4b19      	ldr	r3, [pc, #100]	; (80028bc <HAL_UART_MspInit+0x124>)
 8002858:	695a      	ldr	r2, [r3, #20]
 800285a:	4b18      	ldr	r3, [pc, #96]	; (80028bc <HAL_UART_MspInit+0x124>)
 800285c:	2180      	movs	r1, #128	; 0x80
 800285e:	0289      	lsls	r1, r1, #10
 8002860:	430a      	orrs	r2, r1
 8002862:	615a      	str	r2, [r3, #20]
 8002864:	4b15      	ldr	r3, [pc, #84]	; (80028bc <HAL_UART_MspInit+0x124>)
 8002866:	695a      	ldr	r2, [r3, #20]
 8002868:	2380      	movs	r3, #128	; 0x80
 800286a:	029b      	lsls	r3, r3, #10
 800286c:	4013      	ands	r3, r2
 800286e:	60fb      	str	r3, [r7, #12]
 8002870:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 8002872:	211c      	movs	r1, #28
 8002874:	187b      	adds	r3, r7, r1
 8002876:	4a14      	ldr	r2, [pc, #80]	; (80028c8 <HAL_UART_MspInit+0x130>)
 8002878:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800287a:	187b      	adds	r3, r7, r1
 800287c:	2202      	movs	r2, #2
 800287e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002880:	187b      	adds	r3, r7, r1
 8002882:	2200      	movs	r2, #0
 8002884:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002886:	187b      	adds	r3, r7, r1
 8002888:	2203      	movs	r2, #3
 800288a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 800288c:	187b      	adds	r3, r7, r1
 800288e:	2201      	movs	r2, #1
 8002890:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002892:	187a      	adds	r2, r7, r1
 8002894:	2390      	movs	r3, #144	; 0x90
 8002896:	05db      	lsls	r3, r3, #23
 8002898:	0011      	movs	r1, r2
 800289a:	0018      	movs	r0, r3
 800289c:	f000 fa18 	bl	8002cd0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80028a0:	2200      	movs	r2, #0
 80028a2:	2100      	movs	r1, #0
 80028a4:	201c      	movs	r0, #28
 80028a6:	f000 f963 	bl	8002b70 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80028aa:	201c      	movs	r0, #28
 80028ac:	f000 f975 	bl	8002b9a <HAL_NVIC_EnableIRQ>
}
 80028b0:	46c0      	nop			; (mov r8, r8)
 80028b2:	46bd      	mov	sp, r7
 80028b4:	b00d      	add	sp, #52	; 0x34
 80028b6:	bd90      	pop	{r4, r7, pc}
 80028b8:	40013800 	.word	0x40013800
 80028bc:	40021000 	.word	0x40021000
 80028c0:	48000400 	.word	0x48000400
 80028c4:	40004400 	.word	0x40004400
 80028c8:	00008004 	.word	0x00008004

080028cc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80028cc:	4813      	ldr	r0, [pc, #76]	; (800291c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80028ce:	4685      	mov	sp, r0

/*Check if boot space corresponds to test memory*/
 
    LDR R0,=0x00000004
 80028d0:	4813      	ldr	r0, [pc, #76]	; (8002920 <LoopForever+0x6>)
    LDR R1, [R0]
 80028d2:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 80028d4:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 80028d6:	4a13      	ldr	r2, [pc, #76]	; (8002924 <LoopForever+0xa>)
    CMP R1, R2
 80028d8:	4291      	cmp	r1, r2
    BNE ApplicationStart
 80028da:	d105      	bne.n	80028e8 <ApplicationStart>

 /*SYSCFG clock enable*/

    LDR R0,=0x40021018
 80028dc:	4812      	ldr	r0, [pc, #72]	; (8002928 <LoopForever+0xe>)
    LDR R1,=0x00000001
 80028de:	4913      	ldr	r1, [pc, #76]	; (800292c <LoopForever+0x12>)
    STR R1, [R0]
 80028e0:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 80028e2:	4813      	ldr	r0, [pc, #76]	; (8002930 <LoopForever+0x16>)
    LDR R1,=0x00000000
 80028e4:	4913      	ldr	r1, [pc, #76]	; (8002934 <LoopForever+0x1a>)
    STR R1, [R0]
 80028e6:	6001      	str	r1, [r0, #0]

080028e8 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80028e8:	4813      	ldr	r0, [pc, #76]	; (8002938 <LoopForever+0x1e>)
  ldr r1, =_edata
 80028ea:	4914      	ldr	r1, [pc, #80]	; (800293c <LoopForever+0x22>)
  ldr r2, =_sidata
 80028ec:	4a14      	ldr	r2, [pc, #80]	; (8002940 <LoopForever+0x26>)
  movs r3, #0
 80028ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80028f0:	e002      	b.n	80028f8 <LoopCopyDataInit>

080028f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80028f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80028f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80028f6:	3304      	adds	r3, #4

080028f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80028f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80028fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80028fc:	d3f9      	bcc.n	80028f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80028fe:	4a11      	ldr	r2, [pc, #68]	; (8002944 <LoopForever+0x2a>)
  ldr r4, =_ebss
 8002900:	4c11      	ldr	r4, [pc, #68]	; (8002948 <LoopForever+0x2e>)
  movs r3, #0
 8002902:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002904:	e001      	b.n	800290a <LoopFillZerobss>

08002906 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002906:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002908:	3204      	adds	r2, #4

0800290a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800290a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800290c:	d3fb      	bcc.n	8002906 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800290e:	f7ff fc5b 	bl	80021c8 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8002912:	f003 f959 	bl	8005bc8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002916:	f7ff f907 	bl	8001b28 <main>

0800291a <LoopForever>:

LoopForever:
    b LoopForever
 800291a:	e7fe      	b.n	800291a <LoopForever>
  ldr   r0, =_estack
 800291c:	20001800 	.word	0x20001800
    LDR R0,=0x00000004
 8002920:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 8002924:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021018
 8002928:	40021018 	.word	0x40021018
    LDR R1,=0x00000001
 800292c:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 8002930:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 8002934:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 8002938:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800293c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8002940:	08005cb8 	.word	0x08005cb8
  ldr r2, =_sbss
 8002944:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8002948:	200001e8 	.word	0x200001e8

0800294c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800294c:	e7fe      	b.n	800294c <ADC1_IRQHandler>
	...

08002950 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002954:	4b07      	ldr	r3, [pc, #28]	; (8002974 <HAL_Init+0x24>)
 8002956:	681a      	ldr	r2, [r3, #0]
 8002958:	4b06      	ldr	r3, [pc, #24]	; (8002974 <HAL_Init+0x24>)
 800295a:	2110      	movs	r1, #16
 800295c:	430a      	orrs	r2, r1
 800295e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8002960:	2000      	movs	r0, #0
 8002962:	f000 f809 	bl	8002978 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002966:	f7ff fbdb 	bl	8002120 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800296a:	2300      	movs	r3, #0
}
 800296c:	0018      	movs	r0, r3
 800296e:	46bd      	mov	sp, r7
 8002970:	bd80      	pop	{r7, pc}
 8002972:	46c0      	nop			; (mov r8, r8)
 8002974:	40022000 	.word	0x40022000

08002978 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002978:	b590      	push	{r4, r7, lr}
 800297a:	b083      	sub	sp, #12
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002980:	4b14      	ldr	r3, [pc, #80]	; (80029d4 <HAL_InitTick+0x5c>)
 8002982:	681c      	ldr	r4, [r3, #0]
 8002984:	4b14      	ldr	r3, [pc, #80]	; (80029d8 <HAL_InitTick+0x60>)
 8002986:	781b      	ldrb	r3, [r3, #0]
 8002988:	0019      	movs	r1, r3
 800298a:	23fa      	movs	r3, #250	; 0xfa
 800298c:	0098      	lsls	r0, r3, #2
 800298e:	f7fd fbbb 	bl	8000108 <__udivsi3>
 8002992:	0003      	movs	r3, r0
 8002994:	0019      	movs	r1, r3
 8002996:	0020      	movs	r0, r4
 8002998:	f7fd fbb6 	bl	8000108 <__udivsi3>
 800299c:	0003      	movs	r3, r0
 800299e:	0018      	movs	r0, r3
 80029a0:	f000 f90b 	bl	8002bba <HAL_SYSTICK_Config>
 80029a4:	1e03      	subs	r3, r0, #0
 80029a6:	d001      	beq.n	80029ac <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80029a8:	2301      	movs	r3, #1
 80029aa:	e00f      	b.n	80029cc <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2b03      	cmp	r3, #3
 80029b0:	d80b      	bhi.n	80029ca <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80029b2:	6879      	ldr	r1, [r7, #4]
 80029b4:	2301      	movs	r3, #1
 80029b6:	425b      	negs	r3, r3
 80029b8:	2200      	movs	r2, #0
 80029ba:	0018      	movs	r0, r3
 80029bc:	f000 f8d8 	bl	8002b70 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80029c0:	4b06      	ldr	r3, [pc, #24]	; (80029dc <HAL_InitTick+0x64>)
 80029c2:	687a      	ldr	r2, [r7, #4]
 80029c4:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80029c6:	2300      	movs	r3, #0
 80029c8:	e000      	b.n	80029cc <HAL_InitTick+0x54>
    return HAL_ERROR;
 80029ca:	2301      	movs	r3, #1
}
 80029cc:	0018      	movs	r0, r3
 80029ce:	46bd      	mov	sp, r7
 80029d0:	b003      	add	sp, #12
 80029d2:	bd90      	pop	{r4, r7, pc}
 80029d4:	20000000 	.word	0x20000000
 80029d8:	20000008 	.word	0x20000008
 80029dc:	20000004 	.word	0x20000004

080029e0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80029e4:	4b05      	ldr	r3, [pc, #20]	; (80029fc <HAL_IncTick+0x1c>)
 80029e6:	781b      	ldrb	r3, [r3, #0]
 80029e8:	001a      	movs	r2, r3
 80029ea:	4b05      	ldr	r3, [pc, #20]	; (8002a00 <HAL_IncTick+0x20>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	18d2      	adds	r2, r2, r3
 80029f0:	4b03      	ldr	r3, [pc, #12]	; (8002a00 <HAL_IncTick+0x20>)
 80029f2:	601a      	str	r2, [r3, #0]
}
 80029f4:	46c0      	nop			; (mov r8, r8)
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bd80      	pop	{r7, pc}
 80029fa:	46c0      	nop			; (mov r8, r8)
 80029fc:	20000008 	.word	0x20000008
 8002a00:	200001e4 	.word	0x200001e4

08002a04 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	af00      	add	r7, sp, #0
  return uwTick;
 8002a08:	4b02      	ldr	r3, [pc, #8]	; (8002a14 <HAL_GetTick+0x10>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
}
 8002a0c:	0018      	movs	r0, r3
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bd80      	pop	{r7, pc}
 8002a12:	46c0      	nop			; (mov r8, r8)
 8002a14:	200001e4 	.word	0x200001e4

08002a18 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b082      	sub	sp, #8
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	0002      	movs	r2, r0
 8002a20:	1dfb      	adds	r3, r7, #7
 8002a22:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002a24:	1dfb      	adds	r3, r7, #7
 8002a26:	781b      	ldrb	r3, [r3, #0]
 8002a28:	2b7f      	cmp	r3, #127	; 0x7f
 8002a2a:	d809      	bhi.n	8002a40 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a2c:	1dfb      	adds	r3, r7, #7
 8002a2e:	781b      	ldrb	r3, [r3, #0]
 8002a30:	001a      	movs	r2, r3
 8002a32:	231f      	movs	r3, #31
 8002a34:	401a      	ands	r2, r3
 8002a36:	4b04      	ldr	r3, [pc, #16]	; (8002a48 <__NVIC_EnableIRQ+0x30>)
 8002a38:	2101      	movs	r1, #1
 8002a3a:	4091      	lsls	r1, r2
 8002a3c:	000a      	movs	r2, r1
 8002a3e:	601a      	str	r2, [r3, #0]
  }
}
 8002a40:	46c0      	nop			; (mov r8, r8)
 8002a42:	46bd      	mov	sp, r7
 8002a44:	b002      	add	sp, #8
 8002a46:	bd80      	pop	{r7, pc}
 8002a48:	e000e100 	.word	0xe000e100

08002a4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a4c:	b590      	push	{r4, r7, lr}
 8002a4e:	b083      	sub	sp, #12
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	0002      	movs	r2, r0
 8002a54:	6039      	str	r1, [r7, #0]
 8002a56:	1dfb      	adds	r3, r7, #7
 8002a58:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002a5a:	1dfb      	adds	r3, r7, #7
 8002a5c:	781b      	ldrb	r3, [r3, #0]
 8002a5e:	2b7f      	cmp	r3, #127	; 0x7f
 8002a60:	d828      	bhi.n	8002ab4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002a62:	4a2f      	ldr	r2, [pc, #188]	; (8002b20 <__NVIC_SetPriority+0xd4>)
 8002a64:	1dfb      	adds	r3, r7, #7
 8002a66:	781b      	ldrb	r3, [r3, #0]
 8002a68:	b25b      	sxtb	r3, r3
 8002a6a:	089b      	lsrs	r3, r3, #2
 8002a6c:	33c0      	adds	r3, #192	; 0xc0
 8002a6e:	009b      	lsls	r3, r3, #2
 8002a70:	589b      	ldr	r3, [r3, r2]
 8002a72:	1dfa      	adds	r2, r7, #7
 8002a74:	7812      	ldrb	r2, [r2, #0]
 8002a76:	0011      	movs	r1, r2
 8002a78:	2203      	movs	r2, #3
 8002a7a:	400a      	ands	r2, r1
 8002a7c:	00d2      	lsls	r2, r2, #3
 8002a7e:	21ff      	movs	r1, #255	; 0xff
 8002a80:	4091      	lsls	r1, r2
 8002a82:	000a      	movs	r2, r1
 8002a84:	43d2      	mvns	r2, r2
 8002a86:	401a      	ands	r2, r3
 8002a88:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	019b      	lsls	r3, r3, #6
 8002a8e:	22ff      	movs	r2, #255	; 0xff
 8002a90:	401a      	ands	r2, r3
 8002a92:	1dfb      	adds	r3, r7, #7
 8002a94:	781b      	ldrb	r3, [r3, #0]
 8002a96:	0018      	movs	r0, r3
 8002a98:	2303      	movs	r3, #3
 8002a9a:	4003      	ands	r3, r0
 8002a9c:	00db      	lsls	r3, r3, #3
 8002a9e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002aa0:	481f      	ldr	r0, [pc, #124]	; (8002b20 <__NVIC_SetPriority+0xd4>)
 8002aa2:	1dfb      	adds	r3, r7, #7
 8002aa4:	781b      	ldrb	r3, [r3, #0]
 8002aa6:	b25b      	sxtb	r3, r3
 8002aa8:	089b      	lsrs	r3, r3, #2
 8002aaa:	430a      	orrs	r2, r1
 8002aac:	33c0      	adds	r3, #192	; 0xc0
 8002aae:	009b      	lsls	r3, r3, #2
 8002ab0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002ab2:	e031      	b.n	8002b18 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002ab4:	4a1b      	ldr	r2, [pc, #108]	; (8002b24 <__NVIC_SetPriority+0xd8>)
 8002ab6:	1dfb      	adds	r3, r7, #7
 8002ab8:	781b      	ldrb	r3, [r3, #0]
 8002aba:	0019      	movs	r1, r3
 8002abc:	230f      	movs	r3, #15
 8002abe:	400b      	ands	r3, r1
 8002ac0:	3b08      	subs	r3, #8
 8002ac2:	089b      	lsrs	r3, r3, #2
 8002ac4:	3306      	adds	r3, #6
 8002ac6:	009b      	lsls	r3, r3, #2
 8002ac8:	18d3      	adds	r3, r2, r3
 8002aca:	3304      	adds	r3, #4
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	1dfa      	adds	r2, r7, #7
 8002ad0:	7812      	ldrb	r2, [r2, #0]
 8002ad2:	0011      	movs	r1, r2
 8002ad4:	2203      	movs	r2, #3
 8002ad6:	400a      	ands	r2, r1
 8002ad8:	00d2      	lsls	r2, r2, #3
 8002ada:	21ff      	movs	r1, #255	; 0xff
 8002adc:	4091      	lsls	r1, r2
 8002ade:	000a      	movs	r2, r1
 8002ae0:	43d2      	mvns	r2, r2
 8002ae2:	401a      	ands	r2, r3
 8002ae4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	019b      	lsls	r3, r3, #6
 8002aea:	22ff      	movs	r2, #255	; 0xff
 8002aec:	401a      	ands	r2, r3
 8002aee:	1dfb      	adds	r3, r7, #7
 8002af0:	781b      	ldrb	r3, [r3, #0]
 8002af2:	0018      	movs	r0, r3
 8002af4:	2303      	movs	r3, #3
 8002af6:	4003      	ands	r3, r0
 8002af8:	00db      	lsls	r3, r3, #3
 8002afa:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002afc:	4809      	ldr	r0, [pc, #36]	; (8002b24 <__NVIC_SetPriority+0xd8>)
 8002afe:	1dfb      	adds	r3, r7, #7
 8002b00:	781b      	ldrb	r3, [r3, #0]
 8002b02:	001c      	movs	r4, r3
 8002b04:	230f      	movs	r3, #15
 8002b06:	4023      	ands	r3, r4
 8002b08:	3b08      	subs	r3, #8
 8002b0a:	089b      	lsrs	r3, r3, #2
 8002b0c:	430a      	orrs	r2, r1
 8002b0e:	3306      	adds	r3, #6
 8002b10:	009b      	lsls	r3, r3, #2
 8002b12:	18c3      	adds	r3, r0, r3
 8002b14:	3304      	adds	r3, #4
 8002b16:	601a      	str	r2, [r3, #0]
}
 8002b18:	46c0      	nop			; (mov r8, r8)
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	b003      	add	sp, #12
 8002b1e:	bd90      	pop	{r4, r7, pc}
 8002b20:	e000e100 	.word	0xe000e100
 8002b24:	e000ed00 	.word	0xe000ed00

08002b28 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b082      	sub	sp, #8
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	1e5a      	subs	r2, r3, #1
 8002b34:	2380      	movs	r3, #128	; 0x80
 8002b36:	045b      	lsls	r3, r3, #17
 8002b38:	429a      	cmp	r2, r3
 8002b3a:	d301      	bcc.n	8002b40 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002b3c:	2301      	movs	r3, #1
 8002b3e:	e010      	b.n	8002b62 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002b40:	4b0a      	ldr	r3, [pc, #40]	; (8002b6c <SysTick_Config+0x44>)
 8002b42:	687a      	ldr	r2, [r7, #4]
 8002b44:	3a01      	subs	r2, #1
 8002b46:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002b48:	2301      	movs	r3, #1
 8002b4a:	425b      	negs	r3, r3
 8002b4c:	2103      	movs	r1, #3
 8002b4e:	0018      	movs	r0, r3
 8002b50:	f7ff ff7c 	bl	8002a4c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002b54:	4b05      	ldr	r3, [pc, #20]	; (8002b6c <SysTick_Config+0x44>)
 8002b56:	2200      	movs	r2, #0
 8002b58:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b5a:	4b04      	ldr	r3, [pc, #16]	; (8002b6c <SysTick_Config+0x44>)
 8002b5c:	2207      	movs	r2, #7
 8002b5e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002b60:	2300      	movs	r3, #0
}
 8002b62:	0018      	movs	r0, r3
 8002b64:	46bd      	mov	sp, r7
 8002b66:	b002      	add	sp, #8
 8002b68:	bd80      	pop	{r7, pc}
 8002b6a:	46c0      	nop			; (mov r8, r8)
 8002b6c:	e000e010 	.word	0xe000e010

08002b70 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b084      	sub	sp, #16
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	60b9      	str	r1, [r7, #8]
 8002b78:	607a      	str	r2, [r7, #4]
 8002b7a:	210f      	movs	r1, #15
 8002b7c:	187b      	adds	r3, r7, r1
 8002b7e:	1c02      	adds	r2, r0, #0
 8002b80:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8002b82:	68ba      	ldr	r2, [r7, #8]
 8002b84:	187b      	adds	r3, r7, r1
 8002b86:	781b      	ldrb	r3, [r3, #0]
 8002b88:	b25b      	sxtb	r3, r3
 8002b8a:	0011      	movs	r1, r2
 8002b8c:	0018      	movs	r0, r3
 8002b8e:	f7ff ff5d 	bl	8002a4c <__NVIC_SetPriority>
}
 8002b92:	46c0      	nop			; (mov r8, r8)
 8002b94:	46bd      	mov	sp, r7
 8002b96:	b004      	add	sp, #16
 8002b98:	bd80      	pop	{r7, pc}

08002b9a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b9a:	b580      	push	{r7, lr}
 8002b9c:	b082      	sub	sp, #8
 8002b9e:	af00      	add	r7, sp, #0
 8002ba0:	0002      	movs	r2, r0
 8002ba2:	1dfb      	adds	r3, r7, #7
 8002ba4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ba6:	1dfb      	adds	r3, r7, #7
 8002ba8:	781b      	ldrb	r3, [r3, #0]
 8002baa:	b25b      	sxtb	r3, r3
 8002bac:	0018      	movs	r0, r3
 8002bae:	f7ff ff33 	bl	8002a18 <__NVIC_EnableIRQ>
}
 8002bb2:	46c0      	nop			; (mov r8, r8)
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	b002      	add	sp, #8
 8002bb8:	bd80      	pop	{r7, pc}

08002bba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002bba:	b580      	push	{r7, lr}
 8002bbc:	b082      	sub	sp, #8
 8002bbe:	af00      	add	r7, sp, #0
 8002bc0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	0018      	movs	r0, r3
 8002bc6:	f7ff ffaf 	bl	8002b28 <SysTick_Config>
 8002bca:	0003      	movs	r3, r0
}
 8002bcc:	0018      	movs	r0, r3
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	b002      	add	sp, #8
 8002bd2:	bd80      	pop	{r7, pc}

08002bd4 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b082      	sub	sp, #8
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2221      	movs	r2, #33	; 0x21
 8002be0:	5c9b      	ldrb	r3, [r3, r2]
 8002be2:	b2db      	uxtb	r3, r3
 8002be4:	2b02      	cmp	r3, #2
 8002be6:	d008      	beq.n	8002bfa <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2204      	movs	r2, #4
 8002bec:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	2220      	movs	r2, #32
 8002bf2:	2100      	movs	r1, #0
 8002bf4:	5499      	strb	r1, [r3, r2]
    
    return HAL_ERROR;
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	e020      	b.n	8002c3c <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	681a      	ldr	r2, [r3, #0]
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	210e      	movs	r1, #14
 8002c06:	438a      	bics	r2, r1
 8002c08:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	681a      	ldr	r2, [r3, #0]
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	2101      	movs	r1, #1
 8002c16:	438a      	bics	r2, r1
 8002c18:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c22:	2101      	movs	r1, #1
 8002c24:	4091      	lsls	r1, r2
 8002c26:	000a      	movs	r2, r1
 8002c28:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	2221      	movs	r2, #33	; 0x21
 8002c2e:	2101      	movs	r1, #1
 8002c30:	5499      	strb	r1, [r3, r2]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	2220      	movs	r2, #32
 8002c36:	2100      	movs	r1, #0
 8002c38:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8002c3a:	2300      	movs	r3, #0
}
 8002c3c:	0018      	movs	r0, r3
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	b002      	add	sp, #8
 8002c42:	bd80      	pop	{r7, pc}

08002c44 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b084      	sub	sp, #16
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c4c:	210f      	movs	r1, #15
 8002c4e:	187b      	adds	r3, r7, r1
 8002c50:	2200      	movs	r2, #0
 8002c52:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2221      	movs	r2, #33	; 0x21
 8002c58:	5c9b      	ldrb	r3, [r3, r2]
 8002c5a:	b2db      	uxtb	r3, r3
 8002c5c:	2b02      	cmp	r3, #2
 8002c5e:	d006      	beq.n	8002c6e <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2204      	movs	r2, #4
 8002c64:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002c66:	187b      	adds	r3, r7, r1
 8002c68:	2201      	movs	r2, #1
 8002c6a:	701a      	strb	r2, [r3, #0]
 8002c6c:	e028      	b.n	8002cc0 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	681a      	ldr	r2, [r3, #0]
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	210e      	movs	r1, #14
 8002c7a:	438a      	bics	r2, r1
 8002c7c:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	681a      	ldr	r2, [r3, #0]
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	2101      	movs	r1, #1
 8002c8a:	438a      	bics	r2, r1
 8002c8c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c96:	2101      	movs	r1, #1
 8002c98:	4091      	lsls	r1, r2
 8002c9a:	000a      	movs	r2, r1
 8002c9c:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	2221      	movs	r2, #33	; 0x21
 8002ca2:	2101      	movs	r1, #1
 8002ca4:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	2220      	movs	r2, #32
 8002caa:	2100      	movs	r1, #0
 8002cac:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d004      	beq.n	8002cc0 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cba:	687a      	ldr	r2, [r7, #4]
 8002cbc:	0010      	movs	r0, r2
 8002cbe:	4798      	blx	r3
    } 
  }
  return status;
 8002cc0:	230f      	movs	r3, #15
 8002cc2:	18fb      	adds	r3, r7, r3
 8002cc4:	781b      	ldrb	r3, [r3, #0]
}
 8002cc6:	0018      	movs	r0, r3
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	b004      	add	sp, #16
 8002ccc:	bd80      	pop	{r7, pc}
	...

08002cd0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b086      	sub	sp, #24
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
 8002cd8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002cda:	2300      	movs	r3, #0
 8002cdc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002cde:	e149      	b.n	8002f74 <HAL_GPIO_Init+0x2a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	2101      	movs	r1, #1
 8002ce6:	697a      	ldr	r2, [r7, #20]
 8002ce8:	4091      	lsls	r1, r2
 8002cea:	000a      	movs	r2, r1
 8002cec:	4013      	ands	r3, r2
 8002cee:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d100      	bne.n	8002cf8 <HAL_GPIO_Init+0x28>
 8002cf6:	e13a      	b.n	8002f6e <HAL_GPIO_Init+0x29e>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	685b      	ldr	r3, [r3, #4]
 8002cfc:	2203      	movs	r2, #3
 8002cfe:	4013      	ands	r3, r2
 8002d00:	2b01      	cmp	r3, #1
 8002d02:	d005      	beq.n	8002d10 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	685b      	ldr	r3, [r3, #4]
 8002d08:	2203      	movs	r2, #3
 8002d0a:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002d0c:	2b02      	cmp	r3, #2
 8002d0e:	d130      	bne.n	8002d72 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	689b      	ldr	r3, [r3, #8]
 8002d14:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002d16:	697b      	ldr	r3, [r7, #20]
 8002d18:	005b      	lsls	r3, r3, #1
 8002d1a:	2203      	movs	r2, #3
 8002d1c:	409a      	lsls	r2, r3
 8002d1e:	0013      	movs	r3, r2
 8002d20:	43da      	mvns	r2, r3
 8002d22:	693b      	ldr	r3, [r7, #16]
 8002d24:	4013      	ands	r3, r2
 8002d26:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	68da      	ldr	r2, [r3, #12]
 8002d2c:	697b      	ldr	r3, [r7, #20]
 8002d2e:	005b      	lsls	r3, r3, #1
 8002d30:	409a      	lsls	r2, r3
 8002d32:	0013      	movs	r3, r2
 8002d34:	693a      	ldr	r2, [r7, #16]
 8002d36:	4313      	orrs	r3, r2
 8002d38:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	693a      	ldr	r2, [r7, #16]
 8002d3e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	685b      	ldr	r3, [r3, #4]
 8002d44:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002d46:	2201      	movs	r2, #1
 8002d48:	697b      	ldr	r3, [r7, #20]
 8002d4a:	409a      	lsls	r2, r3
 8002d4c:	0013      	movs	r3, r2
 8002d4e:	43da      	mvns	r2, r3
 8002d50:	693b      	ldr	r3, [r7, #16]
 8002d52:	4013      	ands	r3, r2
 8002d54:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	685b      	ldr	r3, [r3, #4]
 8002d5a:	091b      	lsrs	r3, r3, #4
 8002d5c:	2201      	movs	r2, #1
 8002d5e:	401a      	ands	r2, r3
 8002d60:	697b      	ldr	r3, [r7, #20]
 8002d62:	409a      	lsls	r2, r3
 8002d64:	0013      	movs	r3, r2
 8002d66:	693a      	ldr	r2, [r7, #16]
 8002d68:	4313      	orrs	r3, r2
 8002d6a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	693a      	ldr	r2, [r7, #16]
 8002d70:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	685b      	ldr	r3, [r3, #4]
 8002d76:	2203      	movs	r2, #3
 8002d78:	4013      	ands	r3, r2
 8002d7a:	2b03      	cmp	r3, #3
 8002d7c:	d017      	beq.n	8002dae <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	68db      	ldr	r3, [r3, #12]
 8002d82:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002d84:	697b      	ldr	r3, [r7, #20]
 8002d86:	005b      	lsls	r3, r3, #1
 8002d88:	2203      	movs	r2, #3
 8002d8a:	409a      	lsls	r2, r3
 8002d8c:	0013      	movs	r3, r2
 8002d8e:	43da      	mvns	r2, r3
 8002d90:	693b      	ldr	r3, [r7, #16]
 8002d92:	4013      	ands	r3, r2
 8002d94:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	689a      	ldr	r2, [r3, #8]
 8002d9a:	697b      	ldr	r3, [r7, #20]
 8002d9c:	005b      	lsls	r3, r3, #1
 8002d9e:	409a      	lsls	r2, r3
 8002da0:	0013      	movs	r3, r2
 8002da2:	693a      	ldr	r2, [r7, #16]
 8002da4:	4313      	orrs	r3, r2
 8002da6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	693a      	ldr	r2, [r7, #16]
 8002dac:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	685b      	ldr	r3, [r3, #4]
 8002db2:	2203      	movs	r2, #3
 8002db4:	4013      	ands	r3, r2
 8002db6:	2b02      	cmp	r3, #2
 8002db8:	d123      	bne.n	8002e02 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002dba:	697b      	ldr	r3, [r7, #20]
 8002dbc:	08da      	lsrs	r2, r3, #3
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	3208      	adds	r2, #8
 8002dc2:	0092      	lsls	r2, r2, #2
 8002dc4:	58d3      	ldr	r3, [r2, r3]
 8002dc6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002dc8:	697b      	ldr	r3, [r7, #20]
 8002dca:	2207      	movs	r2, #7
 8002dcc:	4013      	ands	r3, r2
 8002dce:	009b      	lsls	r3, r3, #2
 8002dd0:	220f      	movs	r2, #15
 8002dd2:	409a      	lsls	r2, r3
 8002dd4:	0013      	movs	r3, r2
 8002dd6:	43da      	mvns	r2, r3
 8002dd8:	693b      	ldr	r3, [r7, #16]
 8002dda:	4013      	ands	r3, r2
 8002ddc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	691a      	ldr	r2, [r3, #16]
 8002de2:	697b      	ldr	r3, [r7, #20]
 8002de4:	2107      	movs	r1, #7
 8002de6:	400b      	ands	r3, r1
 8002de8:	009b      	lsls	r3, r3, #2
 8002dea:	409a      	lsls	r2, r3
 8002dec:	0013      	movs	r3, r2
 8002dee:	693a      	ldr	r2, [r7, #16]
 8002df0:	4313      	orrs	r3, r2
 8002df2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002df4:	697b      	ldr	r3, [r7, #20]
 8002df6:	08da      	lsrs	r2, r3, #3
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	3208      	adds	r2, #8
 8002dfc:	0092      	lsls	r2, r2, #2
 8002dfe:	6939      	ldr	r1, [r7, #16]
 8002e00:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002e08:	697b      	ldr	r3, [r7, #20]
 8002e0a:	005b      	lsls	r3, r3, #1
 8002e0c:	2203      	movs	r2, #3
 8002e0e:	409a      	lsls	r2, r3
 8002e10:	0013      	movs	r3, r2
 8002e12:	43da      	mvns	r2, r3
 8002e14:	693b      	ldr	r3, [r7, #16]
 8002e16:	4013      	ands	r3, r2
 8002e18:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	685b      	ldr	r3, [r3, #4]
 8002e1e:	2203      	movs	r2, #3
 8002e20:	401a      	ands	r2, r3
 8002e22:	697b      	ldr	r3, [r7, #20]
 8002e24:	005b      	lsls	r3, r3, #1
 8002e26:	409a      	lsls	r2, r3
 8002e28:	0013      	movs	r3, r2
 8002e2a:	693a      	ldr	r2, [r7, #16]
 8002e2c:	4313      	orrs	r3, r2
 8002e2e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	693a      	ldr	r2, [r7, #16]
 8002e34:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	685a      	ldr	r2, [r3, #4]
 8002e3a:	23c0      	movs	r3, #192	; 0xc0
 8002e3c:	029b      	lsls	r3, r3, #10
 8002e3e:	4013      	ands	r3, r2
 8002e40:	d100      	bne.n	8002e44 <HAL_GPIO_Init+0x174>
 8002e42:	e094      	b.n	8002f6e <HAL_GPIO_Init+0x29e>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e44:	4b51      	ldr	r3, [pc, #324]	; (8002f8c <HAL_GPIO_Init+0x2bc>)
 8002e46:	699a      	ldr	r2, [r3, #24]
 8002e48:	4b50      	ldr	r3, [pc, #320]	; (8002f8c <HAL_GPIO_Init+0x2bc>)
 8002e4a:	2101      	movs	r1, #1
 8002e4c:	430a      	orrs	r2, r1
 8002e4e:	619a      	str	r2, [r3, #24]
 8002e50:	4b4e      	ldr	r3, [pc, #312]	; (8002f8c <HAL_GPIO_Init+0x2bc>)
 8002e52:	699b      	ldr	r3, [r3, #24]
 8002e54:	2201      	movs	r2, #1
 8002e56:	4013      	ands	r3, r2
 8002e58:	60bb      	str	r3, [r7, #8]
 8002e5a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002e5c:	4a4c      	ldr	r2, [pc, #304]	; (8002f90 <HAL_GPIO_Init+0x2c0>)
 8002e5e:	697b      	ldr	r3, [r7, #20]
 8002e60:	089b      	lsrs	r3, r3, #2
 8002e62:	3302      	adds	r3, #2
 8002e64:	009b      	lsls	r3, r3, #2
 8002e66:	589b      	ldr	r3, [r3, r2]
 8002e68:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002e6a:	697b      	ldr	r3, [r7, #20]
 8002e6c:	2203      	movs	r2, #3
 8002e6e:	4013      	ands	r3, r2
 8002e70:	009b      	lsls	r3, r3, #2
 8002e72:	220f      	movs	r2, #15
 8002e74:	409a      	lsls	r2, r3
 8002e76:	0013      	movs	r3, r2
 8002e78:	43da      	mvns	r2, r3
 8002e7a:	693b      	ldr	r3, [r7, #16]
 8002e7c:	4013      	ands	r3, r2
 8002e7e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002e80:	687a      	ldr	r2, [r7, #4]
 8002e82:	2390      	movs	r3, #144	; 0x90
 8002e84:	05db      	lsls	r3, r3, #23
 8002e86:	429a      	cmp	r2, r3
 8002e88:	d00d      	beq.n	8002ea6 <HAL_GPIO_Init+0x1d6>
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	4a41      	ldr	r2, [pc, #260]	; (8002f94 <HAL_GPIO_Init+0x2c4>)
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	d007      	beq.n	8002ea2 <HAL_GPIO_Init+0x1d2>
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	4a40      	ldr	r2, [pc, #256]	; (8002f98 <HAL_GPIO_Init+0x2c8>)
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d101      	bne.n	8002e9e <HAL_GPIO_Init+0x1ce>
 8002e9a:	2302      	movs	r3, #2
 8002e9c:	e004      	b.n	8002ea8 <HAL_GPIO_Init+0x1d8>
 8002e9e:	2305      	movs	r3, #5
 8002ea0:	e002      	b.n	8002ea8 <HAL_GPIO_Init+0x1d8>
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	e000      	b.n	8002ea8 <HAL_GPIO_Init+0x1d8>
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	697a      	ldr	r2, [r7, #20]
 8002eaa:	2103      	movs	r1, #3
 8002eac:	400a      	ands	r2, r1
 8002eae:	0092      	lsls	r2, r2, #2
 8002eb0:	4093      	lsls	r3, r2
 8002eb2:	693a      	ldr	r2, [r7, #16]
 8002eb4:	4313      	orrs	r3, r2
 8002eb6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002eb8:	4935      	ldr	r1, [pc, #212]	; (8002f90 <HAL_GPIO_Init+0x2c0>)
 8002eba:	697b      	ldr	r3, [r7, #20]
 8002ebc:	089b      	lsrs	r3, r3, #2
 8002ebe:	3302      	adds	r3, #2
 8002ec0:	009b      	lsls	r3, r3, #2
 8002ec2:	693a      	ldr	r2, [r7, #16]
 8002ec4:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002ec6:	4b35      	ldr	r3, [pc, #212]	; (8002f9c <HAL_GPIO_Init+0x2cc>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	43da      	mvns	r2, r3
 8002ed0:	693b      	ldr	r3, [r7, #16]
 8002ed2:	4013      	ands	r3, r2
 8002ed4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	685a      	ldr	r2, [r3, #4]
 8002eda:	2380      	movs	r3, #128	; 0x80
 8002edc:	025b      	lsls	r3, r3, #9
 8002ede:	4013      	ands	r3, r2
 8002ee0:	d003      	beq.n	8002eea <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8002ee2:	693a      	ldr	r2, [r7, #16]
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	4313      	orrs	r3, r2
 8002ee8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002eea:	4b2c      	ldr	r3, [pc, #176]	; (8002f9c <HAL_GPIO_Init+0x2cc>)
 8002eec:	693a      	ldr	r2, [r7, #16]
 8002eee:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8002ef0:	4b2a      	ldr	r3, [pc, #168]	; (8002f9c <HAL_GPIO_Init+0x2cc>)
 8002ef2:	685b      	ldr	r3, [r3, #4]
 8002ef4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	43da      	mvns	r2, r3
 8002efa:	693b      	ldr	r3, [r7, #16]
 8002efc:	4013      	ands	r3, r2
 8002efe:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	685a      	ldr	r2, [r3, #4]
 8002f04:	2380      	movs	r3, #128	; 0x80
 8002f06:	029b      	lsls	r3, r3, #10
 8002f08:	4013      	ands	r3, r2
 8002f0a:	d003      	beq.n	8002f14 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 8002f0c:	693a      	ldr	r2, [r7, #16]
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	4313      	orrs	r3, r2
 8002f12:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002f14:	4b21      	ldr	r3, [pc, #132]	; (8002f9c <HAL_GPIO_Init+0x2cc>)
 8002f16:	693a      	ldr	r2, [r7, #16]
 8002f18:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002f1a:	4b20      	ldr	r3, [pc, #128]	; (8002f9c <HAL_GPIO_Init+0x2cc>)
 8002f1c:	689b      	ldr	r3, [r3, #8]
 8002f1e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	43da      	mvns	r2, r3
 8002f24:	693b      	ldr	r3, [r7, #16]
 8002f26:	4013      	ands	r3, r2
 8002f28:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	685a      	ldr	r2, [r3, #4]
 8002f2e:	2380      	movs	r3, #128	; 0x80
 8002f30:	035b      	lsls	r3, r3, #13
 8002f32:	4013      	ands	r3, r2
 8002f34:	d003      	beq.n	8002f3e <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8002f36:	693a      	ldr	r2, [r7, #16]
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	4313      	orrs	r3, r2
 8002f3c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002f3e:	4b17      	ldr	r3, [pc, #92]	; (8002f9c <HAL_GPIO_Init+0x2cc>)
 8002f40:	693a      	ldr	r2, [r7, #16]
 8002f42:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8002f44:	4b15      	ldr	r3, [pc, #84]	; (8002f9c <HAL_GPIO_Init+0x2cc>)
 8002f46:	68db      	ldr	r3, [r3, #12]
 8002f48:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	43da      	mvns	r2, r3
 8002f4e:	693b      	ldr	r3, [r7, #16]
 8002f50:	4013      	ands	r3, r2
 8002f52:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	685a      	ldr	r2, [r3, #4]
 8002f58:	2380      	movs	r3, #128	; 0x80
 8002f5a:	039b      	lsls	r3, r3, #14
 8002f5c:	4013      	ands	r3, r2
 8002f5e:	d003      	beq.n	8002f68 <HAL_GPIO_Init+0x298>
        {
          temp |= iocurrent;
 8002f60:	693a      	ldr	r2, [r7, #16]
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	4313      	orrs	r3, r2
 8002f66:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002f68:	4b0c      	ldr	r3, [pc, #48]	; (8002f9c <HAL_GPIO_Init+0x2cc>)
 8002f6a:	693a      	ldr	r2, [r7, #16]
 8002f6c:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8002f6e:	697b      	ldr	r3, [r7, #20]
 8002f70:	3301      	adds	r3, #1
 8002f72:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	681a      	ldr	r2, [r3, #0]
 8002f78:	697b      	ldr	r3, [r7, #20]
 8002f7a:	40da      	lsrs	r2, r3
 8002f7c:	1e13      	subs	r3, r2, #0
 8002f7e:	d000      	beq.n	8002f82 <HAL_GPIO_Init+0x2b2>
 8002f80:	e6ae      	b.n	8002ce0 <HAL_GPIO_Init+0x10>
  } 
}
 8002f82:	46c0      	nop			; (mov r8, r8)
 8002f84:	46c0      	nop			; (mov r8, r8)
 8002f86:	46bd      	mov	sp, r7
 8002f88:	b006      	add	sp, #24
 8002f8a:	bd80      	pop	{r7, pc}
 8002f8c:	40021000 	.word	0x40021000
 8002f90:	40010000 	.word	0x40010000
 8002f94:	48000400 	.word	0x48000400
 8002f98:	48000800 	.word	0x48000800
 8002f9c:	40010400 	.word	0x40010400

08002fa0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b088      	sub	sp, #32
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d102      	bne.n	8002fb4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002fae:	2301      	movs	r3, #1
 8002fb0:	f000 fb76 	bl	80036a0 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	2201      	movs	r2, #1
 8002fba:	4013      	ands	r3, r2
 8002fbc:	d100      	bne.n	8002fc0 <HAL_RCC_OscConfig+0x20>
 8002fbe:	e08e      	b.n	80030de <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002fc0:	4bc5      	ldr	r3, [pc, #788]	; (80032d8 <HAL_RCC_OscConfig+0x338>)
 8002fc2:	685b      	ldr	r3, [r3, #4]
 8002fc4:	220c      	movs	r2, #12
 8002fc6:	4013      	ands	r3, r2
 8002fc8:	2b04      	cmp	r3, #4
 8002fca:	d00e      	beq.n	8002fea <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002fcc:	4bc2      	ldr	r3, [pc, #776]	; (80032d8 <HAL_RCC_OscConfig+0x338>)
 8002fce:	685b      	ldr	r3, [r3, #4]
 8002fd0:	220c      	movs	r2, #12
 8002fd2:	4013      	ands	r3, r2
 8002fd4:	2b08      	cmp	r3, #8
 8002fd6:	d117      	bne.n	8003008 <HAL_RCC_OscConfig+0x68>
 8002fd8:	4bbf      	ldr	r3, [pc, #764]	; (80032d8 <HAL_RCC_OscConfig+0x338>)
 8002fda:	685a      	ldr	r2, [r3, #4]
 8002fdc:	23c0      	movs	r3, #192	; 0xc0
 8002fde:	025b      	lsls	r3, r3, #9
 8002fe0:	401a      	ands	r2, r3
 8002fe2:	2380      	movs	r3, #128	; 0x80
 8002fe4:	025b      	lsls	r3, r3, #9
 8002fe6:	429a      	cmp	r2, r3
 8002fe8:	d10e      	bne.n	8003008 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fea:	4bbb      	ldr	r3, [pc, #748]	; (80032d8 <HAL_RCC_OscConfig+0x338>)
 8002fec:	681a      	ldr	r2, [r3, #0]
 8002fee:	2380      	movs	r3, #128	; 0x80
 8002ff0:	029b      	lsls	r3, r3, #10
 8002ff2:	4013      	ands	r3, r2
 8002ff4:	d100      	bne.n	8002ff8 <HAL_RCC_OscConfig+0x58>
 8002ff6:	e071      	b.n	80030dc <HAL_RCC_OscConfig+0x13c>
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	685b      	ldr	r3, [r3, #4]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d000      	beq.n	8003002 <HAL_RCC_OscConfig+0x62>
 8003000:	e06c      	b.n	80030dc <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8003002:	2301      	movs	r3, #1
 8003004:	f000 fb4c 	bl	80036a0 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	685b      	ldr	r3, [r3, #4]
 800300c:	2b01      	cmp	r3, #1
 800300e:	d107      	bne.n	8003020 <HAL_RCC_OscConfig+0x80>
 8003010:	4bb1      	ldr	r3, [pc, #708]	; (80032d8 <HAL_RCC_OscConfig+0x338>)
 8003012:	681a      	ldr	r2, [r3, #0]
 8003014:	4bb0      	ldr	r3, [pc, #704]	; (80032d8 <HAL_RCC_OscConfig+0x338>)
 8003016:	2180      	movs	r1, #128	; 0x80
 8003018:	0249      	lsls	r1, r1, #9
 800301a:	430a      	orrs	r2, r1
 800301c:	601a      	str	r2, [r3, #0]
 800301e:	e02f      	b.n	8003080 <HAL_RCC_OscConfig+0xe0>
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	685b      	ldr	r3, [r3, #4]
 8003024:	2b00      	cmp	r3, #0
 8003026:	d10c      	bne.n	8003042 <HAL_RCC_OscConfig+0xa2>
 8003028:	4bab      	ldr	r3, [pc, #684]	; (80032d8 <HAL_RCC_OscConfig+0x338>)
 800302a:	681a      	ldr	r2, [r3, #0]
 800302c:	4baa      	ldr	r3, [pc, #680]	; (80032d8 <HAL_RCC_OscConfig+0x338>)
 800302e:	49ab      	ldr	r1, [pc, #684]	; (80032dc <HAL_RCC_OscConfig+0x33c>)
 8003030:	400a      	ands	r2, r1
 8003032:	601a      	str	r2, [r3, #0]
 8003034:	4ba8      	ldr	r3, [pc, #672]	; (80032d8 <HAL_RCC_OscConfig+0x338>)
 8003036:	681a      	ldr	r2, [r3, #0]
 8003038:	4ba7      	ldr	r3, [pc, #668]	; (80032d8 <HAL_RCC_OscConfig+0x338>)
 800303a:	49a9      	ldr	r1, [pc, #676]	; (80032e0 <HAL_RCC_OscConfig+0x340>)
 800303c:	400a      	ands	r2, r1
 800303e:	601a      	str	r2, [r3, #0]
 8003040:	e01e      	b.n	8003080 <HAL_RCC_OscConfig+0xe0>
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	685b      	ldr	r3, [r3, #4]
 8003046:	2b05      	cmp	r3, #5
 8003048:	d10e      	bne.n	8003068 <HAL_RCC_OscConfig+0xc8>
 800304a:	4ba3      	ldr	r3, [pc, #652]	; (80032d8 <HAL_RCC_OscConfig+0x338>)
 800304c:	681a      	ldr	r2, [r3, #0]
 800304e:	4ba2      	ldr	r3, [pc, #648]	; (80032d8 <HAL_RCC_OscConfig+0x338>)
 8003050:	2180      	movs	r1, #128	; 0x80
 8003052:	02c9      	lsls	r1, r1, #11
 8003054:	430a      	orrs	r2, r1
 8003056:	601a      	str	r2, [r3, #0]
 8003058:	4b9f      	ldr	r3, [pc, #636]	; (80032d8 <HAL_RCC_OscConfig+0x338>)
 800305a:	681a      	ldr	r2, [r3, #0]
 800305c:	4b9e      	ldr	r3, [pc, #632]	; (80032d8 <HAL_RCC_OscConfig+0x338>)
 800305e:	2180      	movs	r1, #128	; 0x80
 8003060:	0249      	lsls	r1, r1, #9
 8003062:	430a      	orrs	r2, r1
 8003064:	601a      	str	r2, [r3, #0]
 8003066:	e00b      	b.n	8003080 <HAL_RCC_OscConfig+0xe0>
 8003068:	4b9b      	ldr	r3, [pc, #620]	; (80032d8 <HAL_RCC_OscConfig+0x338>)
 800306a:	681a      	ldr	r2, [r3, #0]
 800306c:	4b9a      	ldr	r3, [pc, #616]	; (80032d8 <HAL_RCC_OscConfig+0x338>)
 800306e:	499b      	ldr	r1, [pc, #620]	; (80032dc <HAL_RCC_OscConfig+0x33c>)
 8003070:	400a      	ands	r2, r1
 8003072:	601a      	str	r2, [r3, #0]
 8003074:	4b98      	ldr	r3, [pc, #608]	; (80032d8 <HAL_RCC_OscConfig+0x338>)
 8003076:	681a      	ldr	r2, [r3, #0]
 8003078:	4b97      	ldr	r3, [pc, #604]	; (80032d8 <HAL_RCC_OscConfig+0x338>)
 800307a:	4999      	ldr	r1, [pc, #612]	; (80032e0 <HAL_RCC_OscConfig+0x340>)
 800307c:	400a      	ands	r2, r1
 800307e:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	685b      	ldr	r3, [r3, #4]
 8003084:	2b00      	cmp	r3, #0
 8003086:	d014      	beq.n	80030b2 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003088:	f7ff fcbc 	bl	8002a04 <HAL_GetTick>
 800308c:	0003      	movs	r3, r0
 800308e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003090:	e008      	b.n	80030a4 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003092:	f7ff fcb7 	bl	8002a04 <HAL_GetTick>
 8003096:	0002      	movs	r2, r0
 8003098:	69bb      	ldr	r3, [r7, #24]
 800309a:	1ad3      	subs	r3, r2, r3
 800309c:	2b64      	cmp	r3, #100	; 0x64
 800309e:	d901      	bls.n	80030a4 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 80030a0:	2303      	movs	r3, #3
 80030a2:	e2fd      	b.n	80036a0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030a4:	4b8c      	ldr	r3, [pc, #560]	; (80032d8 <HAL_RCC_OscConfig+0x338>)
 80030a6:	681a      	ldr	r2, [r3, #0]
 80030a8:	2380      	movs	r3, #128	; 0x80
 80030aa:	029b      	lsls	r3, r3, #10
 80030ac:	4013      	ands	r3, r2
 80030ae:	d0f0      	beq.n	8003092 <HAL_RCC_OscConfig+0xf2>
 80030b0:	e015      	b.n	80030de <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030b2:	f7ff fca7 	bl	8002a04 <HAL_GetTick>
 80030b6:	0003      	movs	r3, r0
 80030b8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030ba:	e008      	b.n	80030ce <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80030bc:	f7ff fca2 	bl	8002a04 <HAL_GetTick>
 80030c0:	0002      	movs	r2, r0
 80030c2:	69bb      	ldr	r3, [r7, #24]
 80030c4:	1ad3      	subs	r3, r2, r3
 80030c6:	2b64      	cmp	r3, #100	; 0x64
 80030c8:	d901      	bls.n	80030ce <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 80030ca:	2303      	movs	r3, #3
 80030cc:	e2e8      	b.n	80036a0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030ce:	4b82      	ldr	r3, [pc, #520]	; (80032d8 <HAL_RCC_OscConfig+0x338>)
 80030d0:	681a      	ldr	r2, [r3, #0]
 80030d2:	2380      	movs	r3, #128	; 0x80
 80030d4:	029b      	lsls	r3, r3, #10
 80030d6:	4013      	ands	r3, r2
 80030d8:	d1f0      	bne.n	80030bc <HAL_RCC_OscConfig+0x11c>
 80030da:	e000      	b.n	80030de <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030dc:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	2202      	movs	r2, #2
 80030e4:	4013      	ands	r3, r2
 80030e6:	d100      	bne.n	80030ea <HAL_RCC_OscConfig+0x14a>
 80030e8:	e06c      	b.n	80031c4 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80030ea:	4b7b      	ldr	r3, [pc, #492]	; (80032d8 <HAL_RCC_OscConfig+0x338>)
 80030ec:	685b      	ldr	r3, [r3, #4]
 80030ee:	220c      	movs	r2, #12
 80030f0:	4013      	ands	r3, r2
 80030f2:	d00e      	beq.n	8003112 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80030f4:	4b78      	ldr	r3, [pc, #480]	; (80032d8 <HAL_RCC_OscConfig+0x338>)
 80030f6:	685b      	ldr	r3, [r3, #4]
 80030f8:	220c      	movs	r2, #12
 80030fa:	4013      	ands	r3, r2
 80030fc:	2b08      	cmp	r3, #8
 80030fe:	d11f      	bne.n	8003140 <HAL_RCC_OscConfig+0x1a0>
 8003100:	4b75      	ldr	r3, [pc, #468]	; (80032d8 <HAL_RCC_OscConfig+0x338>)
 8003102:	685a      	ldr	r2, [r3, #4]
 8003104:	23c0      	movs	r3, #192	; 0xc0
 8003106:	025b      	lsls	r3, r3, #9
 8003108:	401a      	ands	r2, r3
 800310a:	2380      	movs	r3, #128	; 0x80
 800310c:	021b      	lsls	r3, r3, #8
 800310e:	429a      	cmp	r2, r3
 8003110:	d116      	bne.n	8003140 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003112:	4b71      	ldr	r3, [pc, #452]	; (80032d8 <HAL_RCC_OscConfig+0x338>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	2202      	movs	r2, #2
 8003118:	4013      	ands	r3, r2
 800311a:	d005      	beq.n	8003128 <HAL_RCC_OscConfig+0x188>
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	68db      	ldr	r3, [r3, #12]
 8003120:	2b01      	cmp	r3, #1
 8003122:	d001      	beq.n	8003128 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8003124:	2301      	movs	r3, #1
 8003126:	e2bb      	b.n	80036a0 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003128:	4b6b      	ldr	r3, [pc, #428]	; (80032d8 <HAL_RCC_OscConfig+0x338>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	22f8      	movs	r2, #248	; 0xf8
 800312e:	4393      	bics	r3, r2
 8003130:	0019      	movs	r1, r3
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	691b      	ldr	r3, [r3, #16]
 8003136:	00da      	lsls	r2, r3, #3
 8003138:	4b67      	ldr	r3, [pc, #412]	; (80032d8 <HAL_RCC_OscConfig+0x338>)
 800313a:	430a      	orrs	r2, r1
 800313c:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800313e:	e041      	b.n	80031c4 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	68db      	ldr	r3, [r3, #12]
 8003144:	2b00      	cmp	r3, #0
 8003146:	d024      	beq.n	8003192 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003148:	4b63      	ldr	r3, [pc, #396]	; (80032d8 <HAL_RCC_OscConfig+0x338>)
 800314a:	681a      	ldr	r2, [r3, #0]
 800314c:	4b62      	ldr	r3, [pc, #392]	; (80032d8 <HAL_RCC_OscConfig+0x338>)
 800314e:	2101      	movs	r1, #1
 8003150:	430a      	orrs	r2, r1
 8003152:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003154:	f7ff fc56 	bl	8002a04 <HAL_GetTick>
 8003158:	0003      	movs	r3, r0
 800315a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800315c:	e008      	b.n	8003170 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800315e:	f7ff fc51 	bl	8002a04 <HAL_GetTick>
 8003162:	0002      	movs	r2, r0
 8003164:	69bb      	ldr	r3, [r7, #24]
 8003166:	1ad3      	subs	r3, r2, r3
 8003168:	2b02      	cmp	r3, #2
 800316a:	d901      	bls.n	8003170 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800316c:	2303      	movs	r3, #3
 800316e:	e297      	b.n	80036a0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003170:	4b59      	ldr	r3, [pc, #356]	; (80032d8 <HAL_RCC_OscConfig+0x338>)
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	2202      	movs	r2, #2
 8003176:	4013      	ands	r3, r2
 8003178:	d0f1      	beq.n	800315e <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800317a:	4b57      	ldr	r3, [pc, #348]	; (80032d8 <HAL_RCC_OscConfig+0x338>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	22f8      	movs	r2, #248	; 0xf8
 8003180:	4393      	bics	r3, r2
 8003182:	0019      	movs	r1, r3
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	691b      	ldr	r3, [r3, #16]
 8003188:	00da      	lsls	r2, r3, #3
 800318a:	4b53      	ldr	r3, [pc, #332]	; (80032d8 <HAL_RCC_OscConfig+0x338>)
 800318c:	430a      	orrs	r2, r1
 800318e:	601a      	str	r2, [r3, #0]
 8003190:	e018      	b.n	80031c4 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003192:	4b51      	ldr	r3, [pc, #324]	; (80032d8 <HAL_RCC_OscConfig+0x338>)
 8003194:	681a      	ldr	r2, [r3, #0]
 8003196:	4b50      	ldr	r3, [pc, #320]	; (80032d8 <HAL_RCC_OscConfig+0x338>)
 8003198:	2101      	movs	r1, #1
 800319a:	438a      	bics	r2, r1
 800319c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800319e:	f7ff fc31 	bl	8002a04 <HAL_GetTick>
 80031a2:	0003      	movs	r3, r0
 80031a4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031a6:	e008      	b.n	80031ba <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80031a8:	f7ff fc2c 	bl	8002a04 <HAL_GetTick>
 80031ac:	0002      	movs	r2, r0
 80031ae:	69bb      	ldr	r3, [r7, #24]
 80031b0:	1ad3      	subs	r3, r2, r3
 80031b2:	2b02      	cmp	r3, #2
 80031b4:	d901      	bls.n	80031ba <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 80031b6:	2303      	movs	r3, #3
 80031b8:	e272      	b.n	80036a0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031ba:	4b47      	ldr	r3, [pc, #284]	; (80032d8 <HAL_RCC_OscConfig+0x338>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	2202      	movs	r2, #2
 80031c0:	4013      	ands	r3, r2
 80031c2:	d1f1      	bne.n	80031a8 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	2208      	movs	r2, #8
 80031ca:	4013      	ands	r3, r2
 80031cc:	d036      	beq.n	800323c <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	69db      	ldr	r3, [r3, #28]
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d019      	beq.n	800320a <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80031d6:	4b40      	ldr	r3, [pc, #256]	; (80032d8 <HAL_RCC_OscConfig+0x338>)
 80031d8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80031da:	4b3f      	ldr	r3, [pc, #252]	; (80032d8 <HAL_RCC_OscConfig+0x338>)
 80031dc:	2101      	movs	r1, #1
 80031de:	430a      	orrs	r2, r1
 80031e0:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031e2:	f7ff fc0f 	bl	8002a04 <HAL_GetTick>
 80031e6:	0003      	movs	r3, r0
 80031e8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031ea:	e008      	b.n	80031fe <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80031ec:	f7ff fc0a 	bl	8002a04 <HAL_GetTick>
 80031f0:	0002      	movs	r2, r0
 80031f2:	69bb      	ldr	r3, [r7, #24]
 80031f4:	1ad3      	subs	r3, r2, r3
 80031f6:	2b02      	cmp	r3, #2
 80031f8:	d901      	bls.n	80031fe <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 80031fa:	2303      	movs	r3, #3
 80031fc:	e250      	b.n	80036a0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031fe:	4b36      	ldr	r3, [pc, #216]	; (80032d8 <HAL_RCC_OscConfig+0x338>)
 8003200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003202:	2202      	movs	r2, #2
 8003204:	4013      	ands	r3, r2
 8003206:	d0f1      	beq.n	80031ec <HAL_RCC_OscConfig+0x24c>
 8003208:	e018      	b.n	800323c <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800320a:	4b33      	ldr	r3, [pc, #204]	; (80032d8 <HAL_RCC_OscConfig+0x338>)
 800320c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800320e:	4b32      	ldr	r3, [pc, #200]	; (80032d8 <HAL_RCC_OscConfig+0x338>)
 8003210:	2101      	movs	r1, #1
 8003212:	438a      	bics	r2, r1
 8003214:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003216:	f7ff fbf5 	bl	8002a04 <HAL_GetTick>
 800321a:	0003      	movs	r3, r0
 800321c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800321e:	e008      	b.n	8003232 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003220:	f7ff fbf0 	bl	8002a04 <HAL_GetTick>
 8003224:	0002      	movs	r2, r0
 8003226:	69bb      	ldr	r3, [r7, #24]
 8003228:	1ad3      	subs	r3, r2, r3
 800322a:	2b02      	cmp	r3, #2
 800322c:	d901      	bls.n	8003232 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 800322e:	2303      	movs	r3, #3
 8003230:	e236      	b.n	80036a0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003232:	4b29      	ldr	r3, [pc, #164]	; (80032d8 <HAL_RCC_OscConfig+0x338>)
 8003234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003236:	2202      	movs	r2, #2
 8003238:	4013      	ands	r3, r2
 800323a:	d1f1      	bne.n	8003220 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	2204      	movs	r2, #4
 8003242:	4013      	ands	r3, r2
 8003244:	d100      	bne.n	8003248 <HAL_RCC_OscConfig+0x2a8>
 8003246:	e0b5      	b.n	80033b4 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003248:	201f      	movs	r0, #31
 800324a:	183b      	adds	r3, r7, r0
 800324c:	2200      	movs	r2, #0
 800324e:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003250:	4b21      	ldr	r3, [pc, #132]	; (80032d8 <HAL_RCC_OscConfig+0x338>)
 8003252:	69da      	ldr	r2, [r3, #28]
 8003254:	2380      	movs	r3, #128	; 0x80
 8003256:	055b      	lsls	r3, r3, #21
 8003258:	4013      	ands	r3, r2
 800325a:	d110      	bne.n	800327e <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800325c:	4b1e      	ldr	r3, [pc, #120]	; (80032d8 <HAL_RCC_OscConfig+0x338>)
 800325e:	69da      	ldr	r2, [r3, #28]
 8003260:	4b1d      	ldr	r3, [pc, #116]	; (80032d8 <HAL_RCC_OscConfig+0x338>)
 8003262:	2180      	movs	r1, #128	; 0x80
 8003264:	0549      	lsls	r1, r1, #21
 8003266:	430a      	orrs	r2, r1
 8003268:	61da      	str	r2, [r3, #28]
 800326a:	4b1b      	ldr	r3, [pc, #108]	; (80032d8 <HAL_RCC_OscConfig+0x338>)
 800326c:	69da      	ldr	r2, [r3, #28]
 800326e:	2380      	movs	r3, #128	; 0x80
 8003270:	055b      	lsls	r3, r3, #21
 8003272:	4013      	ands	r3, r2
 8003274:	60fb      	str	r3, [r7, #12]
 8003276:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003278:	183b      	adds	r3, r7, r0
 800327a:	2201      	movs	r2, #1
 800327c:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800327e:	4b19      	ldr	r3, [pc, #100]	; (80032e4 <HAL_RCC_OscConfig+0x344>)
 8003280:	681a      	ldr	r2, [r3, #0]
 8003282:	2380      	movs	r3, #128	; 0x80
 8003284:	005b      	lsls	r3, r3, #1
 8003286:	4013      	ands	r3, r2
 8003288:	d11a      	bne.n	80032c0 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800328a:	4b16      	ldr	r3, [pc, #88]	; (80032e4 <HAL_RCC_OscConfig+0x344>)
 800328c:	681a      	ldr	r2, [r3, #0]
 800328e:	4b15      	ldr	r3, [pc, #84]	; (80032e4 <HAL_RCC_OscConfig+0x344>)
 8003290:	2180      	movs	r1, #128	; 0x80
 8003292:	0049      	lsls	r1, r1, #1
 8003294:	430a      	orrs	r2, r1
 8003296:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003298:	f7ff fbb4 	bl	8002a04 <HAL_GetTick>
 800329c:	0003      	movs	r3, r0
 800329e:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032a0:	e008      	b.n	80032b4 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032a2:	f7ff fbaf 	bl	8002a04 <HAL_GetTick>
 80032a6:	0002      	movs	r2, r0
 80032a8:	69bb      	ldr	r3, [r7, #24]
 80032aa:	1ad3      	subs	r3, r2, r3
 80032ac:	2b64      	cmp	r3, #100	; 0x64
 80032ae:	d901      	bls.n	80032b4 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 80032b0:	2303      	movs	r3, #3
 80032b2:	e1f5      	b.n	80036a0 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032b4:	4b0b      	ldr	r3, [pc, #44]	; (80032e4 <HAL_RCC_OscConfig+0x344>)
 80032b6:	681a      	ldr	r2, [r3, #0]
 80032b8:	2380      	movs	r3, #128	; 0x80
 80032ba:	005b      	lsls	r3, r3, #1
 80032bc:	4013      	ands	r3, r2
 80032be:	d0f0      	beq.n	80032a2 <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	689b      	ldr	r3, [r3, #8]
 80032c4:	2b01      	cmp	r3, #1
 80032c6:	d10f      	bne.n	80032e8 <HAL_RCC_OscConfig+0x348>
 80032c8:	4b03      	ldr	r3, [pc, #12]	; (80032d8 <HAL_RCC_OscConfig+0x338>)
 80032ca:	6a1a      	ldr	r2, [r3, #32]
 80032cc:	4b02      	ldr	r3, [pc, #8]	; (80032d8 <HAL_RCC_OscConfig+0x338>)
 80032ce:	2101      	movs	r1, #1
 80032d0:	430a      	orrs	r2, r1
 80032d2:	621a      	str	r2, [r3, #32]
 80032d4:	e036      	b.n	8003344 <HAL_RCC_OscConfig+0x3a4>
 80032d6:	46c0      	nop			; (mov r8, r8)
 80032d8:	40021000 	.word	0x40021000
 80032dc:	fffeffff 	.word	0xfffeffff
 80032e0:	fffbffff 	.word	0xfffbffff
 80032e4:	40007000 	.word	0x40007000
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	689b      	ldr	r3, [r3, #8]
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d10c      	bne.n	800330a <HAL_RCC_OscConfig+0x36a>
 80032f0:	4bca      	ldr	r3, [pc, #808]	; (800361c <HAL_RCC_OscConfig+0x67c>)
 80032f2:	6a1a      	ldr	r2, [r3, #32]
 80032f4:	4bc9      	ldr	r3, [pc, #804]	; (800361c <HAL_RCC_OscConfig+0x67c>)
 80032f6:	2101      	movs	r1, #1
 80032f8:	438a      	bics	r2, r1
 80032fa:	621a      	str	r2, [r3, #32]
 80032fc:	4bc7      	ldr	r3, [pc, #796]	; (800361c <HAL_RCC_OscConfig+0x67c>)
 80032fe:	6a1a      	ldr	r2, [r3, #32]
 8003300:	4bc6      	ldr	r3, [pc, #792]	; (800361c <HAL_RCC_OscConfig+0x67c>)
 8003302:	2104      	movs	r1, #4
 8003304:	438a      	bics	r2, r1
 8003306:	621a      	str	r2, [r3, #32]
 8003308:	e01c      	b.n	8003344 <HAL_RCC_OscConfig+0x3a4>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	689b      	ldr	r3, [r3, #8]
 800330e:	2b05      	cmp	r3, #5
 8003310:	d10c      	bne.n	800332c <HAL_RCC_OscConfig+0x38c>
 8003312:	4bc2      	ldr	r3, [pc, #776]	; (800361c <HAL_RCC_OscConfig+0x67c>)
 8003314:	6a1a      	ldr	r2, [r3, #32]
 8003316:	4bc1      	ldr	r3, [pc, #772]	; (800361c <HAL_RCC_OscConfig+0x67c>)
 8003318:	2104      	movs	r1, #4
 800331a:	430a      	orrs	r2, r1
 800331c:	621a      	str	r2, [r3, #32]
 800331e:	4bbf      	ldr	r3, [pc, #764]	; (800361c <HAL_RCC_OscConfig+0x67c>)
 8003320:	6a1a      	ldr	r2, [r3, #32]
 8003322:	4bbe      	ldr	r3, [pc, #760]	; (800361c <HAL_RCC_OscConfig+0x67c>)
 8003324:	2101      	movs	r1, #1
 8003326:	430a      	orrs	r2, r1
 8003328:	621a      	str	r2, [r3, #32]
 800332a:	e00b      	b.n	8003344 <HAL_RCC_OscConfig+0x3a4>
 800332c:	4bbb      	ldr	r3, [pc, #748]	; (800361c <HAL_RCC_OscConfig+0x67c>)
 800332e:	6a1a      	ldr	r2, [r3, #32]
 8003330:	4bba      	ldr	r3, [pc, #744]	; (800361c <HAL_RCC_OscConfig+0x67c>)
 8003332:	2101      	movs	r1, #1
 8003334:	438a      	bics	r2, r1
 8003336:	621a      	str	r2, [r3, #32]
 8003338:	4bb8      	ldr	r3, [pc, #736]	; (800361c <HAL_RCC_OscConfig+0x67c>)
 800333a:	6a1a      	ldr	r2, [r3, #32]
 800333c:	4bb7      	ldr	r3, [pc, #732]	; (800361c <HAL_RCC_OscConfig+0x67c>)
 800333e:	2104      	movs	r1, #4
 8003340:	438a      	bics	r2, r1
 8003342:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	689b      	ldr	r3, [r3, #8]
 8003348:	2b00      	cmp	r3, #0
 800334a:	d014      	beq.n	8003376 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800334c:	f7ff fb5a 	bl	8002a04 <HAL_GetTick>
 8003350:	0003      	movs	r3, r0
 8003352:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003354:	e009      	b.n	800336a <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003356:	f7ff fb55 	bl	8002a04 <HAL_GetTick>
 800335a:	0002      	movs	r2, r0
 800335c:	69bb      	ldr	r3, [r7, #24]
 800335e:	1ad3      	subs	r3, r2, r3
 8003360:	4aaf      	ldr	r2, [pc, #700]	; (8003620 <HAL_RCC_OscConfig+0x680>)
 8003362:	4293      	cmp	r3, r2
 8003364:	d901      	bls.n	800336a <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8003366:	2303      	movs	r3, #3
 8003368:	e19a      	b.n	80036a0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800336a:	4bac      	ldr	r3, [pc, #688]	; (800361c <HAL_RCC_OscConfig+0x67c>)
 800336c:	6a1b      	ldr	r3, [r3, #32]
 800336e:	2202      	movs	r2, #2
 8003370:	4013      	ands	r3, r2
 8003372:	d0f0      	beq.n	8003356 <HAL_RCC_OscConfig+0x3b6>
 8003374:	e013      	b.n	800339e <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003376:	f7ff fb45 	bl	8002a04 <HAL_GetTick>
 800337a:	0003      	movs	r3, r0
 800337c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800337e:	e009      	b.n	8003394 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003380:	f7ff fb40 	bl	8002a04 <HAL_GetTick>
 8003384:	0002      	movs	r2, r0
 8003386:	69bb      	ldr	r3, [r7, #24]
 8003388:	1ad3      	subs	r3, r2, r3
 800338a:	4aa5      	ldr	r2, [pc, #660]	; (8003620 <HAL_RCC_OscConfig+0x680>)
 800338c:	4293      	cmp	r3, r2
 800338e:	d901      	bls.n	8003394 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8003390:	2303      	movs	r3, #3
 8003392:	e185      	b.n	80036a0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003394:	4ba1      	ldr	r3, [pc, #644]	; (800361c <HAL_RCC_OscConfig+0x67c>)
 8003396:	6a1b      	ldr	r3, [r3, #32]
 8003398:	2202      	movs	r2, #2
 800339a:	4013      	ands	r3, r2
 800339c:	d1f0      	bne.n	8003380 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800339e:	231f      	movs	r3, #31
 80033a0:	18fb      	adds	r3, r7, r3
 80033a2:	781b      	ldrb	r3, [r3, #0]
 80033a4:	2b01      	cmp	r3, #1
 80033a6:	d105      	bne.n	80033b4 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80033a8:	4b9c      	ldr	r3, [pc, #624]	; (800361c <HAL_RCC_OscConfig+0x67c>)
 80033aa:	69da      	ldr	r2, [r3, #28]
 80033ac:	4b9b      	ldr	r3, [pc, #620]	; (800361c <HAL_RCC_OscConfig+0x67c>)
 80033ae:	499d      	ldr	r1, [pc, #628]	; (8003624 <HAL_RCC_OscConfig+0x684>)
 80033b0:	400a      	ands	r2, r1
 80033b2:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	2210      	movs	r2, #16
 80033ba:	4013      	ands	r3, r2
 80033bc:	d063      	beq.n	8003486 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	695b      	ldr	r3, [r3, #20]
 80033c2:	2b01      	cmp	r3, #1
 80033c4:	d12a      	bne.n	800341c <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80033c6:	4b95      	ldr	r3, [pc, #596]	; (800361c <HAL_RCC_OscConfig+0x67c>)
 80033c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80033ca:	4b94      	ldr	r3, [pc, #592]	; (800361c <HAL_RCC_OscConfig+0x67c>)
 80033cc:	2104      	movs	r1, #4
 80033ce:	430a      	orrs	r2, r1
 80033d0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80033d2:	4b92      	ldr	r3, [pc, #584]	; (800361c <HAL_RCC_OscConfig+0x67c>)
 80033d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80033d6:	4b91      	ldr	r3, [pc, #580]	; (800361c <HAL_RCC_OscConfig+0x67c>)
 80033d8:	2101      	movs	r1, #1
 80033da:	430a      	orrs	r2, r1
 80033dc:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033de:	f7ff fb11 	bl	8002a04 <HAL_GetTick>
 80033e2:	0003      	movs	r3, r0
 80033e4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80033e6:	e008      	b.n	80033fa <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80033e8:	f7ff fb0c 	bl	8002a04 <HAL_GetTick>
 80033ec:	0002      	movs	r2, r0
 80033ee:	69bb      	ldr	r3, [r7, #24]
 80033f0:	1ad3      	subs	r3, r2, r3
 80033f2:	2b02      	cmp	r3, #2
 80033f4:	d901      	bls.n	80033fa <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 80033f6:	2303      	movs	r3, #3
 80033f8:	e152      	b.n	80036a0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80033fa:	4b88      	ldr	r3, [pc, #544]	; (800361c <HAL_RCC_OscConfig+0x67c>)
 80033fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033fe:	2202      	movs	r2, #2
 8003400:	4013      	ands	r3, r2
 8003402:	d0f1      	beq.n	80033e8 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8003404:	4b85      	ldr	r3, [pc, #532]	; (800361c <HAL_RCC_OscConfig+0x67c>)
 8003406:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003408:	22f8      	movs	r2, #248	; 0xf8
 800340a:	4393      	bics	r3, r2
 800340c:	0019      	movs	r1, r3
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	699b      	ldr	r3, [r3, #24]
 8003412:	00da      	lsls	r2, r3, #3
 8003414:	4b81      	ldr	r3, [pc, #516]	; (800361c <HAL_RCC_OscConfig+0x67c>)
 8003416:	430a      	orrs	r2, r1
 8003418:	635a      	str	r2, [r3, #52]	; 0x34
 800341a:	e034      	b.n	8003486 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	695b      	ldr	r3, [r3, #20]
 8003420:	3305      	adds	r3, #5
 8003422:	d111      	bne.n	8003448 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8003424:	4b7d      	ldr	r3, [pc, #500]	; (800361c <HAL_RCC_OscConfig+0x67c>)
 8003426:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003428:	4b7c      	ldr	r3, [pc, #496]	; (800361c <HAL_RCC_OscConfig+0x67c>)
 800342a:	2104      	movs	r1, #4
 800342c:	438a      	bics	r2, r1
 800342e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8003430:	4b7a      	ldr	r3, [pc, #488]	; (800361c <HAL_RCC_OscConfig+0x67c>)
 8003432:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003434:	22f8      	movs	r2, #248	; 0xf8
 8003436:	4393      	bics	r3, r2
 8003438:	0019      	movs	r1, r3
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	699b      	ldr	r3, [r3, #24]
 800343e:	00da      	lsls	r2, r3, #3
 8003440:	4b76      	ldr	r3, [pc, #472]	; (800361c <HAL_RCC_OscConfig+0x67c>)
 8003442:	430a      	orrs	r2, r1
 8003444:	635a      	str	r2, [r3, #52]	; 0x34
 8003446:	e01e      	b.n	8003486 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8003448:	4b74      	ldr	r3, [pc, #464]	; (800361c <HAL_RCC_OscConfig+0x67c>)
 800344a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800344c:	4b73      	ldr	r3, [pc, #460]	; (800361c <HAL_RCC_OscConfig+0x67c>)
 800344e:	2104      	movs	r1, #4
 8003450:	430a      	orrs	r2, r1
 8003452:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8003454:	4b71      	ldr	r3, [pc, #452]	; (800361c <HAL_RCC_OscConfig+0x67c>)
 8003456:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003458:	4b70      	ldr	r3, [pc, #448]	; (800361c <HAL_RCC_OscConfig+0x67c>)
 800345a:	2101      	movs	r1, #1
 800345c:	438a      	bics	r2, r1
 800345e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003460:	f7ff fad0 	bl	8002a04 <HAL_GetTick>
 8003464:	0003      	movs	r3, r0
 8003466:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003468:	e008      	b.n	800347c <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800346a:	f7ff facb 	bl	8002a04 <HAL_GetTick>
 800346e:	0002      	movs	r2, r0
 8003470:	69bb      	ldr	r3, [r7, #24]
 8003472:	1ad3      	subs	r3, r2, r3
 8003474:	2b02      	cmp	r3, #2
 8003476:	d901      	bls.n	800347c <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8003478:	2303      	movs	r3, #3
 800347a:	e111      	b.n	80036a0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800347c:	4b67      	ldr	r3, [pc, #412]	; (800361c <HAL_RCC_OscConfig+0x67c>)
 800347e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003480:	2202      	movs	r2, #2
 8003482:	4013      	ands	r3, r2
 8003484:	d1f1      	bne.n	800346a <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	2220      	movs	r2, #32
 800348c:	4013      	ands	r3, r2
 800348e:	d05c      	beq.n	800354a <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8003490:	4b62      	ldr	r3, [pc, #392]	; (800361c <HAL_RCC_OscConfig+0x67c>)
 8003492:	685b      	ldr	r3, [r3, #4]
 8003494:	220c      	movs	r2, #12
 8003496:	4013      	ands	r3, r2
 8003498:	2b0c      	cmp	r3, #12
 800349a:	d00e      	beq.n	80034ba <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 800349c:	4b5f      	ldr	r3, [pc, #380]	; (800361c <HAL_RCC_OscConfig+0x67c>)
 800349e:	685b      	ldr	r3, [r3, #4]
 80034a0:	220c      	movs	r2, #12
 80034a2:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80034a4:	2b08      	cmp	r3, #8
 80034a6:	d114      	bne.n	80034d2 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80034a8:	4b5c      	ldr	r3, [pc, #368]	; (800361c <HAL_RCC_OscConfig+0x67c>)
 80034aa:	685a      	ldr	r2, [r3, #4]
 80034ac:	23c0      	movs	r3, #192	; 0xc0
 80034ae:	025b      	lsls	r3, r3, #9
 80034b0:	401a      	ands	r2, r3
 80034b2:	23c0      	movs	r3, #192	; 0xc0
 80034b4:	025b      	lsls	r3, r3, #9
 80034b6:	429a      	cmp	r2, r3
 80034b8:	d10b      	bne.n	80034d2 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80034ba:	4b58      	ldr	r3, [pc, #352]	; (800361c <HAL_RCC_OscConfig+0x67c>)
 80034bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80034be:	2380      	movs	r3, #128	; 0x80
 80034c0:	025b      	lsls	r3, r3, #9
 80034c2:	4013      	ands	r3, r2
 80034c4:	d040      	beq.n	8003548 <HAL_RCC_OscConfig+0x5a8>
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6a1b      	ldr	r3, [r3, #32]
 80034ca:	2b01      	cmp	r3, #1
 80034cc:	d03c      	beq.n	8003548 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 80034ce:	2301      	movs	r3, #1
 80034d0:	e0e6      	b.n	80036a0 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6a1b      	ldr	r3, [r3, #32]
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d01b      	beq.n	8003512 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80034da:	4b50      	ldr	r3, [pc, #320]	; (800361c <HAL_RCC_OscConfig+0x67c>)
 80034dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80034de:	4b4f      	ldr	r3, [pc, #316]	; (800361c <HAL_RCC_OscConfig+0x67c>)
 80034e0:	2180      	movs	r1, #128	; 0x80
 80034e2:	0249      	lsls	r1, r1, #9
 80034e4:	430a      	orrs	r2, r1
 80034e6:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034e8:	f7ff fa8c 	bl	8002a04 <HAL_GetTick>
 80034ec:	0003      	movs	r3, r0
 80034ee:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80034f0:	e008      	b.n	8003504 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80034f2:	f7ff fa87 	bl	8002a04 <HAL_GetTick>
 80034f6:	0002      	movs	r2, r0
 80034f8:	69bb      	ldr	r3, [r7, #24]
 80034fa:	1ad3      	subs	r3, r2, r3
 80034fc:	2b02      	cmp	r3, #2
 80034fe:	d901      	bls.n	8003504 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8003500:	2303      	movs	r3, #3
 8003502:	e0cd      	b.n	80036a0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8003504:	4b45      	ldr	r3, [pc, #276]	; (800361c <HAL_RCC_OscConfig+0x67c>)
 8003506:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003508:	2380      	movs	r3, #128	; 0x80
 800350a:	025b      	lsls	r3, r3, #9
 800350c:	4013      	ands	r3, r2
 800350e:	d0f0      	beq.n	80034f2 <HAL_RCC_OscConfig+0x552>
 8003510:	e01b      	b.n	800354a <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8003512:	4b42      	ldr	r3, [pc, #264]	; (800361c <HAL_RCC_OscConfig+0x67c>)
 8003514:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003516:	4b41      	ldr	r3, [pc, #260]	; (800361c <HAL_RCC_OscConfig+0x67c>)
 8003518:	4943      	ldr	r1, [pc, #268]	; (8003628 <HAL_RCC_OscConfig+0x688>)
 800351a:	400a      	ands	r2, r1
 800351c:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800351e:	f7ff fa71 	bl	8002a04 <HAL_GetTick>
 8003522:	0003      	movs	r3, r0
 8003524:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8003526:	e008      	b.n	800353a <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003528:	f7ff fa6c 	bl	8002a04 <HAL_GetTick>
 800352c:	0002      	movs	r2, r0
 800352e:	69bb      	ldr	r3, [r7, #24]
 8003530:	1ad3      	subs	r3, r2, r3
 8003532:	2b02      	cmp	r3, #2
 8003534:	d901      	bls.n	800353a <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8003536:	2303      	movs	r3, #3
 8003538:	e0b2      	b.n	80036a0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800353a:	4b38      	ldr	r3, [pc, #224]	; (800361c <HAL_RCC_OscConfig+0x67c>)
 800353c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800353e:	2380      	movs	r3, #128	; 0x80
 8003540:	025b      	lsls	r3, r3, #9
 8003542:	4013      	ands	r3, r2
 8003544:	d1f0      	bne.n	8003528 <HAL_RCC_OscConfig+0x588>
 8003546:	e000      	b.n	800354a <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8003548:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800354e:	2b00      	cmp	r3, #0
 8003550:	d100      	bne.n	8003554 <HAL_RCC_OscConfig+0x5b4>
 8003552:	e0a4      	b.n	800369e <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003554:	4b31      	ldr	r3, [pc, #196]	; (800361c <HAL_RCC_OscConfig+0x67c>)
 8003556:	685b      	ldr	r3, [r3, #4]
 8003558:	220c      	movs	r2, #12
 800355a:	4013      	ands	r3, r2
 800355c:	2b08      	cmp	r3, #8
 800355e:	d100      	bne.n	8003562 <HAL_RCC_OscConfig+0x5c2>
 8003560:	e078      	b.n	8003654 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003566:	2b02      	cmp	r3, #2
 8003568:	d14c      	bne.n	8003604 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800356a:	4b2c      	ldr	r3, [pc, #176]	; (800361c <HAL_RCC_OscConfig+0x67c>)
 800356c:	681a      	ldr	r2, [r3, #0]
 800356e:	4b2b      	ldr	r3, [pc, #172]	; (800361c <HAL_RCC_OscConfig+0x67c>)
 8003570:	492e      	ldr	r1, [pc, #184]	; (800362c <HAL_RCC_OscConfig+0x68c>)
 8003572:	400a      	ands	r2, r1
 8003574:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003576:	f7ff fa45 	bl	8002a04 <HAL_GetTick>
 800357a:	0003      	movs	r3, r0
 800357c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800357e:	e008      	b.n	8003592 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003580:	f7ff fa40 	bl	8002a04 <HAL_GetTick>
 8003584:	0002      	movs	r2, r0
 8003586:	69bb      	ldr	r3, [r7, #24]
 8003588:	1ad3      	subs	r3, r2, r3
 800358a:	2b02      	cmp	r3, #2
 800358c:	d901      	bls.n	8003592 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 800358e:	2303      	movs	r3, #3
 8003590:	e086      	b.n	80036a0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003592:	4b22      	ldr	r3, [pc, #136]	; (800361c <HAL_RCC_OscConfig+0x67c>)
 8003594:	681a      	ldr	r2, [r3, #0]
 8003596:	2380      	movs	r3, #128	; 0x80
 8003598:	049b      	lsls	r3, r3, #18
 800359a:	4013      	ands	r3, r2
 800359c:	d1f0      	bne.n	8003580 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800359e:	4b1f      	ldr	r3, [pc, #124]	; (800361c <HAL_RCC_OscConfig+0x67c>)
 80035a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035a2:	220f      	movs	r2, #15
 80035a4:	4393      	bics	r3, r2
 80035a6:	0019      	movs	r1, r3
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80035ac:	4b1b      	ldr	r3, [pc, #108]	; (800361c <HAL_RCC_OscConfig+0x67c>)
 80035ae:	430a      	orrs	r2, r1
 80035b0:	62da      	str	r2, [r3, #44]	; 0x2c
 80035b2:	4b1a      	ldr	r3, [pc, #104]	; (800361c <HAL_RCC_OscConfig+0x67c>)
 80035b4:	685b      	ldr	r3, [r3, #4]
 80035b6:	4a1e      	ldr	r2, [pc, #120]	; (8003630 <HAL_RCC_OscConfig+0x690>)
 80035b8:	4013      	ands	r3, r2
 80035ba:	0019      	movs	r1, r3
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035c4:	431a      	orrs	r2, r3
 80035c6:	4b15      	ldr	r3, [pc, #84]	; (800361c <HAL_RCC_OscConfig+0x67c>)
 80035c8:	430a      	orrs	r2, r1
 80035ca:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80035cc:	4b13      	ldr	r3, [pc, #76]	; (800361c <HAL_RCC_OscConfig+0x67c>)
 80035ce:	681a      	ldr	r2, [r3, #0]
 80035d0:	4b12      	ldr	r3, [pc, #72]	; (800361c <HAL_RCC_OscConfig+0x67c>)
 80035d2:	2180      	movs	r1, #128	; 0x80
 80035d4:	0449      	lsls	r1, r1, #17
 80035d6:	430a      	orrs	r2, r1
 80035d8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035da:	f7ff fa13 	bl	8002a04 <HAL_GetTick>
 80035de:	0003      	movs	r3, r0
 80035e0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80035e2:	e008      	b.n	80035f6 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035e4:	f7ff fa0e 	bl	8002a04 <HAL_GetTick>
 80035e8:	0002      	movs	r2, r0
 80035ea:	69bb      	ldr	r3, [r7, #24]
 80035ec:	1ad3      	subs	r3, r2, r3
 80035ee:	2b02      	cmp	r3, #2
 80035f0:	d901      	bls.n	80035f6 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 80035f2:	2303      	movs	r3, #3
 80035f4:	e054      	b.n	80036a0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80035f6:	4b09      	ldr	r3, [pc, #36]	; (800361c <HAL_RCC_OscConfig+0x67c>)
 80035f8:	681a      	ldr	r2, [r3, #0]
 80035fa:	2380      	movs	r3, #128	; 0x80
 80035fc:	049b      	lsls	r3, r3, #18
 80035fe:	4013      	ands	r3, r2
 8003600:	d0f0      	beq.n	80035e4 <HAL_RCC_OscConfig+0x644>
 8003602:	e04c      	b.n	800369e <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003604:	4b05      	ldr	r3, [pc, #20]	; (800361c <HAL_RCC_OscConfig+0x67c>)
 8003606:	681a      	ldr	r2, [r3, #0]
 8003608:	4b04      	ldr	r3, [pc, #16]	; (800361c <HAL_RCC_OscConfig+0x67c>)
 800360a:	4908      	ldr	r1, [pc, #32]	; (800362c <HAL_RCC_OscConfig+0x68c>)
 800360c:	400a      	ands	r2, r1
 800360e:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003610:	f7ff f9f8 	bl	8002a04 <HAL_GetTick>
 8003614:	0003      	movs	r3, r0
 8003616:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003618:	e015      	b.n	8003646 <HAL_RCC_OscConfig+0x6a6>
 800361a:	46c0      	nop			; (mov r8, r8)
 800361c:	40021000 	.word	0x40021000
 8003620:	00001388 	.word	0x00001388
 8003624:	efffffff 	.word	0xefffffff
 8003628:	fffeffff 	.word	0xfffeffff
 800362c:	feffffff 	.word	0xfeffffff
 8003630:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003634:	f7ff f9e6 	bl	8002a04 <HAL_GetTick>
 8003638:	0002      	movs	r2, r0
 800363a:	69bb      	ldr	r3, [r7, #24]
 800363c:	1ad3      	subs	r3, r2, r3
 800363e:	2b02      	cmp	r3, #2
 8003640:	d901      	bls.n	8003646 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8003642:	2303      	movs	r3, #3
 8003644:	e02c      	b.n	80036a0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003646:	4b18      	ldr	r3, [pc, #96]	; (80036a8 <HAL_RCC_OscConfig+0x708>)
 8003648:	681a      	ldr	r2, [r3, #0]
 800364a:	2380      	movs	r3, #128	; 0x80
 800364c:	049b      	lsls	r3, r3, #18
 800364e:	4013      	ands	r3, r2
 8003650:	d1f0      	bne.n	8003634 <HAL_RCC_OscConfig+0x694>
 8003652:	e024      	b.n	800369e <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003658:	2b01      	cmp	r3, #1
 800365a:	d101      	bne.n	8003660 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 800365c:	2301      	movs	r3, #1
 800365e:	e01f      	b.n	80036a0 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8003660:	4b11      	ldr	r3, [pc, #68]	; (80036a8 <HAL_RCC_OscConfig+0x708>)
 8003662:	685b      	ldr	r3, [r3, #4]
 8003664:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8003666:	4b10      	ldr	r3, [pc, #64]	; (80036a8 <HAL_RCC_OscConfig+0x708>)
 8003668:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800366a:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800366c:	697a      	ldr	r2, [r7, #20]
 800366e:	23c0      	movs	r3, #192	; 0xc0
 8003670:	025b      	lsls	r3, r3, #9
 8003672:	401a      	ands	r2, r3
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003678:	429a      	cmp	r2, r3
 800367a:	d10e      	bne.n	800369a <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800367c:	693b      	ldr	r3, [r7, #16]
 800367e:	220f      	movs	r2, #15
 8003680:	401a      	ands	r2, r3
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003686:	429a      	cmp	r2, r3
 8003688:	d107      	bne.n	800369a <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 800368a:	697a      	ldr	r2, [r7, #20]
 800368c:	23f0      	movs	r3, #240	; 0xf0
 800368e:	039b      	lsls	r3, r3, #14
 8003690:	401a      	ands	r2, r3
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8003696:	429a      	cmp	r2, r3
 8003698:	d001      	beq.n	800369e <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 800369a:	2301      	movs	r3, #1
 800369c:	e000      	b.n	80036a0 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 800369e:	2300      	movs	r3, #0
}
 80036a0:	0018      	movs	r0, r3
 80036a2:	46bd      	mov	sp, r7
 80036a4:	b008      	add	sp, #32
 80036a6:	bd80      	pop	{r7, pc}
 80036a8:	40021000 	.word	0x40021000

080036ac <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b084      	sub	sp, #16
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
 80036b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d101      	bne.n	80036c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80036bc:	2301      	movs	r3, #1
 80036be:	e0bf      	b.n	8003840 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80036c0:	4b61      	ldr	r3, [pc, #388]	; (8003848 <HAL_RCC_ClockConfig+0x19c>)
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	2201      	movs	r2, #1
 80036c6:	4013      	ands	r3, r2
 80036c8:	683a      	ldr	r2, [r7, #0]
 80036ca:	429a      	cmp	r2, r3
 80036cc:	d911      	bls.n	80036f2 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036ce:	4b5e      	ldr	r3, [pc, #376]	; (8003848 <HAL_RCC_ClockConfig+0x19c>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	2201      	movs	r2, #1
 80036d4:	4393      	bics	r3, r2
 80036d6:	0019      	movs	r1, r3
 80036d8:	4b5b      	ldr	r3, [pc, #364]	; (8003848 <HAL_RCC_ClockConfig+0x19c>)
 80036da:	683a      	ldr	r2, [r7, #0]
 80036dc:	430a      	orrs	r2, r1
 80036de:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80036e0:	4b59      	ldr	r3, [pc, #356]	; (8003848 <HAL_RCC_ClockConfig+0x19c>)
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	2201      	movs	r2, #1
 80036e6:	4013      	ands	r3, r2
 80036e8:	683a      	ldr	r2, [r7, #0]
 80036ea:	429a      	cmp	r2, r3
 80036ec:	d001      	beq.n	80036f2 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80036ee:	2301      	movs	r3, #1
 80036f0:	e0a6      	b.n	8003840 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	2202      	movs	r2, #2
 80036f8:	4013      	ands	r3, r2
 80036fa:	d015      	beq.n	8003728 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	2204      	movs	r2, #4
 8003702:	4013      	ands	r3, r2
 8003704:	d006      	beq.n	8003714 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8003706:	4b51      	ldr	r3, [pc, #324]	; (800384c <HAL_RCC_ClockConfig+0x1a0>)
 8003708:	685a      	ldr	r2, [r3, #4]
 800370a:	4b50      	ldr	r3, [pc, #320]	; (800384c <HAL_RCC_ClockConfig+0x1a0>)
 800370c:	21e0      	movs	r1, #224	; 0xe0
 800370e:	00c9      	lsls	r1, r1, #3
 8003710:	430a      	orrs	r2, r1
 8003712:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003714:	4b4d      	ldr	r3, [pc, #308]	; (800384c <HAL_RCC_ClockConfig+0x1a0>)
 8003716:	685b      	ldr	r3, [r3, #4]
 8003718:	22f0      	movs	r2, #240	; 0xf0
 800371a:	4393      	bics	r3, r2
 800371c:	0019      	movs	r1, r3
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	689a      	ldr	r2, [r3, #8]
 8003722:	4b4a      	ldr	r3, [pc, #296]	; (800384c <HAL_RCC_ClockConfig+0x1a0>)
 8003724:	430a      	orrs	r2, r1
 8003726:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	2201      	movs	r2, #1
 800372e:	4013      	ands	r3, r2
 8003730:	d04c      	beq.n	80037cc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	685b      	ldr	r3, [r3, #4]
 8003736:	2b01      	cmp	r3, #1
 8003738:	d107      	bne.n	800374a <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800373a:	4b44      	ldr	r3, [pc, #272]	; (800384c <HAL_RCC_ClockConfig+0x1a0>)
 800373c:	681a      	ldr	r2, [r3, #0]
 800373e:	2380      	movs	r3, #128	; 0x80
 8003740:	029b      	lsls	r3, r3, #10
 8003742:	4013      	ands	r3, r2
 8003744:	d120      	bne.n	8003788 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8003746:	2301      	movs	r3, #1
 8003748:	e07a      	b.n	8003840 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	685b      	ldr	r3, [r3, #4]
 800374e:	2b02      	cmp	r3, #2
 8003750:	d107      	bne.n	8003762 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003752:	4b3e      	ldr	r3, [pc, #248]	; (800384c <HAL_RCC_ClockConfig+0x1a0>)
 8003754:	681a      	ldr	r2, [r3, #0]
 8003756:	2380      	movs	r3, #128	; 0x80
 8003758:	049b      	lsls	r3, r3, #18
 800375a:	4013      	ands	r3, r2
 800375c:	d114      	bne.n	8003788 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800375e:	2301      	movs	r3, #1
 8003760:	e06e      	b.n	8003840 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	685b      	ldr	r3, [r3, #4]
 8003766:	2b03      	cmp	r3, #3
 8003768:	d107      	bne.n	800377a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800376a:	4b38      	ldr	r3, [pc, #224]	; (800384c <HAL_RCC_ClockConfig+0x1a0>)
 800376c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800376e:	2380      	movs	r3, #128	; 0x80
 8003770:	025b      	lsls	r3, r3, #9
 8003772:	4013      	ands	r3, r2
 8003774:	d108      	bne.n	8003788 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8003776:	2301      	movs	r3, #1
 8003778:	e062      	b.n	8003840 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800377a:	4b34      	ldr	r3, [pc, #208]	; (800384c <HAL_RCC_ClockConfig+0x1a0>)
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	2202      	movs	r2, #2
 8003780:	4013      	ands	r3, r2
 8003782:	d101      	bne.n	8003788 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8003784:	2301      	movs	r3, #1
 8003786:	e05b      	b.n	8003840 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003788:	4b30      	ldr	r3, [pc, #192]	; (800384c <HAL_RCC_ClockConfig+0x1a0>)
 800378a:	685b      	ldr	r3, [r3, #4]
 800378c:	2203      	movs	r2, #3
 800378e:	4393      	bics	r3, r2
 8003790:	0019      	movs	r1, r3
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	685a      	ldr	r2, [r3, #4]
 8003796:	4b2d      	ldr	r3, [pc, #180]	; (800384c <HAL_RCC_ClockConfig+0x1a0>)
 8003798:	430a      	orrs	r2, r1
 800379a:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800379c:	f7ff f932 	bl	8002a04 <HAL_GetTick>
 80037a0:	0003      	movs	r3, r0
 80037a2:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037a4:	e009      	b.n	80037ba <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037a6:	f7ff f92d 	bl	8002a04 <HAL_GetTick>
 80037aa:	0002      	movs	r2, r0
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	1ad3      	subs	r3, r2, r3
 80037b0:	4a27      	ldr	r2, [pc, #156]	; (8003850 <HAL_RCC_ClockConfig+0x1a4>)
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d901      	bls.n	80037ba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80037b6:	2303      	movs	r3, #3
 80037b8:	e042      	b.n	8003840 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037ba:	4b24      	ldr	r3, [pc, #144]	; (800384c <HAL_RCC_ClockConfig+0x1a0>)
 80037bc:	685b      	ldr	r3, [r3, #4]
 80037be:	220c      	movs	r2, #12
 80037c0:	401a      	ands	r2, r3
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	685b      	ldr	r3, [r3, #4]
 80037c6:	009b      	lsls	r3, r3, #2
 80037c8:	429a      	cmp	r2, r3
 80037ca:	d1ec      	bne.n	80037a6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80037cc:	4b1e      	ldr	r3, [pc, #120]	; (8003848 <HAL_RCC_ClockConfig+0x19c>)
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	2201      	movs	r2, #1
 80037d2:	4013      	ands	r3, r2
 80037d4:	683a      	ldr	r2, [r7, #0]
 80037d6:	429a      	cmp	r2, r3
 80037d8:	d211      	bcs.n	80037fe <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037da:	4b1b      	ldr	r3, [pc, #108]	; (8003848 <HAL_RCC_ClockConfig+0x19c>)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	2201      	movs	r2, #1
 80037e0:	4393      	bics	r3, r2
 80037e2:	0019      	movs	r1, r3
 80037e4:	4b18      	ldr	r3, [pc, #96]	; (8003848 <HAL_RCC_ClockConfig+0x19c>)
 80037e6:	683a      	ldr	r2, [r7, #0]
 80037e8:	430a      	orrs	r2, r1
 80037ea:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80037ec:	4b16      	ldr	r3, [pc, #88]	; (8003848 <HAL_RCC_ClockConfig+0x19c>)
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	2201      	movs	r2, #1
 80037f2:	4013      	ands	r3, r2
 80037f4:	683a      	ldr	r2, [r7, #0]
 80037f6:	429a      	cmp	r2, r3
 80037f8:	d001      	beq.n	80037fe <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 80037fa:	2301      	movs	r3, #1
 80037fc:	e020      	b.n	8003840 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	2204      	movs	r2, #4
 8003804:	4013      	ands	r3, r2
 8003806:	d009      	beq.n	800381c <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8003808:	4b10      	ldr	r3, [pc, #64]	; (800384c <HAL_RCC_ClockConfig+0x1a0>)
 800380a:	685b      	ldr	r3, [r3, #4]
 800380c:	4a11      	ldr	r2, [pc, #68]	; (8003854 <HAL_RCC_ClockConfig+0x1a8>)
 800380e:	4013      	ands	r3, r2
 8003810:	0019      	movs	r1, r3
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	68da      	ldr	r2, [r3, #12]
 8003816:	4b0d      	ldr	r3, [pc, #52]	; (800384c <HAL_RCC_ClockConfig+0x1a0>)
 8003818:	430a      	orrs	r2, r1
 800381a:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800381c:	f000 f820 	bl	8003860 <HAL_RCC_GetSysClockFreq>
 8003820:	0001      	movs	r1, r0
 8003822:	4b0a      	ldr	r3, [pc, #40]	; (800384c <HAL_RCC_ClockConfig+0x1a0>)
 8003824:	685b      	ldr	r3, [r3, #4]
 8003826:	091b      	lsrs	r3, r3, #4
 8003828:	220f      	movs	r2, #15
 800382a:	4013      	ands	r3, r2
 800382c:	4a0a      	ldr	r2, [pc, #40]	; (8003858 <HAL_RCC_ClockConfig+0x1ac>)
 800382e:	5cd3      	ldrb	r3, [r2, r3]
 8003830:	000a      	movs	r2, r1
 8003832:	40da      	lsrs	r2, r3
 8003834:	4b09      	ldr	r3, [pc, #36]	; (800385c <HAL_RCC_ClockConfig+0x1b0>)
 8003836:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8003838:	2000      	movs	r0, #0
 800383a:	f7ff f89d 	bl	8002978 <HAL_InitTick>
  
  return HAL_OK;
 800383e:	2300      	movs	r3, #0
}
 8003840:	0018      	movs	r0, r3
 8003842:	46bd      	mov	sp, r7
 8003844:	b004      	add	sp, #16
 8003846:	bd80      	pop	{r7, pc}
 8003848:	40022000 	.word	0x40022000
 800384c:	40021000 	.word	0x40021000
 8003850:	00001388 	.word	0x00001388
 8003854:	fffff8ff 	.word	0xfffff8ff
 8003858:	08005c98 	.word	0x08005c98
 800385c:	20000000 	.word	0x20000000

08003860 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003860:	b590      	push	{r4, r7, lr}
 8003862:	b08f      	sub	sp, #60	; 0x3c
 8003864:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8003866:	2314      	movs	r3, #20
 8003868:	18fb      	adds	r3, r7, r3
 800386a:	4a38      	ldr	r2, [pc, #224]	; (800394c <HAL_RCC_GetSysClockFreq+0xec>)
 800386c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800386e:	c313      	stmia	r3!, {r0, r1, r4}
 8003870:	6812      	ldr	r2, [r2, #0]
 8003872:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8003874:	1d3b      	adds	r3, r7, #4
 8003876:	4a36      	ldr	r2, [pc, #216]	; (8003950 <HAL_RCC_GetSysClockFreq+0xf0>)
 8003878:	ca13      	ldmia	r2!, {r0, r1, r4}
 800387a:	c313      	stmia	r3!, {r0, r1, r4}
 800387c:	6812      	ldr	r2, [r2, #0]
 800387e:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003880:	2300      	movs	r3, #0
 8003882:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003884:	2300      	movs	r3, #0
 8003886:	62bb      	str	r3, [r7, #40]	; 0x28
 8003888:	2300      	movs	r3, #0
 800388a:	637b      	str	r3, [r7, #52]	; 0x34
 800388c:	2300      	movs	r3, #0
 800388e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8003890:	2300      	movs	r3, #0
 8003892:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8003894:	4b2f      	ldr	r3, [pc, #188]	; (8003954 <HAL_RCC_GetSysClockFreq+0xf4>)
 8003896:	685b      	ldr	r3, [r3, #4]
 8003898:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800389a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800389c:	220c      	movs	r2, #12
 800389e:	4013      	ands	r3, r2
 80038a0:	2b0c      	cmp	r3, #12
 80038a2:	d047      	beq.n	8003934 <HAL_RCC_GetSysClockFreq+0xd4>
 80038a4:	d849      	bhi.n	800393a <HAL_RCC_GetSysClockFreq+0xda>
 80038a6:	2b04      	cmp	r3, #4
 80038a8:	d002      	beq.n	80038b0 <HAL_RCC_GetSysClockFreq+0x50>
 80038aa:	2b08      	cmp	r3, #8
 80038ac:	d003      	beq.n	80038b6 <HAL_RCC_GetSysClockFreq+0x56>
 80038ae:	e044      	b.n	800393a <HAL_RCC_GetSysClockFreq+0xda>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80038b0:	4b29      	ldr	r3, [pc, #164]	; (8003958 <HAL_RCC_GetSysClockFreq+0xf8>)
 80038b2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80038b4:	e044      	b.n	8003940 <HAL_RCC_GetSysClockFreq+0xe0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80038b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038b8:	0c9b      	lsrs	r3, r3, #18
 80038ba:	220f      	movs	r2, #15
 80038bc:	4013      	ands	r3, r2
 80038be:	2214      	movs	r2, #20
 80038c0:	18ba      	adds	r2, r7, r2
 80038c2:	5cd3      	ldrb	r3, [r2, r3]
 80038c4:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80038c6:	4b23      	ldr	r3, [pc, #140]	; (8003954 <HAL_RCC_GetSysClockFreq+0xf4>)
 80038c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038ca:	220f      	movs	r2, #15
 80038cc:	4013      	ands	r3, r2
 80038ce:	1d3a      	adds	r2, r7, #4
 80038d0:	5cd3      	ldrb	r3, [r2, r3]
 80038d2:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80038d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80038d6:	23c0      	movs	r3, #192	; 0xc0
 80038d8:	025b      	lsls	r3, r3, #9
 80038da:	401a      	ands	r2, r3
 80038dc:	2380      	movs	r3, #128	; 0x80
 80038de:	025b      	lsls	r3, r3, #9
 80038e0:	429a      	cmp	r2, r3
 80038e2:	d109      	bne.n	80038f8 <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80038e4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80038e6:	481c      	ldr	r0, [pc, #112]	; (8003958 <HAL_RCC_GetSysClockFreq+0xf8>)
 80038e8:	f7fc fc0e 	bl	8000108 <__udivsi3>
 80038ec:	0003      	movs	r3, r0
 80038ee:	001a      	movs	r2, r3
 80038f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038f2:	4353      	muls	r3, r2
 80038f4:	637b      	str	r3, [r7, #52]	; 0x34
 80038f6:	e01a      	b.n	800392e <HAL_RCC_GetSysClockFreq+0xce>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 80038f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80038fa:	23c0      	movs	r3, #192	; 0xc0
 80038fc:	025b      	lsls	r3, r3, #9
 80038fe:	401a      	ands	r2, r3
 8003900:	23c0      	movs	r3, #192	; 0xc0
 8003902:	025b      	lsls	r3, r3, #9
 8003904:	429a      	cmp	r2, r3
 8003906:	d109      	bne.n	800391c <HAL_RCC_GetSysClockFreq+0xbc>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003908:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800390a:	4814      	ldr	r0, [pc, #80]	; (800395c <HAL_RCC_GetSysClockFreq+0xfc>)
 800390c:	f7fc fbfc 	bl	8000108 <__udivsi3>
 8003910:	0003      	movs	r3, r0
 8003912:	001a      	movs	r2, r3
 8003914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003916:	4353      	muls	r3, r2
 8003918:	637b      	str	r3, [r7, #52]	; 0x34
 800391a:	e008      	b.n	800392e <HAL_RCC_GetSysClockFreq+0xce>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800391c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800391e:	480e      	ldr	r0, [pc, #56]	; (8003958 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003920:	f7fc fbf2 	bl	8000108 <__udivsi3>
 8003924:	0003      	movs	r3, r0
 8003926:	001a      	movs	r2, r3
 8003928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800392a:	4353      	muls	r3, r2
 800392c:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 800392e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003930:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003932:	e005      	b.n	8003940 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8003934:	4b09      	ldr	r3, [pc, #36]	; (800395c <HAL_RCC_GetSysClockFreq+0xfc>)
 8003936:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003938:	e002      	b.n	8003940 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800393a:	4b07      	ldr	r3, [pc, #28]	; (8003958 <HAL_RCC_GetSysClockFreq+0xf8>)
 800393c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800393e:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8003940:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8003942:	0018      	movs	r0, r3
 8003944:	46bd      	mov	sp, r7
 8003946:	b00f      	add	sp, #60	; 0x3c
 8003948:	bd90      	pop	{r4, r7, pc}
 800394a:	46c0      	nop			; (mov r8, r8)
 800394c:	08005c38 	.word	0x08005c38
 8003950:	08005c48 	.word	0x08005c48
 8003954:	40021000 	.word	0x40021000
 8003958:	007a1200 	.word	0x007a1200
 800395c:	02dc6c00 	.word	0x02dc6c00

08003960 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003964:	4b02      	ldr	r3, [pc, #8]	; (8003970 <HAL_RCC_GetHCLKFreq+0x10>)
 8003966:	681b      	ldr	r3, [r3, #0]
}
 8003968:	0018      	movs	r0, r3
 800396a:	46bd      	mov	sp, r7
 800396c:	bd80      	pop	{r7, pc}
 800396e:	46c0      	nop			; (mov r8, r8)
 8003970:	20000000 	.word	0x20000000

08003974 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003974:	b580      	push	{r7, lr}
 8003976:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8003978:	f7ff fff2 	bl	8003960 <HAL_RCC_GetHCLKFreq>
 800397c:	0001      	movs	r1, r0
 800397e:	4b06      	ldr	r3, [pc, #24]	; (8003998 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003980:	685b      	ldr	r3, [r3, #4]
 8003982:	0a1b      	lsrs	r3, r3, #8
 8003984:	2207      	movs	r2, #7
 8003986:	4013      	ands	r3, r2
 8003988:	4a04      	ldr	r2, [pc, #16]	; (800399c <HAL_RCC_GetPCLK1Freq+0x28>)
 800398a:	5cd3      	ldrb	r3, [r2, r3]
 800398c:	40d9      	lsrs	r1, r3
 800398e:	000b      	movs	r3, r1
}    
 8003990:	0018      	movs	r0, r3
 8003992:	46bd      	mov	sp, r7
 8003994:	bd80      	pop	{r7, pc}
 8003996:	46c0      	nop			; (mov r8, r8)
 8003998:	40021000 	.word	0x40021000
 800399c:	08005ca8 	.word	0x08005ca8

080039a0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b086      	sub	sp, #24
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80039a8:	2300      	movs	r3, #0
 80039aa:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 80039ac:	2300      	movs	r3, #0
 80039ae:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681a      	ldr	r2, [r3, #0]
 80039b4:	2380      	movs	r3, #128	; 0x80
 80039b6:	025b      	lsls	r3, r3, #9
 80039b8:	4013      	ands	r3, r2
 80039ba:	d100      	bne.n	80039be <HAL_RCCEx_PeriphCLKConfig+0x1e>
 80039bc:	e08e      	b.n	8003adc <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 80039be:	2017      	movs	r0, #23
 80039c0:	183b      	adds	r3, r7, r0
 80039c2:	2200      	movs	r2, #0
 80039c4:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80039c6:	4b67      	ldr	r3, [pc, #412]	; (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80039c8:	69da      	ldr	r2, [r3, #28]
 80039ca:	2380      	movs	r3, #128	; 0x80
 80039cc:	055b      	lsls	r3, r3, #21
 80039ce:	4013      	ands	r3, r2
 80039d0:	d110      	bne.n	80039f4 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 80039d2:	4b64      	ldr	r3, [pc, #400]	; (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80039d4:	69da      	ldr	r2, [r3, #28]
 80039d6:	4b63      	ldr	r3, [pc, #396]	; (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80039d8:	2180      	movs	r1, #128	; 0x80
 80039da:	0549      	lsls	r1, r1, #21
 80039dc:	430a      	orrs	r2, r1
 80039de:	61da      	str	r2, [r3, #28]
 80039e0:	4b60      	ldr	r3, [pc, #384]	; (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80039e2:	69da      	ldr	r2, [r3, #28]
 80039e4:	2380      	movs	r3, #128	; 0x80
 80039e6:	055b      	lsls	r3, r3, #21
 80039e8:	4013      	ands	r3, r2
 80039ea:	60bb      	str	r3, [r7, #8]
 80039ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80039ee:	183b      	adds	r3, r7, r0
 80039f0:	2201      	movs	r2, #1
 80039f2:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039f4:	4b5c      	ldr	r3, [pc, #368]	; (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 80039f6:	681a      	ldr	r2, [r3, #0]
 80039f8:	2380      	movs	r3, #128	; 0x80
 80039fa:	005b      	lsls	r3, r3, #1
 80039fc:	4013      	ands	r3, r2
 80039fe:	d11a      	bne.n	8003a36 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a00:	4b59      	ldr	r3, [pc, #356]	; (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8003a02:	681a      	ldr	r2, [r3, #0]
 8003a04:	4b58      	ldr	r3, [pc, #352]	; (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8003a06:	2180      	movs	r1, #128	; 0x80
 8003a08:	0049      	lsls	r1, r1, #1
 8003a0a:	430a      	orrs	r2, r1
 8003a0c:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a0e:	f7fe fff9 	bl	8002a04 <HAL_GetTick>
 8003a12:	0003      	movs	r3, r0
 8003a14:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a16:	e008      	b.n	8003a2a <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a18:	f7fe fff4 	bl	8002a04 <HAL_GetTick>
 8003a1c:	0002      	movs	r2, r0
 8003a1e:	693b      	ldr	r3, [r7, #16]
 8003a20:	1ad3      	subs	r3, r2, r3
 8003a22:	2b64      	cmp	r3, #100	; 0x64
 8003a24:	d901      	bls.n	8003a2a <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8003a26:	2303      	movs	r3, #3
 8003a28:	e097      	b.n	8003b5a <HAL_RCCEx_PeriphCLKConfig+0x1ba>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a2a:	4b4f      	ldr	r3, [pc, #316]	; (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8003a2c:	681a      	ldr	r2, [r3, #0]
 8003a2e:	2380      	movs	r3, #128	; 0x80
 8003a30:	005b      	lsls	r3, r3, #1
 8003a32:	4013      	ands	r3, r2
 8003a34:	d0f0      	beq.n	8003a18 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003a36:	4b4b      	ldr	r3, [pc, #300]	; (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003a38:	6a1a      	ldr	r2, [r3, #32]
 8003a3a:	23c0      	movs	r3, #192	; 0xc0
 8003a3c:	009b      	lsls	r3, r3, #2
 8003a3e:	4013      	ands	r3, r2
 8003a40:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d034      	beq.n	8003ab2 <HAL_RCCEx_PeriphCLKConfig+0x112>
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	685a      	ldr	r2, [r3, #4]
 8003a4c:	23c0      	movs	r3, #192	; 0xc0
 8003a4e:	009b      	lsls	r3, r3, #2
 8003a50:	4013      	ands	r3, r2
 8003a52:	68fa      	ldr	r2, [r7, #12]
 8003a54:	429a      	cmp	r2, r3
 8003a56:	d02c      	beq.n	8003ab2 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003a58:	4b42      	ldr	r3, [pc, #264]	; (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003a5a:	6a1b      	ldr	r3, [r3, #32]
 8003a5c:	4a43      	ldr	r2, [pc, #268]	; (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003a5e:	4013      	ands	r3, r2
 8003a60:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003a62:	4b40      	ldr	r3, [pc, #256]	; (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003a64:	6a1a      	ldr	r2, [r3, #32]
 8003a66:	4b3f      	ldr	r3, [pc, #252]	; (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003a68:	2180      	movs	r1, #128	; 0x80
 8003a6a:	0249      	lsls	r1, r1, #9
 8003a6c:	430a      	orrs	r2, r1
 8003a6e:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003a70:	4b3c      	ldr	r3, [pc, #240]	; (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003a72:	6a1a      	ldr	r2, [r3, #32]
 8003a74:	4b3b      	ldr	r3, [pc, #236]	; (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003a76:	493e      	ldr	r1, [pc, #248]	; (8003b70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a78:	400a      	ands	r2, r1
 8003a7a:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003a7c:	4b39      	ldr	r3, [pc, #228]	; (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003a7e:	68fa      	ldr	r2, [r7, #12]
 8003a80:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	2201      	movs	r2, #1
 8003a86:	4013      	ands	r3, r2
 8003a88:	d013      	beq.n	8003ab2 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a8a:	f7fe ffbb 	bl	8002a04 <HAL_GetTick>
 8003a8e:	0003      	movs	r3, r0
 8003a90:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a92:	e009      	b.n	8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a94:	f7fe ffb6 	bl	8002a04 <HAL_GetTick>
 8003a98:	0002      	movs	r2, r0
 8003a9a:	693b      	ldr	r3, [r7, #16]
 8003a9c:	1ad3      	subs	r3, r2, r3
 8003a9e:	4a35      	ldr	r2, [pc, #212]	; (8003b74 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003aa0:	4293      	cmp	r3, r2
 8003aa2:	d901      	bls.n	8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8003aa4:	2303      	movs	r3, #3
 8003aa6:	e058      	b.n	8003b5a <HAL_RCCEx_PeriphCLKConfig+0x1ba>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003aa8:	4b2e      	ldr	r3, [pc, #184]	; (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003aaa:	6a1b      	ldr	r3, [r3, #32]
 8003aac:	2202      	movs	r2, #2
 8003aae:	4013      	ands	r3, r2
 8003ab0:	d0f0      	beq.n	8003a94 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003ab2:	4b2c      	ldr	r3, [pc, #176]	; (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003ab4:	6a1b      	ldr	r3, [r3, #32]
 8003ab6:	4a2d      	ldr	r2, [pc, #180]	; (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003ab8:	4013      	ands	r3, r2
 8003aba:	0019      	movs	r1, r3
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	685a      	ldr	r2, [r3, #4]
 8003ac0:	4b28      	ldr	r3, [pc, #160]	; (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003ac2:	430a      	orrs	r2, r1
 8003ac4:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003ac6:	2317      	movs	r3, #23
 8003ac8:	18fb      	adds	r3, r7, r3
 8003aca:	781b      	ldrb	r3, [r3, #0]
 8003acc:	2b01      	cmp	r3, #1
 8003ace:	d105      	bne.n	8003adc <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ad0:	4b24      	ldr	r3, [pc, #144]	; (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003ad2:	69da      	ldr	r2, [r3, #28]
 8003ad4:	4b23      	ldr	r3, [pc, #140]	; (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003ad6:	4928      	ldr	r1, [pc, #160]	; (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003ad8:	400a      	ands	r2, r1
 8003ada:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	2201      	movs	r2, #1
 8003ae2:	4013      	ands	r3, r2
 8003ae4:	d009      	beq.n	8003afa <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003ae6:	4b1f      	ldr	r3, [pc, #124]	; (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aea:	2203      	movs	r2, #3
 8003aec:	4393      	bics	r3, r2
 8003aee:	0019      	movs	r1, r3
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	689a      	ldr	r2, [r3, #8]
 8003af4:	4b1b      	ldr	r3, [pc, #108]	; (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003af6:	430a      	orrs	r2, r1
 8003af8:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	2220      	movs	r2, #32
 8003b00:	4013      	ands	r3, r2
 8003b02:	d009      	beq.n	8003b18 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003b04:	4b17      	ldr	r3, [pc, #92]	; (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003b06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b08:	2210      	movs	r2, #16
 8003b0a:	4393      	bics	r3, r2
 8003b0c:	0019      	movs	r1, r3
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	68da      	ldr	r2, [r3, #12]
 8003b12:	4b14      	ldr	r3, [pc, #80]	; (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003b14:	430a      	orrs	r2, r1
 8003b16:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681a      	ldr	r2, [r3, #0]
 8003b1c:	2380      	movs	r3, #128	; 0x80
 8003b1e:	029b      	lsls	r3, r3, #10
 8003b20:	4013      	ands	r3, r2
 8003b22:	d009      	beq.n	8003b38 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003b24:	4b0f      	ldr	r3, [pc, #60]	; (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003b26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b28:	2280      	movs	r2, #128	; 0x80
 8003b2a:	4393      	bics	r3, r2
 8003b2c:	0019      	movs	r1, r3
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	695a      	ldr	r2, [r3, #20]
 8003b32:	4b0c      	ldr	r3, [pc, #48]	; (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003b34:	430a      	orrs	r2, r1
 8003b36:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681a      	ldr	r2, [r3, #0]
 8003b3c:	2380      	movs	r3, #128	; 0x80
 8003b3e:	00db      	lsls	r3, r3, #3
 8003b40:	4013      	ands	r3, r2
 8003b42:	d009      	beq.n	8003b58 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003b44:	4b07      	ldr	r3, [pc, #28]	; (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003b46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b48:	2240      	movs	r2, #64	; 0x40
 8003b4a:	4393      	bics	r3, r2
 8003b4c:	0019      	movs	r1, r3
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	691a      	ldr	r2, [r3, #16]
 8003b52:	4b04      	ldr	r3, [pc, #16]	; (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003b54:	430a      	orrs	r2, r1
 8003b56:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8003b58:	2300      	movs	r3, #0
}
 8003b5a:	0018      	movs	r0, r3
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	b006      	add	sp, #24
 8003b60:	bd80      	pop	{r7, pc}
 8003b62:	46c0      	nop			; (mov r8, r8)
 8003b64:	40021000 	.word	0x40021000
 8003b68:	40007000 	.word	0x40007000
 8003b6c:	fffffcff 	.word	0xfffffcff
 8003b70:	fffeffff 	.word	0xfffeffff
 8003b74:	00001388 	.word	0x00001388
 8003b78:	efffffff 	.word	0xefffffff

08003b7c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b082      	sub	sp, #8
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d101      	bne.n	8003b8e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003b8a:	2301      	movs	r3, #1
 8003b8c:	e042      	b.n	8003c14 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	223d      	movs	r2, #61	; 0x3d
 8003b92:	5c9b      	ldrb	r3, [r3, r2]
 8003b94:	b2db      	uxtb	r3, r3
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d107      	bne.n	8003baa <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	223c      	movs	r2, #60	; 0x3c
 8003b9e:	2100      	movs	r1, #0
 8003ba0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	0018      	movs	r0, r3
 8003ba6:	f7fe fcd1 	bl	800254c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	223d      	movs	r2, #61	; 0x3d
 8003bae:	2102      	movs	r1, #2
 8003bb0:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681a      	ldr	r2, [r3, #0]
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	3304      	adds	r3, #4
 8003bba:	0019      	movs	r1, r3
 8003bbc:	0010      	movs	r0, r2
 8003bbe:	f000 facb 	bl	8004158 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	2246      	movs	r2, #70	; 0x46
 8003bc6:	2101      	movs	r1, #1
 8003bc8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	223e      	movs	r2, #62	; 0x3e
 8003bce:	2101      	movs	r1, #1
 8003bd0:	5499      	strb	r1, [r3, r2]
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	223f      	movs	r2, #63	; 0x3f
 8003bd6:	2101      	movs	r1, #1
 8003bd8:	5499      	strb	r1, [r3, r2]
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	2240      	movs	r2, #64	; 0x40
 8003bde:	2101      	movs	r1, #1
 8003be0:	5499      	strb	r1, [r3, r2]
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	2241      	movs	r2, #65	; 0x41
 8003be6:	2101      	movs	r1, #1
 8003be8:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	2242      	movs	r2, #66	; 0x42
 8003bee:	2101      	movs	r1, #1
 8003bf0:	5499      	strb	r1, [r3, r2]
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	2243      	movs	r2, #67	; 0x43
 8003bf6:	2101      	movs	r1, #1
 8003bf8:	5499      	strb	r1, [r3, r2]
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	2244      	movs	r2, #68	; 0x44
 8003bfe:	2101      	movs	r1, #1
 8003c00:	5499      	strb	r1, [r3, r2]
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	2245      	movs	r2, #69	; 0x45
 8003c06:	2101      	movs	r1, #1
 8003c08:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	223d      	movs	r2, #61	; 0x3d
 8003c0e:	2101      	movs	r1, #1
 8003c10:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003c12:	2300      	movs	r3, #0
}
 8003c14:	0018      	movs	r0, r3
 8003c16:	46bd      	mov	sp, r7
 8003c18:	b002      	add	sp, #8
 8003c1a:	bd80      	pop	{r7, pc}

08003c1c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b082      	sub	sp, #8
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d101      	bne.n	8003c2e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003c2a:	2301      	movs	r3, #1
 8003c2c:	e042      	b.n	8003cb4 <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	223d      	movs	r2, #61	; 0x3d
 8003c32:	5c9b      	ldrb	r3, [r3, r2]
 8003c34:	b2db      	uxtb	r3, r3
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d107      	bne.n	8003c4a <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	223c      	movs	r2, #60	; 0x3c
 8003c3e:	2100      	movs	r1, #0
 8003c40:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	0018      	movs	r0, r3
 8003c46:	f000 f839 	bl	8003cbc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	223d      	movs	r2, #61	; 0x3d
 8003c4e:	2102      	movs	r1, #2
 8003c50:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681a      	ldr	r2, [r3, #0]
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	3304      	adds	r3, #4
 8003c5a:	0019      	movs	r1, r3
 8003c5c:	0010      	movs	r0, r2
 8003c5e:	f000 fa7b 	bl	8004158 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	2246      	movs	r2, #70	; 0x46
 8003c66:	2101      	movs	r1, #1
 8003c68:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	223e      	movs	r2, #62	; 0x3e
 8003c6e:	2101      	movs	r1, #1
 8003c70:	5499      	strb	r1, [r3, r2]
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	223f      	movs	r2, #63	; 0x3f
 8003c76:	2101      	movs	r1, #1
 8003c78:	5499      	strb	r1, [r3, r2]
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	2240      	movs	r2, #64	; 0x40
 8003c7e:	2101      	movs	r1, #1
 8003c80:	5499      	strb	r1, [r3, r2]
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	2241      	movs	r2, #65	; 0x41
 8003c86:	2101      	movs	r1, #1
 8003c88:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	2242      	movs	r2, #66	; 0x42
 8003c8e:	2101      	movs	r1, #1
 8003c90:	5499      	strb	r1, [r3, r2]
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	2243      	movs	r2, #67	; 0x43
 8003c96:	2101      	movs	r1, #1
 8003c98:	5499      	strb	r1, [r3, r2]
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	2244      	movs	r2, #68	; 0x44
 8003c9e:	2101      	movs	r1, #1
 8003ca0:	5499      	strb	r1, [r3, r2]
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	2245      	movs	r2, #69	; 0x45
 8003ca6:	2101      	movs	r1, #1
 8003ca8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	223d      	movs	r2, #61	; 0x3d
 8003cae:	2101      	movs	r1, #1
 8003cb0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003cb2:	2300      	movs	r3, #0
}
 8003cb4:	0018      	movs	r0, r3
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	b002      	add	sp, #8
 8003cba:	bd80      	pop	{r7, pc}

08003cbc <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b082      	sub	sp, #8
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003cc4:	46c0      	nop			; (mov r8, r8)
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	b002      	add	sp, #8
 8003cca:	bd80      	pop	{r7, pc}

08003ccc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b084      	sub	sp, #16
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
 8003cd4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d108      	bne.n	8003cee <HAL_TIM_PWM_Start+0x22>
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	223e      	movs	r2, #62	; 0x3e
 8003ce0:	5c9b      	ldrb	r3, [r3, r2]
 8003ce2:	b2db      	uxtb	r3, r3
 8003ce4:	3b01      	subs	r3, #1
 8003ce6:	1e5a      	subs	r2, r3, #1
 8003ce8:	4193      	sbcs	r3, r2
 8003cea:	b2db      	uxtb	r3, r3
 8003cec:	e01f      	b.n	8003d2e <HAL_TIM_PWM_Start+0x62>
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	2b04      	cmp	r3, #4
 8003cf2:	d108      	bne.n	8003d06 <HAL_TIM_PWM_Start+0x3a>
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	223f      	movs	r2, #63	; 0x3f
 8003cf8:	5c9b      	ldrb	r3, [r3, r2]
 8003cfa:	b2db      	uxtb	r3, r3
 8003cfc:	3b01      	subs	r3, #1
 8003cfe:	1e5a      	subs	r2, r3, #1
 8003d00:	4193      	sbcs	r3, r2
 8003d02:	b2db      	uxtb	r3, r3
 8003d04:	e013      	b.n	8003d2e <HAL_TIM_PWM_Start+0x62>
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	2b08      	cmp	r3, #8
 8003d0a:	d108      	bne.n	8003d1e <HAL_TIM_PWM_Start+0x52>
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2240      	movs	r2, #64	; 0x40
 8003d10:	5c9b      	ldrb	r3, [r3, r2]
 8003d12:	b2db      	uxtb	r3, r3
 8003d14:	3b01      	subs	r3, #1
 8003d16:	1e5a      	subs	r2, r3, #1
 8003d18:	4193      	sbcs	r3, r2
 8003d1a:	b2db      	uxtb	r3, r3
 8003d1c:	e007      	b.n	8003d2e <HAL_TIM_PWM_Start+0x62>
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	2241      	movs	r2, #65	; 0x41
 8003d22:	5c9b      	ldrb	r3, [r3, r2]
 8003d24:	b2db      	uxtb	r3, r3
 8003d26:	3b01      	subs	r3, #1
 8003d28:	1e5a      	subs	r2, r3, #1
 8003d2a:	4193      	sbcs	r3, r2
 8003d2c:	b2db      	uxtb	r3, r3
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d001      	beq.n	8003d36 <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 8003d32:	2301      	movs	r3, #1
 8003d34:	e06a      	b.n	8003e0c <HAL_TIM_PWM_Start+0x140>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d104      	bne.n	8003d46 <HAL_TIM_PWM_Start+0x7a>
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	223e      	movs	r2, #62	; 0x3e
 8003d40:	2102      	movs	r1, #2
 8003d42:	5499      	strb	r1, [r3, r2]
 8003d44:	e013      	b.n	8003d6e <HAL_TIM_PWM_Start+0xa2>
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	2b04      	cmp	r3, #4
 8003d4a:	d104      	bne.n	8003d56 <HAL_TIM_PWM_Start+0x8a>
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	223f      	movs	r2, #63	; 0x3f
 8003d50:	2102      	movs	r1, #2
 8003d52:	5499      	strb	r1, [r3, r2]
 8003d54:	e00b      	b.n	8003d6e <HAL_TIM_PWM_Start+0xa2>
 8003d56:	683b      	ldr	r3, [r7, #0]
 8003d58:	2b08      	cmp	r3, #8
 8003d5a:	d104      	bne.n	8003d66 <HAL_TIM_PWM_Start+0x9a>
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2240      	movs	r2, #64	; 0x40
 8003d60:	2102      	movs	r1, #2
 8003d62:	5499      	strb	r1, [r3, r2]
 8003d64:	e003      	b.n	8003d6e <HAL_TIM_PWM_Start+0xa2>
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	2241      	movs	r2, #65	; 0x41
 8003d6a:	2102      	movs	r1, #2
 8003d6c:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	6839      	ldr	r1, [r7, #0]
 8003d74:	2201      	movs	r2, #1
 8003d76:	0018      	movs	r0, r3
 8003d78:	f000 fcde 	bl	8004738 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	4a24      	ldr	r2, [pc, #144]	; (8003e14 <HAL_TIM_PWM_Start+0x148>)
 8003d82:	4293      	cmp	r3, r2
 8003d84:	d009      	beq.n	8003d9a <HAL_TIM_PWM_Start+0xce>
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	4a23      	ldr	r2, [pc, #140]	; (8003e18 <HAL_TIM_PWM_Start+0x14c>)
 8003d8c:	4293      	cmp	r3, r2
 8003d8e:	d004      	beq.n	8003d9a <HAL_TIM_PWM_Start+0xce>
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	4a21      	ldr	r2, [pc, #132]	; (8003e1c <HAL_TIM_PWM_Start+0x150>)
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d101      	bne.n	8003d9e <HAL_TIM_PWM_Start+0xd2>
 8003d9a:	2301      	movs	r3, #1
 8003d9c:	e000      	b.n	8003da0 <HAL_TIM_PWM_Start+0xd4>
 8003d9e:	2300      	movs	r3, #0
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d008      	beq.n	8003db6 <HAL_TIM_PWM_Start+0xea>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	2180      	movs	r1, #128	; 0x80
 8003db0:	0209      	lsls	r1, r1, #8
 8003db2:	430a      	orrs	r2, r1
 8003db4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	4a16      	ldr	r2, [pc, #88]	; (8003e14 <HAL_TIM_PWM_Start+0x148>)
 8003dbc:	4293      	cmp	r3, r2
 8003dbe:	d00a      	beq.n	8003dd6 <HAL_TIM_PWM_Start+0x10a>
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681a      	ldr	r2, [r3, #0]
 8003dc4:	2380      	movs	r3, #128	; 0x80
 8003dc6:	05db      	lsls	r3, r3, #23
 8003dc8:	429a      	cmp	r2, r3
 8003dca:	d004      	beq.n	8003dd6 <HAL_TIM_PWM_Start+0x10a>
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	4a13      	ldr	r2, [pc, #76]	; (8003e20 <HAL_TIM_PWM_Start+0x154>)
 8003dd2:	4293      	cmp	r3, r2
 8003dd4:	d111      	bne.n	8003dfa <HAL_TIM_PWM_Start+0x12e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	689b      	ldr	r3, [r3, #8]
 8003ddc:	2207      	movs	r2, #7
 8003dde:	4013      	ands	r3, r2
 8003de0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	2b06      	cmp	r3, #6
 8003de6:	d010      	beq.n	8003e0a <HAL_TIM_PWM_Start+0x13e>
    {
      __HAL_TIM_ENABLE(htim);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	681a      	ldr	r2, [r3, #0]
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	2101      	movs	r1, #1
 8003df4:	430a      	orrs	r2, r1
 8003df6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003df8:	e007      	b.n	8003e0a <HAL_TIM_PWM_Start+0x13e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	681a      	ldr	r2, [r3, #0]
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	2101      	movs	r1, #1
 8003e06:	430a      	orrs	r2, r1
 8003e08:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003e0a:	2300      	movs	r3, #0
}
 8003e0c:	0018      	movs	r0, r3
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	b004      	add	sp, #16
 8003e12:	bd80      	pop	{r7, pc}
 8003e14:	40012c00 	.word	0x40012c00
 8003e18:	40014400 	.word	0x40014400
 8003e1c:	40014800 	.word	0x40014800
 8003e20:	40000400 	.word	0x40000400

08003e24 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003e24:	b580      	push	{r7, lr}
 8003e26:	b086      	sub	sp, #24
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	60f8      	str	r0, [r7, #12]
 8003e2c:	60b9      	str	r1, [r7, #8]
 8003e2e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003e30:	2317      	movs	r3, #23
 8003e32:	18fb      	adds	r3, r7, r3
 8003e34:	2200      	movs	r2, #0
 8003e36:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	223c      	movs	r2, #60	; 0x3c
 8003e3c:	5c9b      	ldrb	r3, [r3, r2]
 8003e3e:	2b01      	cmp	r3, #1
 8003e40:	d101      	bne.n	8003e46 <HAL_TIM_PWM_ConfigChannel+0x22>
 8003e42:	2302      	movs	r3, #2
 8003e44:	e0ad      	b.n	8003fa2 <HAL_TIM_PWM_ConfigChannel+0x17e>
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	223c      	movs	r2, #60	; 0x3c
 8003e4a:	2101      	movs	r1, #1
 8003e4c:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	2b0c      	cmp	r3, #12
 8003e52:	d100      	bne.n	8003e56 <HAL_TIM_PWM_ConfigChannel+0x32>
 8003e54:	e076      	b.n	8003f44 <HAL_TIM_PWM_ConfigChannel+0x120>
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	2b0c      	cmp	r3, #12
 8003e5a:	d900      	bls.n	8003e5e <HAL_TIM_PWM_ConfigChannel+0x3a>
 8003e5c:	e095      	b.n	8003f8a <HAL_TIM_PWM_ConfigChannel+0x166>
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	2b08      	cmp	r3, #8
 8003e62:	d04e      	beq.n	8003f02 <HAL_TIM_PWM_ConfigChannel+0xde>
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2b08      	cmp	r3, #8
 8003e68:	d900      	bls.n	8003e6c <HAL_TIM_PWM_ConfigChannel+0x48>
 8003e6a:	e08e      	b.n	8003f8a <HAL_TIM_PWM_ConfigChannel+0x166>
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d003      	beq.n	8003e7a <HAL_TIM_PWM_ConfigChannel+0x56>
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	2b04      	cmp	r3, #4
 8003e76:	d021      	beq.n	8003ebc <HAL_TIM_PWM_ConfigChannel+0x98>
 8003e78:	e087      	b.n	8003f8a <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	68ba      	ldr	r2, [r7, #8]
 8003e80:	0011      	movs	r1, r2
 8003e82:	0018      	movs	r0, r3
 8003e84:	f000 f9de 	bl	8004244 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	699a      	ldr	r2, [r3, #24]
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	2108      	movs	r1, #8
 8003e94:	430a      	orrs	r2, r1
 8003e96:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	699a      	ldr	r2, [r3, #24]
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	2104      	movs	r1, #4
 8003ea4:	438a      	bics	r2, r1
 8003ea6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	6999      	ldr	r1, [r3, #24]
 8003eae:	68bb      	ldr	r3, [r7, #8]
 8003eb0:	691a      	ldr	r2, [r3, #16]
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	430a      	orrs	r2, r1
 8003eb8:	619a      	str	r2, [r3, #24]
      break;
 8003eba:	e06b      	b.n	8003f94 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	68ba      	ldr	r2, [r7, #8]
 8003ec2:	0011      	movs	r1, r2
 8003ec4:	0018      	movs	r0, r3
 8003ec6:	f000 fa3b 	bl	8004340 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	699a      	ldr	r2, [r3, #24]
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	2180      	movs	r1, #128	; 0x80
 8003ed6:	0109      	lsls	r1, r1, #4
 8003ed8:	430a      	orrs	r2, r1
 8003eda:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	699a      	ldr	r2, [r3, #24]
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	4931      	ldr	r1, [pc, #196]	; (8003fac <HAL_TIM_PWM_ConfigChannel+0x188>)
 8003ee8:	400a      	ands	r2, r1
 8003eea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	6999      	ldr	r1, [r3, #24]
 8003ef2:	68bb      	ldr	r3, [r7, #8]
 8003ef4:	691b      	ldr	r3, [r3, #16]
 8003ef6:	021a      	lsls	r2, r3, #8
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	430a      	orrs	r2, r1
 8003efe:	619a      	str	r2, [r3, #24]
      break;
 8003f00:	e048      	b.n	8003f94 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	68ba      	ldr	r2, [r7, #8]
 8003f08:	0011      	movs	r1, r2
 8003f0a:	0018      	movs	r0, r3
 8003f0c:	f000 fa96 	bl	800443c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	69da      	ldr	r2, [r3, #28]
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	2108      	movs	r1, #8
 8003f1c:	430a      	orrs	r2, r1
 8003f1e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	69da      	ldr	r2, [r3, #28]
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	2104      	movs	r1, #4
 8003f2c:	438a      	bics	r2, r1
 8003f2e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	69d9      	ldr	r1, [r3, #28]
 8003f36:	68bb      	ldr	r3, [r7, #8]
 8003f38:	691a      	ldr	r2, [r3, #16]
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	430a      	orrs	r2, r1
 8003f40:	61da      	str	r2, [r3, #28]
      break;
 8003f42:	e027      	b.n	8003f94 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	68ba      	ldr	r2, [r7, #8]
 8003f4a:	0011      	movs	r1, r2
 8003f4c:	0018      	movs	r0, r3
 8003f4e:	f000 faf5 	bl	800453c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	69da      	ldr	r2, [r3, #28]
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	2180      	movs	r1, #128	; 0x80
 8003f5e:	0109      	lsls	r1, r1, #4
 8003f60:	430a      	orrs	r2, r1
 8003f62:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	69da      	ldr	r2, [r3, #28]
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	490f      	ldr	r1, [pc, #60]	; (8003fac <HAL_TIM_PWM_ConfigChannel+0x188>)
 8003f70:	400a      	ands	r2, r1
 8003f72:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	69d9      	ldr	r1, [r3, #28]
 8003f7a:	68bb      	ldr	r3, [r7, #8]
 8003f7c:	691b      	ldr	r3, [r3, #16]
 8003f7e:	021a      	lsls	r2, r3, #8
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	430a      	orrs	r2, r1
 8003f86:	61da      	str	r2, [r3, #28]
      break;
 8003f88:	e004      	b.n	8003f94 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 8003f8a:	2317      	movs	r3, #23
 8003f8c:	18fb      	adds	r3, r7, r3
 8003f8e:	2201      	movs	r2, #1
 8003f90:	701a      	strb	r2, [r3, #0]
      break;
 8003f92:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	223c      	movs	r2, #60	; 0x3c
 8003f98:	2100      	movs	r1, #0
 8003f9a:	5499      	strb	r1, [r3, r2]

  return status;
 8003f9c:	2317      	movs	r3, #23
 8003f9e:	18fb      	adds	r3, r7, r3
 8003fa0:	781b      	ldrb	r3, [r3, #0]
}
 8003fa2:	0018      	movs	r0, r3
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	b006      	add	sp, #24
 8003fa8:	bd80      	pop	{r7, pc}
 8003faa:	46c0      	nop			; (mov r8, r8)
 8003fac:	fffffbff 	.word	0xfffffbff

08003fb0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b084      	sub	sp, #16
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
 8003fb8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003fba:	230f      	movs	r3, #15
 8003fbc:	18fb      	adds	r3, r7, r3
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	223c      	movs	r2, #60	; 0x3c
 8003fc6:	5c9b      	ldrb	r3, [r3, r2]
 8003fc8:	2b01      	cmp	r3, #1
 8003fca:	d101      	bne.n	8003fd0 <HAL_TIM_ConfigClockSource+0x20>
 8003fcc:	2302      	movs	r3, #2
 8003fce:	e0bc      	b.n	800414a <HAL_TIM_ConfigClockSource+0x19a>
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	223c      	movs	r2, #60	; 0x3c
 8003fd4:	2101      	movs	r1, #1
 8003fd6:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	223d      	movs	r2, #61	; 0x3d
 8003fdc:	2102      	movs	r1, #2
 8003fde:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	689b      	ldr	r3, [r3, #8]
 8003fe6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003fe8:	68bb      	ldr	r3, [r7, #8]
 8003fea:	2277      	movs	r2, #119	; 0x77
 8003fec:	4393      	bics	r3, r2
 8003fee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003ff0:	68bb      	ldr	r3, [r7, #8]
 8003ff2:	4a58      	ldr	r2, [pc, #352]	; (8004154 <HAL_TIM_ConfigClockSource+0x1a4>)
 8003ff4:	4013      	ands	r3, r2
 8003ff6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	68ba      	ldr	r2, [r7, #8]
 8003ffe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004000:	683b      	ldr	r3, [r7, #0]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	2280      	movs	r2, #128	; 0x80
 8004006:	0192      	lsls	r2, r2, #6
 8004008:	4293      	cmp	r3, r2
 800400a:	d040      	beq.n	800408e <HAL_TIM_ConfigClockSource+0xde>
 800400c:	2280      	movs	r2, #128	; 0x80
 800400e:	0192      	lsls	r2, r2, #6
 8004010:	4293      	cmp	r3, r2
 8004012:	d900      	bls.n	8004016 <HAL_TIM_ConfigClockSource+0x66>
 8004014:	e088      	b.n	8004128 <HAL_TIM_ConfigClockSource+0x178>
 8004016:	2280      	movs	r2, #128	; 0x80
 8004018:	0152      	lsls	r2, r2, #5
 800401a:	4293      	cmp	r3, r2
 800401c:	d100      	bne.n	8004020 <HAL_TIM_ConfigClockSource+0x70>
 800401e:	e088      	b.n	8004132 <HAL_TIM_ConfigClockSource+0x182>
 8004020:	2280      	movs	r2, #128	; 0x80
 8004022:	0152      	lsls	r2, r2, #5
 8004024:	4293      	cmp	r3, r2
 8004026:	d900      	bls.n	800402a <HAL_TIM_ConfigClockSource+0x7a>
 8004028:	e07e      	b.n	8004128 <HAL_TIM_ConfigClockSource+0x178>
 800402a:	2b70      	cmp	r3, #112	; 0x70
 800402c:	d018      	beq.n	8004060 <HAL_TIM_ConfigClockSource+0xb0>
 800402e:	d900      	bls.n	8004032 <HAL_TIM_ConfigClockSource+0x82>
 8004030:	e07a      	b.n	8004128 <HAL_TIM_ConfigClockSource+0x178>
 8004032:	2b60      	cmp	r3, #96	; 0x60
 8004034:	d04f      	beq.n	80040d6 <HAL_TIM_ConfigClockSource+0x126>
 8004036:	d900      	bls.n	800403a <HAL_TIM_ConfigClockSource+0x8a>
 8004038:	e076      	b.n	8004128 <HAL_TIM_ConfigClockSource+0x178>
 800403a:	2b50      	cmp	r3, #80	; 0x50
 800403c:	d03b      	beq.n	80040b6 <HAL_TIM_ConfigClockSource+0x106>
 800403e:	d900      	bls.n	8004042 <HAL_TIM_ConfigClockSource+0x92>
 8004040:	e072      	b.n	8004128 <HAL_TIM_ConfigClockSource+0x178>
 8004042:	2b40      	cmp	r3, #64	; 0x40
 8004044:	d057      	beq.n	80040f6 <HAL_TIM_ConfigClockSource+0x146>
 8004046:	d900      	bls.n	800404a <HAL_TIM_ConfigClockSource+0x9a>
 8004048:	e06e      	b.n	8004128 <HAL_TIM_ConfigClockSource+0x178>
 800404a:	2b30      	cmp	r3, #48	; 0x30
 800404c:	d063      	beq.n	8004116 <HAL_TIM_ConfigClockSource+0x166>
 800404e:	d86b      	bhi.n	8004128 <HAL_TIM_ConfigClockSource+0x178>
 8004050:	2b20      	cmp	r3, #32
 8004052:	d060      	beq.n	8004116 <HAL_TIM_ConfigClockSource+0x166>
 8004054:	d868      	bhi.n	8004128 <HAL_TIM_ConfigClockSource+0x178>
 8004056:	2b00      	cmp	r3, #0
 8004058:	d05d      	beq.n	8004116 <HAL_TIM_ConfigClockSource+0x166>
 800405a:	2b10      	cmp	r3, #16
 800405c:	d05b      	beq.n	8004116 <HAL_TIM_ConfigClockSource+0x166>
 800405e:	e063      	b.n	8004128 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6818      	ldr	r0, [r3, #0]
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	6899      	ldr	r1, [r3, #8]
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	685a      	ldr	r2, [r3, #4]
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	68db      	ldr	r3, [r3, #12]
 8004070:	f000 fb42 	bl	80046f8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	689b      	ldr	r3, [r3, #8]
 800407a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800407c:	68bb      	ldr	r3, [r7, #8]
 800407e:	2277      	movs	r2, #119	; 0x77
 8004080:	4313      	orrs	r3, r2
 8004082:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	68ba      	ldr	r2, [r7, #8]
 800408a:	609a      	str	r2, [r3, #8]
      break;
 800408c:	e052      	b.n	8004134 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6818      	ldr	r0, [r3, #0]
 8004092:	683b      	ldr	r3, [r7, #0]
 8004094:	6899      	ldr	r1, [r3, #8]
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	685a      	ldr	r2, [r3, #4]
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	68db      	ldr	r3, [r3, #12]
 800409e:	f000 fb2b 	bl	80046f8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	689a      	ldr	r2, [r3, #8]
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	2180      	movs	r1, #128	; 0x80
 80040ae:	01c9      	lsls	r1, r1, #7
 80040b0:	430a      	orrs	r2, r1
 80040b2:	609a      	str	r2, [r3, #8]
      break;
 80040b4:	e03e      	b.n	8004134 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6818      	ldr	r0, [r3, #0]
 80040ba:	683b      	ldr	r3, [r7, #0]
 80040bc:	6859      	ldr	r1, [r3, #4]
 80040be:	683b      	ldr	r3, [r7, #0]
 80040c0:	68db      	ldr	r3, [r3, #12]
 80040c2:	001a      	movs	r2, r3
 80040c4:	f000 fa9e 	bl	8004604 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	2150      	movs	r1, #80	; 0x50
 80040ce:	0018      	movs	r0, r3
 80040d0:	f000 faf8 	bl	80046c4 <TIM_ITRx_SetConfig>
      break;
 80040d4:	e02e      	b.n	8004134 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6818      	ldr	r0, [r3, #0]
 80040da:	683b      	ldr	r3, [r7, #0]
 80040dc:	6859      	ldr	r1, [r3, #4]
 80040de:	683b      	ldr	r3, [r7, #0]
 80040e0:	68db      	ldr	r3, [r3, #12]
 80040e2:	001a      	movs	r2, r3
 80040e4:	f000 fabc 	bl	8004660 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	2160      	movs	r1, #96	; 0x60
 80040ee:	0018      	movs	r0, r3
 80040f0:	f000 fae8 	bl	80046c4 <TIM_ITRx_SetConfig>
      break;
 80040f4:	e01e      	b.n	8004134 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6818      	ldr	r0, [r3, #0]
 80040fa:	683b      	ldr	r3, [r7, #0]
 80040fc:	6859      	ldr	r1, [r3, #4]
 80040fe:	683b      	ldr	r3, [r7, #0]
 8004100:	68db      	ldr	r3, [r3, #12]
 8004102:	001a      	movs	r2, r3
 8004104:	f000 fa7e 	bl	8004604 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	2140      	movs	r1, #64	; 0x40
 800410e:	0018      	movs	r0, r3
 8004110:	f000 fad8 	bl	80046c4 <TIM_ITRx_SetConfig>
      break;
 8004114:	e00e      	b.n	8004134 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681a      	ldr	r2, [r3, #0]
 800411a:	683b      	ldr	r3, [r7, #0]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	0019      	movs	r1, r3
 8004120:	0010      	movs	r0, r2
 8004122:	f000 facf 	bl	80046c4 <TIM_ITRx_SetConfig>
      break;
 8004126:	e005      	b.n	8004134 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8004128:	230f      	movs	r3, #15
 800412a:	18fb      	adds	r3, r7, r3
 800412c:	2201      	movs	r2, #1
 800412e:	701a      	strb	r2, [r3, #0]
      break;
 8004130:	e000      	b.n	8004134 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8004132:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	223d      	movs	r2, #61	; 0x3d
 8004138:	2101      	movs	r1, #1
 800413a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	223c      	movs	r2, #60	; 0x3c
 8004140:	2100      	movs	r1, #0
 8004142:	5499      	strb	r1, [r3, r2]

  return status;
 8004144:	230f      	movs	r3, #15
 8004146:	18fb      	adds	r3, r7, r3
 8004148:	781b      	ldrb	r3, [r3, #0]
}
 800414a:	0018      	movs	r0, r3
 800414c:	46bd      	mov	sp, r7
 800414e:	b004      	add	sp, #16
 8004150:	bd80      	pop	{r7, pc}
 8004152:	46c0      	nop			; (mov r8, r8)
 8004154:	ffff00ff 	.word	0xffff00ff

08004158 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004158:	b580      	push	{r7, lr}
 800415a:	b084      	sub	sp, #16
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
 8004160:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	4a30      	ldr	r2, [pc, #192]	; (800422c <TIM_Base_SetConfig+0xd4>)
 800416c:	4293      	cmp	r3, r2
 800416e:	d008      	beq.n	8004182 <TIM_Base_SetConfig+0x2a>
 8004170:	687a      	ldr	r2, [r7, #4]
 8004172:	2380      	movs	r3, #128	; 0x80
 8004174:	05db      	lsls	r3, r3, #23
 8004176:	429a      	cmp	r2, r3
 8004178:	d003      	beq.n	8004182 <TIM_Base_SetConfig+0x2a>
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	4a2c      	ldr	r2, [pc, #176]	; (8004230 <TIM_Base_SetConfig+0xd8>)
 800417e:	4293      	cmp	r3, r2
 8004180:	d108      	bne.n	8004194 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	2270      	movs	r2, #112	; 0x70
 8004186:	4393      	bics	r3, r2
 8004188:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800418a:	683b      	ldr	r3, [r7, #0]
 800418c:	685b      	ldr	r3, [r3, #4]
 800418e:	68fa      	ldr	r2, [r7, #12]
 8004190:	4313      	orrs	r3, r2
 8004192:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	4a25      	ldr	r2, [pc, #148]	; (800422c <TIM_Base_SetConfig+0xd4>)
 8004198:	4293      	cmp	r3, r2
 800419a:	d014      	beq.n	80041c6 <TIM_Base_SetConfig+0x6e>
 800419c:	687a      	ldr	r2, [r7, #4]
 800419e:	2380      	movs	r3, #128	; 0x80
 80041a0:	05db      	lsls	r3, r3, #23
 80041a2:	429a      	cmp	r2, r3
 80041a4:	d00f      	beq.n	80041c6 <TIM_Base_SetConfig+0x6e>
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	4a21      	ldr	r2, [pc, #132]	; (8004230 <TIM_Base_SetConfig+0xd8>)
 80041aa:	4293      	cmp	r3, r2
 80041ac:	d00b      	beq.n	80041c6 <TIM_Base_SetConfig+0x6e>
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	4a20      	ldr	r2, [pc, #128]	; (8004234 <TIM_Base_SetConfig+0xdc>)
 80041b2:	4293      	cmp	r3, r2
 80041b4:	d007      	beq.n	80041c6 <TIM_Base_SetConfig+0x6e>
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	4a1f      	ldr	r2, [pc, #124]	; (8004238 <TIM_Base_SetConfig+0xe0>)
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d003      	beq.n	80041c6 <TIM_Base_SetConfig+0x6e>
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	4a1e      	ldr	r2, [pc, #120]	; (800423c <TIM_Base_SetConfig+0xe4>)
 80041c2:	4293      	cmp	r3, r2
 80041c4:	d108      	bne.n	80041d8 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	4a1d      	ldr	r2, [pc, #116]	; (8004240 <TIM_Base_SetConfig+0xe8>)
 80041ca:	4013      	ands	r3, r2
 80041cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	68db      	ldr	r3, [r3, #12]
 80041d2:	68fa      	ldr	r2, [r7, #12]
 80041d4:	4313      	orrs	r3, r2
 80041d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	2280      	movs	r2, #128	; 0x80
 80041dc:	4393      	bics	r3, r2
 80041de:	001a      	movs	r2, r3
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	695b      	ldr	r3, [r3, #20]
 80041e4:	4313      	orrs	r3, r2
 80041e6:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	68fa      	ldr	r2, [r7, #12]
 80041ec:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80041ee:	683b      	ldr	r3, [r7, #0]
 80041f0:	689a      	ldr	r2, [r3, #8]
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80041f6:	683b      	ldr	r3, [r7, #0]
 80041f8:	681a      	ldr	r2, [r3, #0]
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	4a0a      	ldr	r2, [pc, #40]	; (800422c <TIM_Base_SetConfig+0xd4>)
 8004202:	4293      	cmp	r3, r2
 8004204:	d007      	beq.n	8004216 <TIM_Base_SetConfig+0xbe>
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	4a0b      	ldr	r2, [pc, #44]	; (8004238 <TIM_Base_SetConfig+0xe0>)
 800420a:	4293      	cmp	r3, r2
 800420c:	d003      	beq.n	8004216 <TIM_Base_SetConfig+0xbe>
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	4a0a      	ldr	r2, [pc, #40]	; (800423c <TIM_Base_SetConfig+0xe4>)
 8004212:	4293      	cmp	r3, r2
 8004214:	d103      	bne.n	800421e <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	691a      	ldr	r2, [r3, #16]
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	2201      	movs	r2, #1
 8004222:	615a      	str	r2, [r3, #20]
}
 8004224:	46c0      	nop			; (mov r8, r8)
 8004226:	46bd      	mov	sp, r7
 8004228:	b004      	add	sp, #16
 800422a:	bd80      	pop	{r7, pc}
 800422c:	40012c00 	.word	0x40012c00
 8004230:	40000400 	.word	0x40000400
 8004234:	40002000 	.word	0x40002000
 8004238:	40014400 	.word	0x40014400
 800423c:	40014800 	.word	0x40014800
 8004240:	fffffcff 	.word	0xfffffcff

08004244 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004244:	b580      	push	{r7, lr}
 8004246:	b086      	sub	sp, #24
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
 800424c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6a1b      	ldr	r3, [r3, #32]
 8004252:	2201      	movs	r2, #1
 8004254:	4393      	bics	r3, r2
 8004256:	001a      	movs	r2, r3
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6a1b      	ldr	r3, [r3, #32]
 8004260:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	685b      	ldr	r3, [r3, #4]
 8004266:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	699b      	ldr	r3, [r3, #24]
 800426c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	2270      	movs	r2, #112	; 0x70
 8004272:	4393      	bics	r3, r2
 8004274:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	2203      	movs	r2, #3
 800427a:	4393      	bics	r3, r2
 800427c:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	68fa      	ldr	r2, [r7, #12]
 8004284:	4313      	orrs	r3, r2
 8004286:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004288:	697b      	ldr	r3, [r7, #20]
 800428a:	2202      	movs	r2, #2
 800428c:	4393      	bics	r3, r2
 800428e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	689b      	ldr	r3, [r3, #8]
 8004294:	697a      	ldr	r2, [r7, #20]
 8004296:	4313      	orrs	r3, r2
 8004298:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	4a23      	ldr	r2, [pc, #140]	; (800432c <TIM_OC1_SetConfig+0xe8>)
 800429e:	4293      	cmp	r3, r2
 80042a0:	d007      	beq.n	80042b2 <TIM_OC1_SetConfig+0x6e>
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	4a22      	ldr	r2, [pc, #136]	; (8004330 <TIM_OC1_SetConfig+0xec>)
 80042a6:	4293      	cmp	r3, r2
 80042a8:	d003      	beq.n	80042b2 <TIM_OC1_SetConfig+0x6e>
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	4a21      	ldr	r2, [pc, #132]	; (8004334 <TIM_OC1_SetConfig+0xf0>)
 80042ae:	4293      	cmp	r3, r2
 80042b0:	d10c      	bne.n	80042cc <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80042b2:	697b      	ldr	r3, [r7, #20]
 80042b4:	2208      	movs	r2, #8
 80042b6:	4393      	bics	r3, r2
 80042b8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80042ba:	683b      	ldr	r3, [r7, #0]
 80042bc:	68db      	ldr	r3, [r3, #12]
 80042be:	697a      	ldr	r2, [r7, #20]
 80042c0:	4313      	orrs	r3, r2
 80042c2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80042c4:	697b      	ldr	r3, [r7, #20]
 80042c6:	2204      	movs	r2, #4
 80042c8:	4393      	bics	r3, r2
 80042ca:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	4a17      	ldr	r2, [pc, #92]	; (800432c <TIM_OC1_SetConfig+0xe8>)
 80042d0:	4293      	cmp	r3, r2
 80042d2:	d007      	beq.n	80042e4 <TIM_OC1_SetConfig+0xa0>
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	4a16      	ldr	r2, [pc, #88]	; (8004330 <TIM_OC1_SetConfig+0xec>)
 80042d8:	4293      	cmp	r3, r2
 80042da:	d003      	beq.n	80042e4 <TIM_OC1_SetConfig+0xa0>
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	4a15      	ldr	r2, [pc, #84]	; (8004334 <TIM_OC1_SetConfig+0xf0>)
 80042e0:	4293      	cmp	r3, r2
 80042e2:	d111      	bne.n	8004308 <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80042e4:	693b      	ldr	r3, [r7, #16]
 80042e6:	4a14      	ldr	r2, [pc, #80]	; (8004338 <TIM_OC1_SetConfig+0xf4>)
 80042e8:	4013      	ands	r3, r2
 80042ea:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80042ec:	693b      	ldr	r3, [r7, #16]
 80042ee:	4a13      	ldr	r2, [pc, #76]	; (800433c <TIM_OC1_SetConfig+0xf8>)
 80042f0:	4013      	ands	r3, r2
 80042f2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80042f4:	683b      	ldr	r3, [r7, #0]
 80042f6:	695b      	ldr	r3, [r3, #20]
 80042f8:	693a      	ldr	r2, [r7, #16]
 80042fa:	4313      	orrs	r3, r2
 80042fc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80042fe:	683b      	ldr	r3, [r7, #0]
 8004300:	699b      	ldr	r3, [r3, #24]
 8004302:	693a      	ldr	r2, [r7, #16]
 8004304:	4313      	orrs	r3, r2
 8004306:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	693a      	ldr	r2, [r7, #16]
 800430c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	68fa      	ldr	r2, [r7, #12]
 8004312:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	685a      	ldr	r2, [r3, #4]
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	697a      	ldr	r2, [r7, #20]
 8004320:	621a      	str	r2, [r3, #32]
}
 8004322:	46c0      	nop			; (mov r8, r8)
 8004324:	46bd      	mov	sp, r7
 8004326:	b006      	add	sp, #24
 8004328:	bd80      	pop	{r7, pc}
 800432a:	46c0      	nop			; (mov r8, r8)
 800432c:	40012c00 	.word	0x40012c00
 8004330:	40014400 	.word	0x40014400
 8004334:	40014800 	.word	0x40014800
 8004338:	fffffeff 	.word	0xfffffeff
 800433c:	fffffdff 	.word	0xfffffdff

08004340 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004340:	b580      	push	{r7, lr}
 8004342:	b086      	sub	sp, #24
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
 8004348:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6a1b      	ldr	r3, [r3, #32]
 800434e:	2210      	movs	r2, #16
 8004350:	4393      	bics	r3, r2
 8004352:	001a      	movs	r2, r3
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	6a1b      	ldr	r3, [r3, #32]
 800435c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	685b      	ldr	r3, [r3, #4]
 8004362:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	699b      	ldr	r3, [r3, #24]
 8004368:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	4a2c      	ldr	r2, [pc, #176]	; (8004420 <TIM_OC2_SetConfig+0xe0>)
 800436e:	4013      	ands	r3, r2
 8004370:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	4a2b      	ldr	r2, [pc, #172]	; (8004424 <TIM_OC2_SetConfig+0xe4>)
 8004376:	4013      	ands	r3, r2
 8004378:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800437a:	683b      	ldr	r3, [r7, #0]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	021b      	lsls	r3, r3, #8
 8004380:	68fa      	ldr	r2, [r7, #12]
 8004382:	4313      	orrs	r3, r2
 8004384:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004386:	697b      	ldr	r3, [r7, #20]
 8004388:	2220      	movs	r2, #32
 800438a:	4393      	bics	r3, r2
 800438c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800438e:	683b      	ldr	r3, [r7, #0]
 8004390:	689b      	ldr	r3, [r3, #8]
 8004392:	011b      	lsls	r3, r3, #4
 8004394:	697a      	ldr	r2, [r7, #20]
 8004396:	4313      	orrs	r3, r2
 8004398:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	4a22      	ldr	r2, [pc, #136]	; (8004428 <TIM_OC2_SetConfig+0xe8>)
 800439e:	4293      	cmp	r3, r2
 80043a0:	d10d      	bne.n	80043be <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80043a2:	697b      	ldr	r3, [r7, #20]
 80043a4:	2280      	movs	r2, #128	; 0x80
 80043a6:	4393      	bics	r3, r2
 80043a8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80043aa:	683b      	ldr	r3, [r7, #0]
 80043ac:	68db      	ldr	r3, [r3, #12]
 80043ae:	011b      	lsls	r3, r3, #4
 80043b0:	697a      	ldr	r2, [r7, #20]
 80043b2:	4313      	orrs	r3, r2
 80043b4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80043b6:	697b      	ldr	r3, [r7, #20]
 80043b8:	2240      	movs	r2, #64	; 0x40
 80043ba:	4393      	bics	r3, r2
 80043bc:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	4a19      	ldr	r2, [pc, #100]	; (8004428 <TIM_OC2_SetConfig+0xe8>)
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d007      	beq.n	80043d6 <TIM_OC2_SetConfig+0x96>
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	4a18      	ldr	r2, [pc, #96]	; (800442c <TIM_OC2_SetConfig+0xec>)
 80043ca:	4293      	cmp	r3, r2
 80043cc:	d003      	beq.n	80043d6 <TIM_OC2_SetConfig+0x96>
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	4a17      	ldr	r2, [pc, #92]	; (8004430 <TIM_OC2_SetConfig+0xf0>)
 80043d2:	4293      	cmp	r3, r2
 80043d4:	d113      	bne.n	80043fe <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80043d6:	693b      	ldr	r3, [r7, #16]
 80043d8:	4a16      	ldr	r2, [pc, #88]	; (8004434 <TIM_OC2_SetConfig+0xf4>)
 80043da:	4013      	ands	r3, r2
 80043dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80043de:	693b      	ldr	r3, [r7, #16]
 80043e0:	4a15      	ldr	r2, [pc, #84]	; (8004438 <TIM_OC2_SetConfig+0xf8>)
 80043e2:	4013      	ands	r3, r2
 80043e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80043e6:	683b      	ldr	r3, [r7, #0]
 80043e8:	695b      	ldr	r3, [r3, #20]
 80043ea:	009b      	lsls	r3, r3, #2
 80043ec:	693a      	ldr	r2, [r7, #16]
 80043ee:	4313      	orrs	r3, r2
 80043f0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	699b      	ldr	r3, [r3, #24]
 80043f6:	009b      	lsls	r3, r3, #2
 80043f8:	693a      	ldr	r2, [r7, #16]
 80043fa:	4313      	orrs	r3, r2
 80043fc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	693a      	ldr	r2, [r7, #16]
 8004402:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	68fa      	ldr	r2, [r7, #12]
 8004408:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800440a:	683b      	ldr	r3, [r7, #0]
 800440c:	685a      	ldr	r2, [r3, #4]
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	697a      	ldr	r2, [r7, #20]
 8004416:	621a      	str	r2, [r3, #32]
}
 8004418:	46c0      	nop			; (mov r8, r8)
 800441a:	46bd      	mov	sp, r7
 800441c:	b006      	add	sp, #24
 800441e:	bd80      	pop	{r7, pc}
 8004420:	ffff8fff 	.word	0xffff8fff
 8004424:	fffffcff 	.word	0xfffffcff
 8004428:	40012c00 	.word	0x40012c00
 800442c:	40014400 	.word	0x40014400
 8004430:	40014800 	.word	0x40014800
 8004434:	fffffbff 	.word	0xfffffbff
 8004438:	fffff7ff 	.word	0xfffff7ff

0800443c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800443c:	b580      	push	{r7, lr}
 800443e:	b086      	sub	sp, #24
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
 8004444:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6a1b      	ldr	r3, [r3, #32]
 800444a:	4a33      	ldr	r2, [pc, #204]	; (8004518 <TIM_OC3_SetConfig+0xdc>)
 800444c:	401a      	ands	r2, r3
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6a1b      	ldr	r3, [r3, #32]
 8004456:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	685b      	ldr	r3, [r3, #4]
 800445c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	69db      	ldr	r3, [r3, #28]
 8004462:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	2270      	movs	r2, #112	; 0x70
 8004468:	4393      	bics	r3, r2
 800446a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	2203      	movs	r2, #3
 8004470:	4393      	bics	r3, r2
 8004472:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	68fa      	ldr	r2, [r7, #12]
 800447a:	4313      	orrs	r3, r2
 800447c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800447e:	697b      	ldr	r3, [r7, #20]
 8004480:	4a26      	ldr	r2, [pc, #152]	; (800451c <TIM_OC3_SetConfig+0xe0>)
 8004482:	4013      	ands	r3, r2
 8004484:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	689b      	ldr	r3, [r3, #8]
 800448a:	021b      	lsls	r3, r3, #8
 800448c:	697a      	ldr	r2, [r7, #20]
 800448e:	4313      	orrs	r3, r2
 8004490:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	4a22      	ldr	r2, [pc, #136]	; (8004520 <TIM_OC3_SetConfig+0xe4>)
 8004496:	4293      	cmp	r3, r2
 8004498:	d10d      	bne.n	80044b6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800449a:	697b      	ldr	r3, [r7, #20]
 800449c:	4a21      	ldr	r2, [pc, #132]	; (8004524 <TIM_OC3_SetConfig+0xe8>)
 800449e:	4013      	ands	r3, r2
 80044a0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80044a2:	683b      	ldr	r3, [r7, #0]
 80044a4:	68db      	ldr	r3, [r3, #12]
 80044a6:	021b      	lsls	r3, r3, #8
 80044a8:	697a      	ldr	r2, [r7, #20]
 80044aa:	4313      	orrs	r3, r2
 80044ac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80044ae:	697b      	ldr	r3, [r7, #20]
 80044b0:	4a1d      	ldr	r2, [pc, #116]	; (8004528 <TIM_OC3_SetConfig+0xec>)
 80044b2:	4013      	ands	r3, r2
 80044b4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	4a19      	ldr	r2, [pc, #100]	; (8004520 <TIM_OC3_SetConfig+0xe4>)
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d007      	beq.n	80044ce <TIM_OC3_SetConfig+0x92>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	4a1a      	ldr	r2, [pc, #104]	; (800452c <TIM_OC3_SetConfig+0xf0>)
 80044c2:	4293      	cmp	r3, r2
 80044c4:	d003      	beq.n	80044ce <TIM_OC3_SetConfig+0x92>
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	4a19      	ldr	r2, [pc, #100]	; (8004530 <TIM_OC3_SetConfig+0xf4>)
 80044ca:	4293      	cmp	r3, r2
 80044cc:	d113      	bne.n	80044f6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80044ce:	693b      	ldr	r3, [r7, #16]
 80044d0:	4a18      	ldr	r2, [pc, #96]	; (8004534 <TIM_OC3_SetConfig+0xf8>)
 80044d2:	4013      	ands	r3, r2
 80044d4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80044d6:	693b      	ldr	r3, [r7, #16]
 80044d8:	4a17      	ldr	r2, [pc, #92]	; (8004538 <TIM_OC3_SetConfig+0xfc>)
 80044da:	4013      	ands	r3, r2
 80044dc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	695b      	ldr	r3, [r3, #20]
 80044e2:	011b      	lsls	r3, r3, #4
 80044e4:	693a      	ldr	r2, [r7, #16]
 80044e6:	4313      	orrs	r3, r2
 80044e8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80044ea:	683b      	ldr	r3, [r7, #0]
 80044ec:	699b      	ldr	r3, [r3, #24]
 80044ee:	011b      	lsls	r3, r3, #4
 80044f0:	693a      	ldr	r2, [r7, #16]
 80044f2:	4313      	orrs	r3, r2
 80044f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	693a      	ldr	r2, [r7, #16]
 80044fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	68fa      	ldr	r2, [r7, #12]
 8004500:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004502:	683b      	ldr	r3, [r7, #0]
 8004504:	685a      	ldr	r2, [r3, #4]
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	697a      	ldr	r2, [r7, #20]
 800450e:	621a      	str	r2, [r3, #32]
}
 8004510:	46c0      	nop			; (mov r8, r8)
 8004512:	46bd      	mov	sp, r7
 8004514:	b006      	add	sp, #24
 8004516:	bd80      	pop	{r7, pc}
 8004518:	fffffeff 	.word	0xfffffeff
 800451c:	fffffdff 	.word	0xfffffdff
 8004520:	40012c00 	.word	0x40012c00
 8004524:	fffff7ff 	.word	0xfffff7ff
 8004528:	fffffbff 	.word	0xfffffbff
 800452c:	40014400 	.word	0x40014400
 8004530:	40014800 	.word	0x40014800
 8004534:	ffffefff 	.word	0xffffefff
 8004538:	ffffdfff 	.word	0xffffdfff

0800453c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800453c:	b580      	push	{r7, lr}
 800453e:	b086      	sub	sp, #24
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]
 8004544:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6a1b      	ldr	r3, [r3, #32]
 800454a:	4a26      	ldr	r2, [pc, #152]	; (80045e4 <TIM_OC4_SetConfig+0xa8>)
 800454c:	401a      	ands	r2, r3
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6a1b      	ldr	r3, [r3, #32]
 8004556:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	685b      	ldr	r3, [r3, #4]
 800455c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	69db      	ldr	r3, [r3, #28]
 8004562:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	4a20      	ldr	r2, [pc, #128]	; (80045e8 <TIM_OC4_SetConfig+0xac>)
 8004568:	4013      	ands	r3, r2
 800456a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	4a1f      	ldr	r2, [pc, #124]	; (80045ec <TIM_OC4_SetConfig+0xb0>)
 8004570:	4013      	ands	r3, r2
 8004572:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	021b      	lsls	r3, r3, #8
 800457a:	68fa      	ldr	r2, [r7, #12]
 800457c:	4313      	orrs	r3, r2
 800457e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004580:	693b      	ldr	r3, [r7, #16]
 8004582:	4a1b      	ldr	r2, [pc, #108]	; (80045f0 <TIM_OC4_SetConfig+0xb4>)
 8004584:	4013      	ands	r3, r2
 8004586:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	689b      	ldr	r3, [r3, #8]
 800458c:	031b      	lsls	r3, r3, #12
 800458e:	693a      	ldr	r2, [r7, #16]
 8004590:	4313      	orrs	r3, r2
 8004592:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	4a17      	ldr	r2, [pc, #92]	; (80045f4 <TIM_OC4_SetConfig+0xb8>)
 8004598:	4293      	cmp	r3, r2
 800459a:	d007      	beq.n	80045ac <TIM_OC4_SetConfig+0x70>
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	4a16      	ldr	r2, [pc, #88]	; (80045f8 <TIM_OC4_SetConfig+0xbc>)
 80045a0:	4293      	cmp	r3, r2
 80045a2:	d003      	beq.n	80045ac <TIM_OC4_SetConfig+0x70>
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	4a15      	ldr	r2, [pc, #84]	; (80045fc <TIM_OC4_SetConfig+0xc0>)
 80045a8:	4293      	cmp	r3, r2
 80045aa:	d109      	bne.n	80045c0 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80045ac:	697b      	ldr	r3, [r7, #20]
 80045ae:	4a14      	ldr	r2, [pc, #80]	; (8004600 <TIM_OC4_SetConfig+0xc4>)
 80045b0:	4013      	ands	r3, r2
 80045b2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80045b4:	683b      	ldr	r3, [r7, #0]
 80045b6:	695b      	ldr	r3, [r3, #20]
 80045b8:	019b      	lsls	r3, r3, #6
 80045ba:	697a      	ldr	r2, [r7, #20]
 80045bc:	4313      	orrs	r3, r2
 80045be:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	697a      	ldr	r2, [r7, #20]
 80045c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	68fa      	ldr	r2, [r7, #12]
 80045ca:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80045cc:	683b      	ldr	r3, [r7, #0]
 80045ce:	685a      	ldr	r2, [r3, #4]
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	693a      	ldr	r2, [r7, #16]
 80045d8:	621a      	str	r2, [r3, #32]
}
 80045da:	46c0      	nop			; (mov r8, r8)
 80045dc:	46bd      	mov	sp, r7
 80045de:	b006      	add	sp, #24
 80045e0:	bd80      	pop	{r7, pc}
 80045e2:	46c0      	nop			; (mov r8, r8)
 80045e4:	ffffefff 	.word	0xffffefff
 80045e8:	ffff8fff 	.word	0xffff8fff
 80045ec:	fffffcff 	.word	0xfffffcff
 80045f0:	ffffdfff 	.word	0xffffdfff
 80045f4:	40012c00 	.word	0x40012c00
 80045f8:	40014400 	.word	0x40014400
 80045fc:	40014800 	.word	0x40014800
 8004600:	ffffbfff 	.word	0xffffbfff

08004604 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004604:	b580      	push	{r7, lr}
 8004606:	b086      	sub	sp, #24
 8004608:	af00      	add	r7, sp, #0
 800460a:	60f8      	str	r0, [r7, #12]
 800460c:	60b9      	str	r1, [r7, #8]
 800460e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	6a1b      	ldr	r3, [r3, #32]
 8004614:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	6a1b      	ldr	r3, [r3, #32]
 800461a:	2201      	movs	r2, #1
 800461c:	4393      	bics	r3, r2
 800461e:	001a      	movs	r2, r3
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	699b      	ldr	r3, [r3, #24]
 8004628:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800462a:	693b      	ldr	r3, [r7, #16]
 800462c:	22f0      	movs	r2, #240	; 0xf0
 800462e:	4393      	bics	r3, r2
 8004630:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	011b      	lsls	r3, r3, #4
 8004636:	693a      	ldr	r2, [r7, #16]
 8004638:	4313      	orrs	r3, r2
 800463a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800463c:	697b      	ldr	r3, [r7, #20]
 800463e:	220a      	movs	r2, #10
 8004640:	4393      	bics	r3, r2
 8004642:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004644:	697a      	ldr	r2, [r7, #20]
 8004646:	68bb      	ldr	r3, [r7, #8]
 8004648:	4313      	orrs	r3, r2
 800464a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	693a      	ldr	r2, [r7, #16]
 8004650:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	697a      	ldr	r2, [r7, #20]
 8004656:	621a      	str	r2, [r3, #32]
}
 8004658:	46c0      	nop			; (mov r8, r8)
 800465a:	46bd      	mov	sp, r7
 800465c:	b006      	add	sp, #24
 800465e:	bd80      	pop	{r7, pc}

08004660 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004660:	b580      	push	{r7, lr}
 8004662:	b086      	sub	sp, #24
 8004664:	af00      	add	r7, sp, #0
 8004666:	60f8      	str	r0, [r7, #12]
 8004668:	60b9      	str	r1, [r7, #8]
 800466a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	6a1b      	ldr	r3, [r3, #32]
 8004670:	2210      	movs	r2, #16
 8004672:	4393      	bics	r3, r2
 8004674:	001a      	movs	r2, r3
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	699b      	ldr	r3, [r3, #24]
 800467e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	6a1b      	ldr	r3, [r3, #32]
 8004684:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004686:	697b      	ldr	r3, [r7, #20]
 8004688:	4a0d      	ldr	r2, [pc, #52]	; (80046c0 <TIM_TI2_ConfigInputStage+0x60>)
 800468a:	4013      	ands	r3, r2
 800468c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	031b      	lsls	r3, r3, #12
 8004692:	697a      	ldr	r2, [r7, #20]
 8004694:	4313      	orrs	r3, r2
 8004696:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004698:	693b      	ldr	r3, [r7, #16]
 800469a:	22a0      	movs	r2, #160	; 0xa0
 800469c:	4393      	bics	r3, r2
 800469e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80046a0:	68bb      	ldr	r3, [r7, #8]
 80046a2:	011b      	lsls	r3, r3, #4
 80046a4:	693a      	ldr	r2, [r7, #16]
 80046a6:	4313      	orrs	r3, r2
 80046a8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	697a      	ldr	r2, [r7, #20]
 80046ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	693a      	ldr	r2, [r7, #16]
 80046b4:	621a      	str	r2, [r3, #32]
}
 80046b6:	46c0      	nop			; (mov r8, r8)
 80046b8:	46bd      	mov	sp, r7
 80046ba:	b006      	add	sp, #24
 80046bc:	bd80      	pop	{r7, pc}
 80046be:	46c0      	nop			; (mov r8, r8)
 80046c0:	ffff0fff 	.word	0xffff0fff

080046c4 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80046c4:	b580      	push	{r7, lr}
 80046c6:	b084      	sub	sp, #16
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]
 80046cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	689b      	ldr	r3, [r3, #8]
 80046d2:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	2270      	movs	r2, #112	; 0x70
 80046d8:	4393      	bics	r3, r2
 80046da:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80046dc:	683a      	ldr	r2, [r7, #0]
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	4313      	orrs	r3, r2
 80046e2:	2207      	movs	r2, #7
 80046e4:	4313      	orrs	r3, r2
 80046e6:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	68fa      	ldr	r2, [r7, #12]
 80046ec:	609a      	str	r2, [r3, #8]
}
 80046ee:	46c0      	nop			; (mov r8, r8)
 80046f0:	46bd      	mov	sp, r7
 80046f2:	b004      	add	sp, #16
 80046f4:	bd80      	pop	{r7, pc}
	...

080046f8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b086      	sub	sp, #24
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	60f8      	str	r0, [r7, #12]
 8004700:	60b9      	str	r1, [r7, #8]
 8004702:	607a      	str	r2, [r7, #4]
 8004704:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	689b      	ldr	r3, [r3, #8]
 800470a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800470c:	697b      	ldr	r3, [r7, #20]
 800470e:	4a09      	ldr	r2, [pc, #36]	; (8004734 <TIM_ETR_SetConfig+0x3c>)
 8004710:	4013      	ands	r3, r2
 8004712:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004714:	683b      	ldr	r3, [r7, #0]
 8004716:	021a      	lsls	r2, r3, #8
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	431a      	orrs	r2, r3
 800471c:	68bb      	ldr	r3, [r7, #8]
 800471e:	4313      	orrs	r3, r2
 8004720:	697a      	ldr	r2, [r7, #20]
 8004722:	4313      	orrs	r3, r2
 8004724:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	697a      	ldr	r2, [r7, #20]
 800472a:	609a      	str	r2, [r3, #8]
}
 800472c:	46c0      	nop			; (mov r8, r8)
 800472e:	46bd      	mov	sp, r7
 8004730:	b006      	add	sp, #24
 8004732:	bd80      	pop	{r7, pc}
 8004734:	ffff00ff 	.word	0xffff00ff

08004738 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004738:	b580      	push	{r7, lr}
 800473a:	b086      	sub	sp, #24
 800473c:	af00      	add	r7, sp, #0
 800473e:	60f8      	str	r0, [r7, #12]
 8004740:	60b9      	str	r1, [r7, #8]
 8004742:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004744:	68bb      	ldr	r3, [r7, #8]
 8004746:	221f      	movs	r2, #31
 8004748:	4013      	ands	r3, r2
 800474a:	2201      	movs	r2, #1
 800474c:	409a      	lsls	r2, r3
 800474e:	0013      	movs	r3, r2
 8004750:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	6a1b      	ldr	r3, [r3, #32]
 8004756:	697a      	ldr	r2, [r7, #20]
 8004758:	43d2      	mvns	r2, r2
 800475a:	401a      	ands	r2, r3
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	6a1a      	ldr	r2, [r3, #32]
 8004764:	68bb      	ldr	r3, [r7, #8]
 8004766:	211f      	movs	r1, #31
 8004768:	400b      	ands	r3, r1
 800476a:	6879      	ldr	r1, [r7, #4]
 800476c:	4099      	lsls	r1, r3
 800476e:	000b      	movs	r3, r1
 8004770:	431a      	orrs	r2, r3
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	621a      	str	r2, [r3, #32]
}
 8004776:	46c0      	nop			; (mov r8, r8)
 8004778:	46bd      	mov	sp, r7
 800477a:	b006      	add	sp, #24
 800477c:	bd80      	pop	{r7, pc}
	...

08004780 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004780:	b580      	push	{r7, lr}
 8004782:	b084      	sub	sp, #16
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
 8004788:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	223c      	movs	r2, #60	; 0x3c
 800478e:	5c9b      	ldrb	r3, [r3, r2]
 8004790:	2b01      	cmp	r3, #1
 8004792:	d101      	bne.n	8004798 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004794:	2302      	movs	r3, #2
 8004796:	e042      	b.n	800481e <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	223c      	movs	r2, #60	; 0x3c
 800479c:	2101      	movs	r1, #1
 800479e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	223d      	movs	r2, #61	; 0x3d
 80047a4:	2102      	movs	r1, #2
 80047a6:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	685b      	ldr	r3, [r3, #4]
 80047ae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	689b      	ldr	r3, [r3, #8]
 80047b6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	2270      	movs	r2, #112	; 0x70
 80047bc:	4393      	bics	r3, r2
 80047be:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80047c0:	683b      	ldr	r3, [r7, #0]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	68fa      	ldr	r2, [r7, #12]
 80047c6:	4313      	orrs	r3, r2
 80047c8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	68fa      	ldr	r2, [r7, #12]
 80047d0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	4a14      	ldr	r2, [pc, #80]	; (8004828 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 80047d8:	4293      	cmp	r3, r2
 80047da:	d00a      	beq.n	80047f2 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681a      	ldr	r2, [r3, #0]
 80047e0:	2380      	movs	r3, #128	; 0x80
 80047e2:	05db      	lsls	r3, r3, #23
 80047e4:	429a      	cmp	r2, r3
 80047e6:	d004      	beq.n	80047f2 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	4a0f      	ldr	r2, [pc, #60]	; (800482c <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 80047ee:	4293      	cmp	r3, r2
 80047f0:	d10c      	bne.n	800480c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80047f2:	68bb      	ldr	r3, [r7, #8]
 80047f4:	2280      	movs	r2, #128	; 0x80
 80047f6:	4393      	bics	r3, r2
 80047f8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80047fa:	683b      	ldr	r3, [r7, #0]
 80047fc:	685b      	ldr	r3, [r3, #4]
 80047fe:	68ba      	ldr	r2, [r7, #8]
 8004800:	4313      	orrs	r3, r2
 8004802:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	68ba      	ldr	r2, [r7, #8]
 800480a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	223d      	movs	r2, #61	; 0x3d
 8004810:	2101      	movs	r1, #1
 8004812:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	223c      	movs	r2, #60	; 0x3c
 8004818:	2100      	movs	r1, #0
 800481a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800481c:	2300      	movs	r3, #0
}
 800481e:	0018      	movs	r0, r3
 8004820:	46bd      	mov	sp, r7
 8004822:	b004      	add	sp, #16
 8004824:	bd80      	pop	{r7, pc}
 8004826:	46c0      	nop			; (mov r8, r8)
 8004828:	40012c00 	.word	0x40012c00
 800482c:	40000400 	.word	0x40000400

08004830 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004830:	b580      	push	{r7, lr}
 8004832:	b084      	sub	sp, #16
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
 8004838:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800483a:	2300      	movs	r3, #0
 800483c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	223c      	movs	r2, #60	; 0x3c
 8004842:	5c9b      	ldrb	r3, [r3, r2]
 8004844:	2b01      	cmp	r3, #1
 8004846:	d101      	bne.n	800484c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004848:	2302      	movs	r3, #2
 800484a:	e03e      	b.n	80048ca <HAL_TIMEx_ConfigBreakDeadTime+0x9a>
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	223c      	movs	r2, #60	; 0x3c
 8004850:	2101      	movs	r1, #1
 8004852:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	22ff      	movs	r2, #255	; 0xff
 8004858:	4393      	bics	r3, r2
 800485a:	001a      	movs	r2, r3
 800485c:	683b      	ldr	r3, [r7, #0]
 800485e:	68db      	ldr	r3, [r3, #12]
 8004860:	4313      	orrs	r3, r2
 8004862:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	4a1b      	ldr	r2, [pc, #108]	; (80048d4 <HAL_TIMEx_ConfigBreakDeadTime+0xa4>)
 8004868:	401a      	ands	r2, r3
 800486a:	683b      	ldr	r3, [r7, #0]
 800486c:	689b      	ldr	r3, [r3, #8]
 800486e:	4313      	orrs	r3, r2
 8004870:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	4a18      	ldr	r2, [pc, #96]	; (80048d8 <HAL_TIMEx_ConfigBreakDeadTime+0xa8>)
 8004876:	401a      	ands	r2, r3
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	685b      	ldr	r3, [r3, #4]
 800487c:	4313      	orrs	r3, r2
 800487e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	4a16      	ldr	r2, [pc, #88]	; (80048dc <HAL_TIMEx_ConfigBreakDeadTime+0xac>)
 8004884:	401a      	ands	r2, r3
 8004886:	683b      	ldr	r3, [r7, #0]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	4313      	orrs	r3, r2
 800488c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	4a13      	ldr	r2, [pc, #76]	; (80048e0 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>)
 8004892:	401a      	ands	r2, r3
 8004894:	683b      	ldr	r3, [r7, #0]
 8004896:	691b      	ldr	r3, [r3, #16]
 8004898:	4313      	orrs	r3, r2
 800489a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	4a11      	ldr	r2, [pc, #68]	; (80048e4 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>)
 80048a0:	401a      	ands	r2, r3
 80048a2:	683b      	ldr	r3, [r7, #0]
 80048a4:	695b      	ldr	r3, [r3, #20]
 80048a6:	4313      	orrs	r3, r2
 80048a8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	4a0e      	ldr	r2, [pc, #56]	; (80048e8 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>)
 80048ae:	401a      	ands	r2, r3
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	69db      	ldr	r3, [r3, #28]
 80048b4:	4313      	orrs	r3, r2
 80048b6:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	68fa      	ldr	r2, [r7, #12]
 80048be:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	223c      	movs	r2, #60	; 0x3c
 80048c4:	2100      	movs	r1, #0
 80048c6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80048c8:	2300      	movs	r3, #0
}
 80048ca:	0018      	movs	r0, r3
 80048cc:	46bd      	mov	sp, r7
 80048ce:	b004      	add	sp, #16
 80048d0:	bd80      	pop	{r7, pc}
 80048d2:	46c0      	nop			; (mov r8, r8)
 80048d4:	fffffcff 	.word	0xfffffcff
 80048d8:	fffffbff 	.word	0xfffffbff
 80048dc:	fffff7ff 	.word	0xfffff7ff
 80048e0:	ffffefff 	.word	0xffffefff
 80048e4:	ffffdfff 	.word	0xffffdfff
 80048e8:	ffffbfff 	.word	0xffffbfff

080048ec <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80048ec:	b580      	push	{r7, lr}
 80048ee:	b082      	sub	sp, #8
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d101      	bne.n	80048fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80048fa:	2301      	movs	r3, #1
 80048fc:	e044      	b.n	8004988 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004902:	2b00      	cmp	r3, #0
 8004904:	d107      	bne.n	8004916 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	2274      	movs	r2, #116	; 0x74
 800490a:	2100      	movs	r1, #0
 800490c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	0018      	movs	r0, r3
 8004912:	f7fd ff41 	bl	8002798 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	2224      	movs	r2, #36	; 0x24
 800491a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	681a      	ldr	r2, [r3, #0]
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	2101      	movs	r1, #1
 8004928:	438a      	bics	r2, r1
 800492a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	0018      	movs	r0, r3
 8004930:	f000 fb86 	bl	8005040 <UART_SetConfig>
 8004934:	0003      	movs	r3, r0
 8004936:	2b01      	cmp	r3, #1
 8004938:	d101      	bne.n	800493e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800493a:	2301      	movs	r3, #1
 800493c:	e024      	b.n	8004988 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004942:	2b00      	cmp	r3, #0
 8004944:	d003      	beq.n	800494e <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	0018      	movs	r0, r3
 800494a:	f000 fcb9 	bl	80052c0 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	685a      	ldr	r2, [r3, #4]
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	490d      	ldr	r1, [pc, #52]	; (8004990 <HAL_UART_Init+0xa4>)
 800495a:	400a      	ands	r2, r1
 800495c:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	689a      	ldr	r2, [r3, #8]
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	212a      	movs	r1, #42	; 0x2a
 800496a:	438a      	bics	r2, r1
 800496c:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	681a      	ldr	r2, [r3, #0]
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	2101      	movs	r1, #1
 800497a:	430a      	orrs	r2, r1
 800497c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	0018      	movs	r0, r3
 8004982:	f000 fd51 	bl	8005428 <UART_CheckIdleState>
 8004986:	0003      	movs	r3, r0
}
 8004988:	0018      	movs	r0, r3
 800498a:	46bd      	mov	sp, r7
 800498c:	b002      	add	sp, #8
 800498e:	bd80      	pop	{r7, pc}
 8004990:	ffffb7ff 	.word	0xffffb7ff

08004994 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004994:	b580      	push	{r7, lr}
 8004996:	b088      	sub	sp, #32
 8004998:	af00      	add	r7, sp, #0
 800499a:	60f8      	str	r0, [r7, #12]
 800499c:	60b9      	str	r1, [r7, #8]
 800499e:	1dbb      	adds	r3, r7, #6
 80049a0:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80049a6:	2b20      	cmp	r3, #32
 80049a8:	d150      	bne.n	8004a4c <HAL_UART_Receive_IT+0xb8>
  {
    if ((pData == NULL) || (Size == 0U))
 80049aa:	68bb      	ldr	r3, [r7, #8]
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d003      	beq.n	80049b8 <HAL_UART_Receive_IT+0x24>
 80049b0:	1dbb      	adds	r3, r7, #6
 80049b2:	881b      	ldrh	r3, [r3, #0]
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d101      	bne.n	80049bc <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80049b8:	2301      	movs	r3, #1
 80049ba:	e048      	b.n	8004a4e <HAL_UART_Receive_IT+0xba>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	689a      	ldr	r2, [r3, #8]
 80049c0:	2380      	movs	r3, #128	; 0x80
 80049c2:	015b      	lsls	r3, r3, #5
 80049c4:	429a      	cmp	r2, r3
 80049c6:	d109      	bne.n	80049dc <HAL_UART_Receive_IT+0x48>
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	691b      	ldr	r3, [r3, #16]
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d105      	bne.n	80049dc <HAL_UART_Receive_IT+0x48>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80049d0:	68bb      	ldr	r3, [r7, #8]
 80049d2:	2201      	movs	r2, #1
 80049d4:	4013      	ands	r3, r2
 80049d6:	d001      	beq.n	80049dc <HAL_UART_Receive_IT+0x48>
      {
        return  HAL_ERROR;
 80049d8:	2301      	movs	r3, #1
 80049da:	e038      	b.n	8004a4e <HAL_UART_Receive_IT+0xba>
      }
    }

    __HAL_LOCK(huart);
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	2274      	movs	r2, #116	; 0x74
 80049e0:	5c9b      	ldrb	r3, [r3, r2]
 80049e2:	2b01      	cmp	r3, #1
 80049e4:	d101      	bne.n	80049ea <HAL_UART_Receive_IT+0x56>
 80049e6:	2302      	movs	r3, #2
 80049e8:	e031      	b.n	8004a4e <HAL_UART_Receive_IT+0xba>
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	2274      	movs	r2, #116	; 0x74
 80049ee:	2101      	movs	r1, #1
 80049f0:	5499      	strb	r1, [r3, r2]

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	2200      	movs	r2, #0
 80049f6:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	685a      	ldr	r2, [r3, #4]
 80049fe:	2380      	movs	r3, #128	; 0x80
 8004a00:	041b      	lsls	r3, r3, #16
 8004a02:	4013      	ands	r3, r2
 8004a04:	d019      	beq.n	8004a3a <HAL_UART_Receive_IT+0xa6>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a06:	f3ef 8310 	mrs	r3, PRIMASK
 8004a0a:	613b      	str	r3, [r7, #16]
  return(result);
 8004a0c:	693b      	ldr	r3, [r7, #16]
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004a0e:	61fb      	str	r3, [r7, #28]
 8004a10:	2301      	movs	r3, #1
 8004a12:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a14:	697b      	ldr	r3, [r7, #20]
 8004a16:	f383 8810 	msr	PRIMASK, r3
}
 8004a1a:	46c0      	nop			; (mov r8, r8)
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	681a      	ldr	r2, [r3, #0]
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	2180      	movs	r1, #128	; 0x80
 8004a28:	04c9      	lsls	r1, r1, #19
 8004a2a:	430a      	orrs	r2, r1
 8004a2c:	601a      	str	r2, [r3, #0]
 8004a2e:	69fb      	ldr	r3, [r7, #28]
 8004a30:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a32:	69bb      	ldr	r3, [r7, #24]
 8004a34:	f383 8810 	msr	PRIMASK, r3
}
 8004a38:	46c0      	nop			; (mov r8, r8)
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004a3a:	1dbb      	adds	r3, r7, #6
 8004a3c:	881a      	ldrh	r2, [r3, #0]
 8004a3e:	68b9      	ldr	r1, [r7, #8]
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	0018      	movs	r0, r3
 8004a44:	f000 fdfc 	bl	8005640 <UART_Start_Receive_IT>
 8004a48:	0003      	movs	r3, r0
 8004a4a:	e000      	b.n	8004a4e <HAL_UART_Receive_IT+0xba>
  }
  else
  {
    return HAL_BUSY;
 8004a4c:	2302      	movs	r3, #2
  }
}
 8004a4e:	0018      	movs	r0, r3
 8004a50:	46bd      	mov	sp, r7
 8004a52:	b008      	add	sp, #32
 8004a54:	bd80      	pop	{r7, pc}
	...

08004a58 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004a58:	b590      	push	{r4, r7, lr}
 8004a5a:	b0ab      	sub	sp, #172	; 0xac
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	69db      	ldr	r3, [r3, #28]
 8004a66:	22a4      	movs	r2, #164	; 0xa4
 8004a68:	18b9      	adds	r1, r7, r2
 8004a6a:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	20a0      	movs	r0, #160	; 0xa0
 8004a74:	1839      	adds	r1, r7, r0
 8004a76:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	689b      	ldr	r3, [r3, #8]
 8004a7e:	219c      	movs	r1, #156	; 0x9c
 8004a80:	1879      	adds	r1, r7, r1
 8004a82:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004a84:	0011      	movs	r1, r2
 8004a86:	18bb      	adds	r3, r7, r2
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	4a99      	ldr	r2, [pc, #612]	; (8004cf0 <HAL_UART_IRQHandler+0x298>)
 8004a8c:	4013      	ands	r3, r2
 8004a8e:	2298      	movs	r2, #152	; 0x98
 8004a90:	18bc      	adds	r4, r7, r2
 8004a92:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8004a94:	18bb      	adds	r3, r7, r2
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d114      	bne.n	8004ac6 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004a9c:	187b      	adds	r3, r7, r1
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	2220      	movs	r2, #32
 8004aa2:	4013      	ands	r3, r2
 8004aa4:	d00f      	beq.n	8004ac6 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004aa6:	183b      	adds	r3, r7, r0
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	2220      	movs	r2, #32
 8004aac:	4013      	ands	r3, r2
 8004aae:	d00a      	beq.n	8004ac6 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d100      	bne.n	8004aba <HAL_UART_IRQHandler+0x62>
 8004ab8:	e296      	b.n	8004fe8 <HAL_UART_IRQHandler+0x590>
      {
        huart->RxISR(huart);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004abe:	687a      	ldr	r2, [r7, #4]
 8004ac0:	0010      	movs	r0, r2
 8004ac2:	4798      	blx	r3
      }
      return;
 8004ac4:	e290      	b.n	8004fe8 <HAL_UART_IRQHandler+0x590>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004ac6:	2398      	movs	r3, #152	; 0x98
 8004ac8:	18fb      	adds	r3, r7, r3
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d100      	bne.n	8004ad2 <HAL_UART_IRQHandler+0x7a>
 8004ad0:	e114      	b.n	8004cfc <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004ad2:	239c      	movs	r3, #156	; 0x9c
 8004ad4:	18fb      	adds	r3, r7, r3
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	2201      	movs	r2, #1
 8004ada:	4013      	ands	r3, r2
 8004adc:	d106      	bne.n	8004aec <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004ade:	23a0      	movs	r3, #160	; 0xa0
 8004ae0:	18fb      	adds	r3, r7, r3
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	4a83      	ldr	r2, [pc, #524]	; (8004cf4 <HAL_UART_IRQHandler+0x29c>)
 8004ae6:	4013      	ands	r3, r2
 8004ae8:	d100      	bne.n	8004aec <HAL_UART_IRQHandler+0x94>
 8004aea:	e107      	b.n	8004cfc <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004aec:	23a4      	movs	r3, #164	; 0xa4
 8004aee:	18fb      	adds	r3, r7, r3
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	2201      	movs	r2, #1
 8004af4:	4013      	ands	r3, r2
 8004af6:	d012      	beq.n	8004b1e <HAL_UART_IRQHandler+0xc6>
 8004af8:	23a0      	movs	r3, #160	; 0xa0
 8004afa:	18fb      	adds	r3, r7, r3
 8004afc:	681a      	ldr	r2, [r3, #0]
 8004afe:	2380      	movs	r3, #128	; 0x80
 8004b00:	005b      	lsls	r3, r3, #1
 8004b02:	4013      	ands	r3, r2
 8004b04:	d00b      	beq.n	8004b1e <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	2201      	movs	r2, #1
 8004b0c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	2280      	movs	r2, #128	; 0x80
 8004b12:	589b      	ldr	r3, [r3, r2]
 8004b14:	2201      	movs	r2, #1
 8004b16:	431a      	orrs	r2, r3
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2180      	movs	r1, #128	; 0x80
 8004b1c:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004b1e:	23a4      	movs	r3, #164	; 0xa4
 8004b20:	18fb      	adds	r3, r7, r3
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	2202      	movs	r2, #2
 8004b26:	4013      	ands	r3, r2
 8004b28:	d011      	beq.n	8004b4e <HAL_UART_IRQHandler+0xf6>
 8004b2a:	239c      	movs	r3, #156	; 0x9c
 8004b2c:	18fb      	adds	r3, r7, r3
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	2201      	movs	r2, #1
 8004b32:	4013      	ands	r3, r2
 8004b34:	d00b      	beq.n	8004b4e <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	2202      	movs	r2, #2
 8004b3c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	2280      	movs	r2, #128	; 0x80
 8004b42:	589b      	ldr	r3, [r3, r2]
 8004b44:	2204      	movs	r2, #4
 8004b46:	431a      	orrs	r2, r3
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2180      	movs	r1, #128	; 0x80
 8004b4c:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004b4e:	23a4      	movs	r3, #164	; 0xa4
 8004b50:	18fb      	adds	r3, r7, r3
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	2204      	movs	r2, #4
 8004b56:	4013      	ands	r3, r2
 8004b58:	d011      	beq.n	8004b7e <HAL_UART_IRQHandler+0x126>
 8004b5a:	239c      	movs	r3, #156	; 0x9c
 8004b5c:	18fb      	adds	r3, r7, r3
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	2201      	movs	r2, #1
 8004b62:	4013      	ands	r3, r2
 8004b64:	d00b      	beq.n	8004b7e <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	2204      	movs	r2, #4
 8004b6c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	2280      	movs	r2, #128	; 0x80
 8004b72:	589b      	ldr	r3, [r3, r2]
 8004b74:	2202      	movs	r2, #2
 8004b76:	431a      	orrs	r2, r3
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2180      	movs	r1, #128	; 0x80
 8004b7c:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004b7e:	23a4      	movs	r3, #164	; 0xa4
 8004b80:	18fb      	adds	r3, r7, r3
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	2208      	movs	r2, #8
 8004b86:	4013      	ands	r3, r2
 8004b88:	d017      	beq.n	8004bba <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004b8a:	23a0      	movs	r3, #160	; 0xa0
 8004b8c:	18fb      	adds	r3, r7, r3
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	2220      	movs	r2, #32
 8004b92:	4013      	ands	r3, r2
 8004b94:	d105      	bne.n	8004ba2 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004b96:	239c      	movs	r3, #156	; 0x9c
 8004b98:	18fb      	adds	r3, r7, r3
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	2201      	movs	r2, #1
 8004b9e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004ba0:	d00b      	beq.n	8004bba <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	2208      	movs	r2, #8
 8004ba8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	2280      	movs	r2, #128	; 0x80
 8004bae:	589b      	ldr	r3, [r3, r2]
 8004bb0:	2208      	movs	r2, #8
 8004bb2:	431a      	orrs	r2, r3
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2180      	movs	r1, #128	; 0x80
 8004bb8:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004bba:	23a4      	movs	r3, #164	; 0xa4
 8004bbc:	18fb      	adds	r3, r7, r3
 8004bbe:	681a      	ldr	r2, [r3, #0]
 8004bc0:	2380      	movs	r3, #128	; 0x80
 8004bc2:	011b      	lsls	r3, r3, #4
 8004bc4:	4013      	ands	r3, r2
 8004bc6:	d013      	beq.n	8004bf0 <HAL_UART_IRQHandler+0x198>
 8004bc8:	23a0      	movs	r3, #160	; 0xa0
 8004bca:	18fb      	adds	r3, r7, r3
 8004bcc:	681a      	ldr	r2, [r3, #0]
 8004bce:	2380      	movs	r3, #128	; 0x80
 8004bd0:	04db      	lsls	r3, r3, #19
 8004bd2:	4013      	ands	r3, r2
 8004bd4:	d00c      	beq.n	8004bf0 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	2280      	movs	r2, #128	; 0x80
 8004bdc:	0112      	lsls	r2, r2, #4
 8004bde:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2280      	movs	r2, #128	; 0x80
 8004be4:	589b      	ldr	r3, [r3, r2]
 8004be6:	2220      	movs	r2, #32
 8004be8:	431a      	orrs	r2, r3
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	2180      	movs	r1, #128	; 0x80
 8004bee:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2280      	movs	r2, #128	; 0x80
 8004bf4:	589b      	ldr	r3, [r3, r2]
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d100      	bne.n	8004bfc <HAL_UART_IRQHandler+0x1a4>
 8004bfa:	e1f7      	b.n	8004fec <HAL_UART_IRQHandler+0x594>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004bfc:	23a4      	movs	r3, #164	; 0xa4
 8004bfe:	18fb      	adds	r3, r7, r3
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	2220      	movs	r2, #32
 8004c04:	4013      	ands	r3, r2
 8004c06:	d00e      	beq.n	8004c26 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004c08:	23a0      	movs	r3, #160	; 0xa0
 8004c0a:	18fb      	adds	r3, r7, r3
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	2220      	movs	r2, #32
 8004c10:	4013      	ands	r3, r2
 8004c12:	d008      	beq.n	8004c26 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d004      	beq.n	8004c26 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004c20:	687a      	ldr	r2, [r7, #4]
 8004c22:	0010      	movs	r0, r2
 8004c24:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	2280      	movs	r2, #128	; 0x80
 8004c2a:	589b      	ldr	r3, [r3, r2]
 8004c2c:	2194      	movs	r1, #148	; 0x94
 8004c2e:	187a      	adds	r2, r7, r1
 8004c30:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	689b      	ldr	r3, [r3, #8]
 8004c38:	2240      	movs	r2, #64	; 0x40
 8004c3a:	4013      	ands	r3, r2
 8004c3c:	2b40      	cmp	r3, #64	; 0x40
 8004c3e:	d004      	beq.n	8004c4a <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004c40:	187b      	adds	r3, r7, r1
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	2228      	movs	r2, #40	; 0x28
 8004c46:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004c48:	d047      	beq.n	8004cda <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	0018      	movs	r0, r3
 8004c4e:	f000 fda7 	bl	80057a0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	689b      	ldr	r3, [r3, #8]
 8004c58:	2240      	movs	r2, #64	; 0x40
 8004c5a:	4013      	ands	r3, r2
 8004c5c:	2b40      	cmp	r3, #64	; 0x40
 8004c5e:	d137      	bne.n	8004cd0 <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c60:	f3ef 8310 	mrs	r3, PRIMASK
 8004c64:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8004c66:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004c68:	2090      	movs	r0, #144	; 0x90
 8004c6a:	183a      	adds	r2, r7, r0
 8004c6c:	6013      	str	r3, [r2, #0]
 8004c6e:	2301      	movs	r3, #1
 8004c70:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c72:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004c74:	f383 8810 	msr	PRIMASK, r3
}
 8004c78:	46c0      	nop			; (mov r8, r8)
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	689a      	ldr	r2, [r3, #8]
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	2140      	movs	r1, #64	; 0x40
 8004c86:	438a      	bics	r2, r1
 8004c88:	609a      	str	r2, [r3, #8]
 8004c8a:	183b      	adds	r3, r7, r0
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c90:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004c92:	f383 8810 	msr	PRIMASK, r3
}
 8004c96:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d012      	beq.n	8004cc6 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ca4:	4a14      	ldr	r2, [pc, #80]	; (8004cf8 <HAL_UART_IRQHandler+0x2a0>)
 8004ca6:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cac:	0018      	movs	r0, r3
 8004cae:	f7fd ffc9 	bl	8002c44 <HAL_DMA_Abort_IT>
 8004cb2:	1e03      	subs	r3, r0, #0
 8004cb4:	d01a      	beq.n	8004cec <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cc0:	0018      	movs	r0, r3
 8004cc2:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004cc4:	e012      	b.n	8004cec <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	0018      	movs	r0, r3
 8004cca:	f000 f9a5 	bl	8005018 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004cce:	e00d      	b.n	8004cec <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	0018      	movs	r0, r3
 8004cd4:	f000 f9a0 	bl	8005018 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004cd8:	e008      	b.n	8004cec <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	0018      	movs	r0, r3
 8004cde:	f000 f99b 	bl	8005018 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	2280      	movs	r2, #128	; 0x80
 8004ce6:	2100      	movs	r1, #0
 8004ce8:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8004cea:	e17f      	b.n	8004fec <HAL_UART_IRQHandler+0x594>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004cec:	46c0      	nop			; (mov r8, r8)
    return;
 8004cee:	e17d      	b.n	8004fec <HAL_UART_IRQHandler+0x594>
 8004cf0:	0000080f 	.word	0x0000080f
 8004cf4:	04000120 	.word	0x04000120
 8004cf8:	08005865 	.word	0x08005865

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d00:	2b01      	cmp	r3, #1
 8004d02:	d000      	beq.n	8004d06 <HAL_UART_IRQHandler+0x2ae>
 8004d04:	e131      	b.n	8004f6a <HAL_UART_IRQHandler+0x512>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004d06:	23a4      	movs	r3, #164	; 0xa4
 8004d08:	18fb      	adds	r3, r7, r3
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	2210      	movs	r2, #16
 8004d0e:	4013      	ands	r3, r2
 8004d10:	d100      	bne.n	8004d14 <HAL_UART_IRQHandler+0x2bc>
 8004d12:	e12a      	b.n	8004f6a <HAL_UART_IRQHandler+0x512>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004d14:	23a0      	movs	r3, #160	; 0xa0
 8004d16:	18fb      	adds	r3, r7, r3
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	2210      	movs	r2, #16
 8004d1c:	4013      	ands	r3, r2
 8004d1e:	d100      	bne.n	8004d22 <HAL_UART_IRQHandler+0x2ca>
 8004d20:	e123      	b.n	8004f6a <HAL_UART_IRQHandler+0x512>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	2210      	movs	r2, #16
 8004d28:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	689b      	ldr	r3, [r3, #8]
 8004d30:	2240      	movs	r2, #64	; 0x40
 8004d32:	4013      	ands	r3, r2
 8004d34:	2b40      	cmp	r3, #64	; 0x40
 8004d36:	d000      	beq.n	8004d3a <HAL_UART_IRQHandler+0x2e2>
 8004d38:	e09b      	b.n	8004e72 <HAL_UART_IRQHandler+0x41a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	685a      	ldr	r2, [r3, #4]
 8004d42:	217e      	movs	r1, #126	; 0x7e
 8004d44:	187b      	adds	r3, r7, r1
 8004d46:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8004d48:	187b      	adds	r3, r7, r1
 8004d4a:	881b      	ldrh	r3, [r3, #0]
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d100      	bne.n	8004d52 <HAL_UART_IRQHandler+0x2fa>
 8004d50:	e14e      	b.n	8004ff0 <HAL_UART_IRQHandler+0x598>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	2258      	movs	r2, #88	; 0x58
 8004d56:	5a9b      	ldrh	r3, [r3, r2]
 8004d58:	187a      	adds	r2, r7, r1
 8004d5a:	8812      	ldrh	r2, [r2, #0]
 8004d5c:	429a      	cmp	r2, r3
 8004d5e:	d300      	bcc.n	8004d62 <HAL_UART_IRQHandler+0x30a>
 8004d60:	e146      	b.n	8004ff0 <HAL_UART_IRQHandler+0x598>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	187a      	adds	r2, r7, r1
 8004d66:	215a      	movs	r1, #90	; 0x5a
 8004d68:	8812      	ldrh	r2, [r2, #0]
 8004d6a:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d70:	699b      	ldr	r3, [r3, #24]
 8004d72:	2b20      	cmp	r3, #32
 8004d74:	d06e      	beq.n	8004e54 <HAL_UART_IRQHandler+0x3fc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d76:	f3ef 8310 	mrs	r3, PRIMASK
 8004d7a:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8004d7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004d7e:	67bb      	str	r3, [r7, #120]	; 0x78
 8004d80:	2301      	movs	r3, #1
 8004d82:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d86:	f383 8810 	msr	PRIMASK, r3
}
 8004d8a:	46c0      	nop			; (mov r8, r8)
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	681a      	ldr	r2, [r3, #0]
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	499a      	ldr	r1, [pc, #616]	; (8005000 <HAL_UART_IRQHandler+0x5a8>)
 8004d98:	400a      	ands	r2, r1
 8004d9a:	601a      	str	r2, [r3, #0]
 8004d9c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004d9e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004da0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004da2:	f383 8810 	msr	PRIMASK, r3
}
 8004da6:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004da8:	f3ef 8310 	mrs	r3, PRIMASK
 8004dac:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8004dae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004db0:	677b      	str	r3, [r7, #116]	; 0x74
 8004db2:	2301      	movs	r3, #1
 8004db4:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004db6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004db8:	f383 8810 	msr	PRIMASK, r3
}
 8004dbc:	46c0      	nop			; (mov r8, r8)
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	689a      	ldr	r2, [r3, #8]
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	2101      	movs	r1, #1
 8004dca:	438a      	bics	r2, r1
 8004dcc:	609a      	str	r2, [r3, #8]
 8004dce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004dd0:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004dd2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004dd4:	f383 8810 	msr	PRIMASK, r3
}
 8004dd8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004dda:	f3ef 8310 	mrs	r3, PRIMASK
 8004dde:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8004de0:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004de2:	673b      	str	r3, [r7, #112]	; 0x70
 8004de4:	2301      	movs	r3, #1
 8004de6:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004de8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004dea:	f383 8810 	msr	PRIMASK, r3
}
 8004dee:	46c0      	nop			; (mov r8, r8)
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	689a      	ldr	r2, [r3, #8]
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	2140      	movs	r1, #64	; 0x40
 8004dfc:	438a      	bics	r2, r1
 8004dfe:	609a      	str	r2, [r3, #8]
 8004e00:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004e02:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e04:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004e06:	f383 8810 	msr	PRIMASK, r3
}
 8004e0a:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2220      	movs	r2, #32
 8004e10:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	2200      	movs	r2, #0
 8004e16:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e18:	f3ef 8310 	mrs	r3, PRIMASK
 8004e1c:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8004e1e:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e20:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004e22:	2301      	movs	r3, #1
 8004e24:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e26:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004e28:	f383 8810 	msr	PRIMASK, r3
}
 8004e2c:	46c0      	nop			; (mov r8, r8)
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	681a      	ldr	r2, [r3, #0]
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	2110      	movs	r1, #16
 8004e3a:	438a      	bics	r2, r1
 8004e3c:	601a      	str	r2, [r3, #0]
 8004e3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e40:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e42:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004e44:	f383 8810 	msr	PRIMASK, r3
}
 8004e48:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e4e:	0018      	movs	r0, r3
 8004e50:	f7fd fec0 	bl	8002bd4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2258      	movs	r2, #88	; 0x58
 8004e58:	5a9a      	ldrh	r2, [r3, r2]
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	215a      	movs	r1, #90	; 0x5a
 8004e5e:	5a5b      	ldrh	r3, [r3, r1]
 8004e60:	b29b      	uxth	r3, r3
 8004e62:	1ad3      	subs	r3, r2, r3
 8004e64:	b29a      	uxth	r2, r3
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	0011      	movs	r1, r2
 8004e6a:	0018      	movs	r0, r3
 8004e6c:	f000 f8dc 	bl	8005028 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004e70:	e0be      	b.n	8004ff0 <HAL_UART_IRQHandler+0x598>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	2258      	movs	r2, #88	; 0x58
 8004e76:	5a99      	ldrh	r1, [r3, r2]
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	225a      	movs	r2, #90	; 0x5a
 8004e7c:	5a9b      	ldrh	r3, [r3, r2]
 8004e7e:	b29a      	uxth	r2, r3
 8004e80:	208e      	movs	r0, #142	; 0x8e
 8004e82:	183b      	adds	r3, r7, r0
 8004e84:	1a8a      	subs	r2, r1, r2
 8004e86:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	225a      	movs	r2, #90	; 0x5a
 8004e8c:	5a9b      	ldrh	r3, [r3, r2]
 8004e8e:	b29b      	uxth	r3, r3
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d100      	bne.n	8004e96 <HAL_UART_IRQHandler+0x43e>
 8004e94:	e0ae      	b.n	8004ff4 <HAL_UART_IRQHandler+0x59c>
          && (nb_rx_data > 0U))
 8004e96:	183b      	adds	r3, r7, r0
 8004e98:	881b      	ldrh	r3, [r3, #0]
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d100      	bne.n	8004ea0 <HAL_UART_IRQHandler+0x448>
 8004e9e:	e0a9      	b.n	8004ff4 <HAL_UART_IRQHandler+0x59c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ea0:	f3ef 8310 	mrs	r3, PRIMASK
 8004ea4:	60fb      	str	r3, [r7, #12]
  return(result);
 8004ea6:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004ea8:	2488      	movs	r4, #136	; 0x88
 8004eaa:	193a      	adds	r2, r7, r4
 8004eac:	6013      	str	r3, [r2, #0]
 8004eae:	2301      	movs	r3, #1
 8004eb0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004eb2:	693b      	ldr	r3, [r7, #16]
 8004eb4:	f383 8810 	msr	PRIMASK, r3
}
 8004eb8:	46c0      	nop			; (mov r8, r8)
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	681a      	ldr	r2, [r3, #0]
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	494f      	ldr	r1, [pc, #316]	; (8005004 <HAL_UART_IRQHandler+0x5ac>)
 8004ec6:	400a      	ands	r2, r1
 8004ec8:	601a      	str	r2, [r3, #0]
 8004eca:	193b      	adds	r3, r7, r4
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ed0:	697b      	ldr	r3, [r7, #20]
 8004ed2:	f383 8810 	msr	PRIMASK, r3
}
 8004ed6:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ed8:	f3ef 8310 	mrs	r3, PRIMASK
 8004edc:	61bb      	str	r3, [r7, #24]
  return(result);
 8004ede:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ee0:	2484      	movs	r4, #132	; 0x84
 8004ee2:	193a      	adds	r2, r7, r4
 8004ee4:	6013      	str	r3, [r2, #0]
 8004ee6:	2301      	movs	r3, #1
 8004ee8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004eea:	69fb      	ldr	r3, [r7, #28]
 8004eec:	f383 8810 	msr	PRIMASK, r3
}
 8004ef0:	46c0      	nop			; (mov r8, r8)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	689a      	ldr	r2, [r3, #8]
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	2101      	movs	r1, #1
 8004efe:	438a      	bics	r2, r1
 8004f00:	609a      	str	r2, [r3, #8]
 8004f02:	193b      	adds	r3, r7, r4
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f08:	6a3b      	ldr	r3, [r7, #32]
 8004f0a:	f383 8810 	msr	PRIMASK, r3
}
 8004f0e:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2220      	movs	r2, #32
 8004f14:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	2200      	movs	r2, #0
 8004f1a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2200      	movs	r2, #0
 8004f20:	665a      	str	r2, [r3, #100]	; 0x64
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f22:	f3ef 8310 	mrs	r3, PRIMASK
 8004f26:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8004f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f2a:	2480      	movs	r4, #128	; 0x80
 8004f2c:	193a      	adds	r2, r7, r4
 8004f2e:	6013      	str	r3, [r2, #0]
 8004f30:	2301      	movs	r3, #1
 8004f32:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f36:	f383 8810 	msr	PRIMASK, r3
}
 8004f3a:	46c0      	nop			; (mov r8, r8)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	681a      	ldr	r2, [r3, #0]
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	2110      	movs	r1, #16
 8004f48:	438a      	bics	r2, r1
 8004f4a:	601a      	str	r2, [r3, #0]
 8004f4c:	193b      	adds	r3, r7, r4
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f54:	f383 8810 	msr	PRIMASK, r3
}
 8004f58:	46c0      	nop			; (mov r8, r8)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004f5a:	183b      	adds	r3, r7, r0
 8004f5c:	881a      	ldrh	r2, [r3, #0]
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	0011      	movs	r1, r2
 8004f62:	0018      	movs	r0, r3
 8004f64:	f000 f860 	bl	8005028 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004f68:	e044      	b.n	8004ff4 <HAL_UART_IRQHandler+0x59c>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004f6a:	23a4      	movs	r3, #164	; 0xa4
 8004f6c:	18fb      	adds	r3, r7, r3
 8004f6e:	681a      	ldr	r2, [r3, #0]
 8004f70:	2380      	movs	r3, #128	; 0x80
 8004f72:	035b      	lsls	r3, r3, #13
 8004f74:	4013      	ands	r3, r2
 8004f76:	d010      	beq.n	8004f9a <HAL_UART_IRQHandler+0x542>
 8004f78:	239c      	movs	r3, #156	; 0x9c
 8004f7a:	18fb      	adds	r3, r7, r3
 8004f7c:	681a      	ldr	r2, [r3, #0]
 8004f7e:	2380      	movs	r3, #128	; 0x80
 8004f80:	03db      	lsls	r3, r3, #15
 8004f82:	4013      	ands	r3, r2
 8004f84:	d009      	beq.n	8004f9a <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	2280      	movs	r2, #128	; 0x80
 8004f8c:	0352      	lsls	r2, r2, #13
 8004f8e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	0018      	movs	r0, r3
 8004f94:	f000 fe10 	bl	8005bb8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004f98:	e02f      	b.n	8004ffa <HAL_UART_IRQHandler+0x5a2>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004f9a:	23a4      	movs	r3, #164	; 0xa4
 8004f9c:	18fb      	adds	r3, r7, r3
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	2280      	movs	r2, #128	; 0x80
 8004fa2:	4013      	ands	r3, r2
 8004fa4:	d00f      	beq.n	8004fc6 <HAL_UART_IRQHandler+0x56e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004fa6:	23a0      	movs	r3, #160	; 0xa0
 8004fa8:	18fb      	adds	r3, r7, r3
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	2280      	movs	r2, #128	; 0x80
 8004fae:	4013      	ands	r3, r2
 8004fb0:	d009      	beq.n	8004fc6 <HAL_UART_IRQHandler+0x56e>
  {
    if (huart->TxISR != NULL)
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d01e      	beq.n	8004ff8 <HAL_UART_IRQHandler+0x5a0>
    {
      huart->TxISR(huart);
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004fbe:	687a      	ldr	r2, [r7, #4]
 8004fc0:	0010      	movs	r0, r2
 8004fc2:	4798      	blx	r3
    }
    return;
 8004fc4:	e018      	b.n	8004ff8 <HAL_UART_IRQHandler+0x5a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004fc6:	23a4      	movs	r3, #164	; 0xa4
 8004fc8:	18fb      	adds	r3, r7, r3
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	2240      	movs	r2, #64	; 0x40
 8004fce:	4013      	ands	r3, r2
 8004fd0:	d013      	beq.n	8004ffa <HAL_UART_IRQHandler+0x5a2>
 8004fd2:	23a0      	movs	r3, #160	; 0xa0
 8004fd4:	18fb      	adds	r3, r7, r3
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	2240      	movs	r2, #64	; 0x40
 8004fda:	4013      	ands	r3, r2
 8004fdc:	d00d      	beq.n	8004ffa <HAL_UART_IRQHandler+0x5a2>
  {
    UART_EndTransmit_IT(huart);
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	0018      	movs	r0, r3
 8004fe2:	f000 fc56 	bl	8005892 <UART_EndTransmit_IT>
    return;
 8004fe6:	e008      	b.n	8004ffa <HAL_UART_IRQHandler+0x5a2>
      return;
 8004fe8:	46c0      	nop			; (mov r8, r8)
 8004fea:	e006      	b.n	8004ffa <HAL_UART_IRQHandler+0x5a2>
    return;
 8004fec:	46c0      	nop			; (mov r8, r8)
 8004fee:	e004      	b.n	8004ffa <HAL_UART_IRQHandler+0x5a2>
      return;
 8004ff0:	46c0      	nop			; (mov r8, r8)
 8004ff2:	e002      	b.n	8004ffa <HAL_UART_IRQHandler+0x5a2>
      return;
 8004ff4:	46c0      	nop			; (mov r8, r8)
 8004ff6:	e000      	b.n	8004ffa <HAL_UART_IRQHandler+0x5a2>
    return;
 8004ff8:	46c0      	nop			; (mov r8, r8)
  }

}
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	b02b      	add	sp, #172	; 0xac
 8004ffe:	bd90      	pop	{r4, r7, pc}
 8005000:	fffffeff 	.word	0xfffffeff
 8005004:	fffffedf 	.word	0xfffffedf

08005008 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005008:	b580      	push	{r7, lr}
 800500a:	b082      	sub	sp, #8
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005010:	46c0      	nop			; (mov r8, r8)
 8005012:	46bd      	mov	sp, r7
 8005014:	b002      	add	sp, #8
 8005016:	bd80      	pop	{r7, pc}

08005018 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005018:	b580      	push	{r7, lr}
 800501a:	b082      	sub	sp, #8
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005020:	46c0      	nop			; (mov r8, r8)
 8005022:	46bd      	mov	sp, r7
 8005024:	b002      	add	sp, #8
 8005026:	bd80      	pop	{r7, pc}

08005028 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005028:	b580      	push	{r7, lr}
 800502a:	b082      	sub	sp, #8
 800502c:	af00      	add	r7, sp, #0
 800502e:	6078      	str	r0, [r7, #4]
 8005030:	000a      	movs	r2, r1
 8005032:	1cbb      	adds	r3, r7, #2
 8005034:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005036:	46c0      	nop			; (mov r8, r8)
 8005038:	46bd      	mov	sp, r7
 800503a:	b002      	add	sp, #8
 800503c:	bd80      	pop	{r7, pc}
	...

08005040 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005040:	b580      	push	{r7, lr}
 8005042:	b088      	sub	sp, #32
 8005044:	af00      	add	r7, sp, #0
 8005046:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005048:	231e      	movs	r3, #30
 800504a:	18fb      	adds	r3, r7, r3
 800504c:	2200      	movs	r2, #0
 800504e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	689a      	ldr	r2, [r3, #8]
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	691b      	ldr	r3, [r3, #16]
 8005058:	431a      	orrs	r2, r3
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	695b      	ldr	r3, [r3, #20]
 800505e:	431a      	orrs	r2, r3
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	69db      	ldr	r3, [r3, #28]
 8005064:	4313      	orrs	r3, r2
 8005066:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	4a8d      	ldr	r2, [pc, #564]	; (80052a4 <UART_SetConfig+0x264>)
 8005070:	4013      	ands	r3, r2
 8005072:	0019      	movs	r1, r3
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	697a      	ldr	r2, [r7, #20]
 800507a:	430a      	orrs	r2, r1
 800507c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	685b      	ldr	r3, [r3, #4]
 8005084:	4a88      	ldr	r2, [pc, #544]	; (80052a8 <UART_SetConfig+0x268>)
 8005086:	4013      	ands	r3, r2
 8005088:	0019      	movs	r1, r3
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	68da      	ldr	r2, [r3, #12]
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	430a      	orrs	r2, r1
 8005094:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	699b      	ldr	r3, [r3, #24]
 800509a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	6a1b      	ldr	r3, [r3, #32]
 80050a0:	697a      	ldr	r2, [r7, #20]
 80050a2:	4313      	orrs	r3, r2
 80050a4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	689b      	ldr	r3, [r3, #8]
 80050ac:	4a7f      	ldr	r2, [pc, #508]	; (80052ac <UART_SetConfig+0x26c>)
 80050ae:	4013      	ands	r3, r2
 80050b0:	0019      	movs	r1, r3
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	697a      	ldr	r2, [r7, #20]
 80050b8:	430a      	orrs	r2, r1
 80050ba:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	4a7b      	ldr	r2, [pc, #492]	; (80052b0 <UART_SetConfig+0x270>)
 80050c2:	4293      	cmp	r3, r2
 80050c4:	d127      	bne.n	8005116 <UART_SetConfig+0xd6>
 80050c6:	4b7b      	ldr	r3, [pc, #492]	; (80052b4 <UART_SetConfig+0x274>)
 80050c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050ca:	2203      	movs	r2, #3
 80050cc:	4013      	ands	r3, r2
 80050ce:	2b03      	cmp	r3, #3
 80050d0:	d00d      	beq.n	80050ee <UART_SetConfig+0xae>
 80050d2:	d81b      	bhi.n	800510c <UART_SetConfig+0xcc>
 80050d4:	2b02      	cmp	r3, #2
 80050d6:	d014      	beq.n	8005102 <UART_SetConfig+0xc2>
 80050d8:	d818      	bhi.n	800510c <UART_SetConfig+0xcc>
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d002      	beq.n	80050e4 <UART_SetConfig+0xa4>
 80050de:	2b01      	cmp	r3, #1
 80050e0:	d00a      	beq.n	80050f8 <UART_SetConfig+0xb8>
 80050e2:	e013      	b.n	800510c <UART_SetConfig+0xcc>
 80050e4:	231f      	movs	r3, #31
 80050e6:	18fb      	adds	r3, r7, r3
 80050e8:	2200      	movs	r2, #0
 80050ea:	701a      	strb	r2, [r3, #0]
 80050ec:	e021      	b.n	8005132 <UART_SetConfig+0xf2>
 80050ee:	231f      	movs	r3, #31
 80050f0:	18fb      	adds	r3, r7, r3
 80050f2:	2202      	movs	r2, #2
 80050f4:	701a      	strb	r2, [r3, #0]
 80050f6:	e01c      	b.n	8005132 <UART_SetConfig+0xf2>
 80050f8:	231f      	movs	r3, #31
 80050fa:	18fb      	adds	r3, r7, r3
 80050fc:	2204      	movs	r2, #4
 80050fe:	701a      	strb	r2, [r3, #0]
 8005100:	e017      	b.n	8005132 <UART_SetConfig+0xf2>
 8005102:	231f      	movs	r3, #31
 8005104:	18fb      	adds	r3, r7, r3
 8005106:	2208      	movs	r2, #8
 8005108:	701a      	strb	r2, [r3, #0]
 800510a:	e012      	b.n	8005132 <UART_SetConfig+0xf2>
 800510c:	231f      	movs	r3, #31
 800510e:	18fb      	adds	r3, r7, r3
 8005110:	2210      	movs	r2, #16
 8005112:	701a      	strb	r2, [r3, #0]
 8005114:	e00d      	b.n	8005132 <UART_SetConfig+0xf2>
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	4a67      	ldr	r2, [pc, #412]	; (80052b8 <UART_SetConfig+0x278>)
 800511c:	4293      	cmp	r3, r2
 800511e:	d104      	bne.n	800512a <UART_SetConfig+0xea>
 8005120:	231f      	movs	r3, #31
 8005122:	18fb      	adds	r3, r7, r3
 8005124:	2200      	movs	r2, #0
 8005126:	701a      	strb	r2, [r3, #0]
 8005128:	e003      	b.n	8005132 <UART_SetConfig+0xf2>
 800512a:	231f      	movs	r3, #31
 800512c:	18fb      	adds	r3, r7, r3
 800512e:	2210      	movs	r2, #16
 8005130:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	69da      	ldr	r2, [r3, #28]
 8005136:	2380      	movs	r3, #128	; 0x80
 8005138:	021b      	lsls	r3, r3, #8
 800513a:	429a      	cmp	r2, r3
 800513c:	d15d      	bne.n	80051fa <UART_SetConfig+0x1ba>
  {
    switch (clocksource)
 800513e:	231f      	movs	r3, #31
 8005140:	18fb      	adds	r3, r7, r3
 8005142:	781b      	ldrb	r3, [r3, #0]
 8005144:	2b08      	cmp	r3, #8
 8005146:	d015      	beq.n	8005174 <UART_SetConfig+0x134>
 8005148:	dc18      	bgt.n	800517c <UART_SetConfig+0x13c>
 800514a:	2b04      	cmp	r3, #4
 800514c:	d00d      	beq.n	800516a <UART_SetConfig+0x12a>
 800514e:	dc15      	bgt.n	800517c <UART_SetConfig+0x13c>
 8005150:	2b00      	cmp	r3, #0
 8005152:	d002      	beq.n	800515a <UART_SetConfig+0x11a>
 8005154:	2b02      	cmp	r3, #2
 8005156:	d005      	beq.n	8005164 <UART_SetConfig+0x124>
 8005158:	e010      	b.n	800517c <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800515a:	f7fe fc0b 	bl	8003974 <HAL_RCC_GetPCLK1Freq>
 800515e:	0003      	movs	r3, r0
 8005160:	61bb      	str	r3, [r7, #24]
        break;
 8005162:	e012      	b.n	800518a <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005164:	4b55      	ldr	r3, [pc, #340]	; (80052bc <UART_SetConfig+0x27c>)
 8005166:	61bb      	str	r3, [r7, #24]
        break;
 8005168:	e00f      	b.n	800518a <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800516a:	f7fe fb79 	bl	8003860 <HAL_RCC_GetSysClockFreq>
 800516e:	0003      	movs	r3, r0
 8005170:	61bb      	str	r3, [r7, #24]
        break;
 8005172:	e00a      	b.n	800518a <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005174:	2380      	movs	r3, #128	; 0x80
 8005176:	021b      	lsls	r3, r3, #8
 8005178:	61bb      	str	r3, [r7, #24]
        break;
 800517a:	e006      	b.n	800518a <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 800517c:	2300      	movs	r3, #0
 800517e:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005180:	231e      	movs	r3, #30
 8005182:	18fb      	adds	r3, r7, r3
 8005184:	2201      	movs	r2, #1
 8005186:	701a      	strb	r2, [r3, #0]
        break;
 8005188:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800518a:	69bb      	ldr	r3, [r7, #24]
 800518c:	2b00      	cmp	r3, #0
 800518e:	d100      	bne.n	8005192 <UART_SetConfig+0x152>
 8005190:	e07b      	b.n	800528a <UART_SetConfig+0x24a>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005192:	69bb      	ldr	r3, [r7, #24]
 8005194:	005a      	lsls	r2, r3, #1
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	685b      	ldr	r3, [r3, #4]
 800519a:	085b      	lsrs	r3, r3, #1
 800519c:	18d2      	adds	r2, r2, r3
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	685b      	ldr	r3, [r3, #4]
 80051a2:	0019      	movs	r1, r3
 80051a4:	0010      	movs	r0, r2
 80051a6:	f7fa ffaf 	bl	8000108 <__udivsi3>
 80051aa:	0003      	movs	r3, r0
 80051ac:	b29b      	uxth	r3, r3
 80051ae:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80051b0:	693b      	ldr	r3, [r7, #16]
 80051b2:	2b0f      	cmp	r3, #15
 80051b4:	d91c      	bls.n	80051f0 <UART_SetConfig+0x1b0>
 80051b6:	693a      	ldr	r2, [r7, #16]
 80051b8:	2380      	movs	r3, #128	; 0x80
 80051ba:	025b      	lsls	r3, r3, #9
 80051bc:	429a      	cmp	r2, r3
 80051be:	d217      	bcs.n	80051f0 <UART_SetConfig+0x1b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80051c0:	693b      	ldr	r3, [r7, #16]
 80051c2:	b29a      	uxth	r2, r3
 80051c4:	200e      	movs	r0, #14
 80051c6:	183b      	adds	r3, r7, r0
 80051c8:	210f      	movs	r1, #15
 80051ca:	438a      	bics	r2, r1
 80051cc:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80051ce:	693b      	ldr	r3, [r7, #16]
 80051d0:	085b      	lsrs	r3, r3, #1
 80051d2:	b29b      	uxth	r3, r3
 80051d4:	2207      	movs	r2, #7
 80051d6:	4013      	ands	r3, r2
 80051d8:	b299      	uxth	r1, r3
 80051da:	183b      	adds	r3, r7, r0
 80051dc:	183a      	adds	r2, r7, r0
 80051de:	8812      	ldrh	r2, [r2, #0]
 80051e0:	430a      	orrs	r2, r1
 80051e2:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	183a      	adds	r2, r7, r0
 80051ea:	8812      	ldrh	r2, [r2, #0]
 80051ec:	60da      	str	r2, [r3, #12]
 80051ee:	e04c      	b.n	800528a <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 80051f0:	231e      	movs	r3, #30
 80051f2:	18fb      	adds	r3, r7, r3
 80051f4:	2201      	movs	r2, #1
 80051f6:	701a      	strb	r2, [r3, #0]
 80051f8:	e047      	b.n	800528a <UART_SetConfig+0x24a>
      }
    }
  }
  else
  {
    switch (clocksource)
 80051fa:	231f      	movs	r3, #31
 80051fc:	18fb      	adds	r3, r7, r3
 80051fe:	781b      	ldrb	r3, [r3, #0]
 8005200:	2b08      	cmp	r3, #8
 8005202:	d015      	beq.n	8005230 <UART_SetConfig+0x1f0>
 8005204:	dc18      	bgt.n	8005238 <UART_SetConfig+0x1f8>
 8005206:	2b04      	cmp	r3, #4
 8005208:	d00d      	beq.n	8005226 <UART_SetConfig+0x1e6>
 800520a:	dc15      	bgt.n	8005238 <UART_SetConfig+0x1f8>
 800520c:	2b00      	cmp	r3, #0
 800520e:	d002      	beq.n	8005216 <UART_SetConfig+0x1d6>
 8005210:	2b02      	cmp	r3, #2
 8005212:	d005      	beq.n	8005220 <UART_SetConfig+0x1e0>
 8005214:	e010      	b.n	8005238 <UART_SetConfig+0x1f8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005216:	f7fe fbad 	bl	8003974 <HAL_RCC_GetPCLK1Freq>
 800521a:	0003      	movs	r3, r0
 800521c:	61bb      	str	r3, [r7, #24]
        break;
 800521e:	e012      	b.n	8005246 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005220:	4b26      	ldr	r3, [pc, #152]	; (80052bc <UART_SetConfig+0x27c>)
 8005222:	61bb      	str	r3, [r7, #24]
        break;
 8005224:	e00f      	b.n	8005246 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005226:	f7fe fb1b 	bl	8003860 <HAL_RCC_GetSysClockFreq>
 800522a:	0003      	movs	r3, r0
 800522c:	61bb      	str	r3, [r7, #24]
        break;
 800522e:	e00a      	b.n	8005246 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005230:	2380      	movs	r3, #128	; 0x80
 8005232:	021b      	lsls	r3, r3, #8
 8005234:	61bb      	str	r3, [r7, #24]
        break;
 8005236:	e006      	b.n	8005246 <UART_SetConfig+0x206>
      default:
        pclk = 0U;
 8005238:	2300      	movs	r3, #0
 800523a:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800523c:	231e      	movs	r3, #30
 800523e:	18fb      	adds	r3, r7, r3
 8005240:	2201      	movs	r2, #1
 8005242:	701a      	strb	r2, [r3, #0]
        break;
 8005244:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8005246:	69bb      	ldr	r3, [r7, #24]
 8005248:	2b00      	cmp	r3, #0
 800524a:	d01e      	beq.n	800528a <UART_SetConfig+0x24a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	685b      	ldr	r3, [r3, #4]
 8005250:	085a      	lsrs	r2, r3, #1
 8005252:	69bb      	ldr	r3, [r7, #24]
 8005254:	18d2      	adds	r2, r2, r3
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	685b      	ldr	r3, [r3, #4]
 800525a:	0019      	movs	r1, r3
 800525c:	0010      	movs	r0, r2
 800525e:	f7fa ff53 	bl	8000108 <__udivsi3>
 8005262:	0003      	movs	r3, r0
 8005264:	b29b      	uxth	r3, r3
 8005266:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005268:	693b      	ldr	r3, [r7, #16]
 800526a:	2b0f      	cmp	r3, #15
 800526c:	d909      	bls.n	8005282 <UART_SetConfig+0x242>
 800526e:	693a      	ldr	r2, [r7, #16]
 8005270:	2380      	movs	r3, #128	; 0x80
 8005272:	025b      	lsls	r3, r3, #9
 8005274:	429a      	cmp	r2, r3
 8005276:	d204      	bcs.n	8005282 <UART_SetConfig+0x242>
      {
        huart->Instance->BRR = usartdiv;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	693a      	ldr	r2, [r7, #16]
 800527e:	60da      	str	r2, [r3, #12]
 8005280:	e003      	b.n	800528a <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 8005282:	231e      	movs	r3, #30
 8005284:	18fb      	adds	r3, r7, r3
 8005286:	2201      	movs	r2, #1
 8005288:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	2200      	movs	r2, #0
 800528e:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	2200      	movs	r2, #0
 8005294:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005296:	231e      	movs	r3, #30
 8005298:	18fb      	adds	r3, r7, r3
 800529a:	781b      	ldrb	r3, [r3, #0]
}
 800529c:	0018      	movs	r0, r3
 800529e:	46bd      	mov	sp, r7
 80052a0:	b008      	add	sp, #32
 80052a2:	bd80      	pop	{r7, pc}
 80052a4:	efff69f3 	.word	0xefff69f3
 80052a8:	ffffcfff 	.word	0xffffcfff
 80052ac:	fffff4ff 	.word	0xfffff4ff
 80052b0:	40013800 	.word	0x40013800
 80052b4:	40021000 	.word	0x40021000
 80052b8:	40004400 	.word	0x40004400
 80052bc:	007a1200 	.word	0x007a1200

080052c0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80052c0:	b580      	push	{r7, lr}
 80052c2:	b082      	sub	sp, #8
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052cc:	2201      	movs	r2, #1
 80052ce:	4013      	ands	r3, r2
 80052d0:	d00b      	beq.n	80052ea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	685b      	ldr	r3, [r3, #4]
 80052d8:	4a4a      	ldr	r2, [pc, #296]	; (8005404 <UART_AdvFeatureConfig+0x144>)
 80052da:	4013      	ands	r3, r2
 80052dc:	0019      	movs	r1, r3
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	430a      	orrs	r2, r1
 80052e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052ee:	2202      	movs	r2, #2
 80052f0:	4013      	ands	r3, r2
 80052f2:	d00b      	beq.n	800530c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	685b      	ldr	r3, [r3, #4]
 80052fa:	4a43      	ldr	r2, [pc, #268]	; (8005408 <UART_AdvFeatureConfig+0x148>)
 80052fc:	4013      	ands	r3, r2
 80052fe:	0019      	movs	r1, r3
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	430a      	orrs	r2, r1
 800530a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005310:	2204      	movs	r2, #4
 8005312:	4013      	ands	r3, r2
 8005314:	d00b      	beq.n	800532e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	685b      	ldr	r3, [r3, #4]
 800531c:	4a3b      	ldr	r2, [pc, #236]	; (800540c <UART_AdvFeatureConfig+0x14c>)
 800531e:	4013      	ands	r3, r2
 8005320:	0019      	movs	r1, r3
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	430a      	orrs	r2, r1
 800532c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005332:	2208      	movs	r2, #8
 8005334:	4013      	ands	r3, r2
 8005336:	d00b      	beq.n	8005350 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	685b      	ldr	r3, [r3, #4]
 800533e:	4a34      	ldr	r2, [pc, #208]	; (8005410 <UART_AdvFeatureConfig+0x150>)
 8005340:	4013      	ands	r3, r2
 8005342:	0019      	movs	r1, r3
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	430a      	orrs	r2, r1
 800534e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005354:	2210      	movs	r2, #16
 8005356:	4013      	ands	r3, r2
 8005358:	d00b      	beq.n	8005372 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	689b      	ldr	r3, [r3, #8]
 8005360:	4a2c      	ldr	r2, [pc, #176]	; (8005414 <UART_AdvFeatureConfig+0x154>)
 8005362:	4013      	ands	r3, r2
 8005364:	0019      	movs	r1, r3
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	430a      	orrs	r2, r1
 8005370:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005376:	2220      	movs	r2, #32
 8005378:	4013      	ands	r3, r2
 800537a:	d00b      	beq.n	8005394 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	689b      	ldr	r3, [r3, #8]
 8005382:	4a25      	ldr	r2, [pc, #148]	; (8005418 <UART_AdvFeatureConfig+0x158>)
 8005384:	4013      	ands	r3, r2
 8005386:	0019      	movs	r1, r3
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	430a      	orrs	r2, r1
 8005392:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005398:	2240      	movs	r2, #64	; 0x40
 800539a:	4013      	ands	r3, r2
 800539c:	d01d      	beq.n	80053da <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	685b      	ldr	r3, [r3, #4]
 80053a4:	4a1d      	ldr	r2, [pc, #116]	; (800541c <UART_AdvFeatureConfig+0x15c>)
 80053a6:	4013      	ands	r3, r2
 80053a8:	0019      	movs	r1, r3
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	430a      	orrs	r2, r1
 80053b4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80053ba:	2380      	movs	r3, #128	; 0x80
 80053bc:	035b      	lsls	r3, r3, #13
 80053be:	429a      	cmp	r2, r3
 80053c0:	d10b      	bne.n	80053da <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	685b      	ldr	r3, [r3, #4]
 80053c8:	4a15      	ldr	r2, [pc, #84]	; (8005420 <UART_AdvFeatureConfig+0x160>)
 80053ca:	4013      	ands	r3, r2
 80053cc:	0019      	movs	r1, r3
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	430a      	orrs	r2, r1
 80053d8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053de:	2280      	movs	r2, #128	; 0x80
 80053e0:	4013      	ands	r3, r2
 80053e2:	d00b      	beq.n	80053fc <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	685b      	ldr	r3, [r3, #4]
 80053ea:	4a0e      	ldr	r2, [pc, #56]	; (8005424 <UART_AdvFeatureConfig+0x164>)
 80053ec:	4013      	ands	r3, r2
 80053ee:	0019      	movs	r1, r3
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	430a      	orrs	r2, r1
 80053fa:	605a      	str	r2, [r3, #4]
  }
}
 80053fc:	46c0      	nop			; (mov r8, r8)
 80053fe:	46bd      	mov	sp, r7
 8005400:	b002      	add	sp, #8
 8005402:	bd80      	pop	{r7, pc}
 8005404:	fffdffff 	.word	0xfffdffff
 8005408:	fffeffff 	.word	0xfffeffff
 800540c:	fffbffff 	.word	0xfffbffff
 8005410:	ffff7fff 	.word	0xffff7fff
 8005414:	ffffefff 	.word	0xffffefff
 8005418:	ffffdfff 	.word	0xffffdfff
 800541c:	ffefffff 	.word	0xffefffff
 8005420:	ff9fffff 	.word	0xff9fffff
 8005424:	fff7ffff 	.word	0xfff7ffff

08005428 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005428:	b580      	push	{r7, lr}
 800542a:	b086      	sub	sp, #24
 800542c:	af02      	add	r7, sp, #8
 800542e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2280      	movs	r2, #128	; 0x80
 8005434:	2100      	movs	r1, #0
 8005436:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005438:	f7fd fae4 	bl	8002a04 <HAL_GetTick>
 800543c:	0003      	movs	r3, r0
 800543e:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	2208      	movs	r2, #8
 8005448:	4013      	ands	r3, r2
 800544a:	2b08      	cmp	r3, #8
 800544c:	d10c      	bne.n	8005468 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	2280      	movs	r2, #128	; 0x80
 8005452:	0391      	lsls	r1, r2, #14
 8005454:	6878      	ldr	r0, [r7, #4]
 8005456:	4a17      	ldr	r2, [pc, #92]	; (80054b4 <UART_CheckIdleState+0x8c>)
 8005458:	9200      	str	r2, [sp, #0]
 800545a:	2200      	movs	r2, #0
 800545c:	f000 f82c 	bl	80054b8 <UART_WaitOnFlagUntilTimeout>
 8005460:	1e03      	subs	r3, r0, #0
 8005462:	d001      	beq.n	8005468 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005464:	2303      	movs	r3, #3
 8005466:	e021      	b.n	80054ac <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	2204      	movs	r2, #4
 8005470:	4013      	ands	r3, r2
 8005472:	2b04      	cmp	r3, #4
 8005474:	d10c      	bne.n	8005490 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	2280      	movs	r2, #128	; 0x80
 800547a:	03d1      	lsls	r1, r2, #15
 800547c:	6878      	ldr	r0, [r7, #4]
 800547e:	4a0d      	ldr	r2, [pc, #52]	; (80054b4 <UART_CheckIdleState+0x8c>)
 8005480:	9200      	str	r2, [sp, #0]
 8005482:	2200      	movs	r2, #0
 8005484:	f000 f818 	bl	80054b8 <UART_WaitOnFlagUntilTimeout>
 8005488:	1e03      	subs	r3, r0, #0
 800548a:	d001      	beq.n	8005490 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800548c:	2303      	movs	r3, #3
 800548e:	e00d      	b.n	80054ac <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2220      	movs	r2, #32
 8005494:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	2220      	movs	r2, #32
 800549a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2200      	movs	r2, #0
 80054a0:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	2274      	movs	r2, #116	; 0x74
 80054a6:	2100      	movs	r1, #0
 80054a8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80054aa:	2300      	movs	r3, #0
}
 80054ac:	0018      	movs	r0, r3
 80054ae:	46bd      	mov	sp, r7
 80054b0:	b004      	add	sp, #16
 80054b2:	bd80      	pop	{r7, pc}
 80054b4:	01ffffff 	.word	0x01ffffff

080054b8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80054b8:	b580      	push	{r7, lr}
 80054ba:	b094      	sub	sp, #80	; 0x50
 80054bc:	af00      	add	r7, sp, #0
 80054be:	60f8      	str	r0, [r7, #12]
 80054c0:	60b9      	str	r1, [r7, #8]
 80054c2:	603b      	str	r3, [r7, #0]
 80054c4:	1dfb      	adds	r3, r7, #7
 80054c6:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80054c8:	e0a3      	b.n	8005612 <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80054ca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80054cc:	3301      	adds	r3, #1
 80054ce:	d100      	bne.n	80054d2 <UART_WaitOnFlagUntilTimeout+0x1a>
 80054d0:	e09f      	b.n	8005612 <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80054d2:	f7fd fa97 	bl	8002a04 <HAL_GetTick>
 80054d6:	0002      	movs	r2, r0
 80054d8:	683b      	ldr	r3, [r7, #0]
 80054da:	1ad3      	subs	r3, r2, r3
 80054dc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80054de:	429a      	cmp	r2, r3
 80054e0:	d302      	bcc.n	80054e8 <UART_WaitOnFlagUntilTimeout+0x30>
 80054e2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d13d      	bne.n	8005564 <UART_WaitOnFlagUntilTimeout+0xac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80054e8:	f3ef 8310 	mrs	r3, PRIMASK
 80054ec:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80054ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80054f0:	647b      	str	r3, [r7, #68]	; 0x44
 80054f2:	2301      	movs	r3, #1
 80054f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80054f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054f8:	f383 8810 	msr	PRIMASK, r3
}
 80054fc:	46c0      	nop			; (mov r8, r8)
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	681a      	ldr	r2, [r3, #0]
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	494c      	ldr	r1, [pc, #304]	; (800563c <UART_WaitOnFlagUntilTimeout+0x184>)
 800550a:	400a      	ands	r2, r1
 800550c:	601a      	str	r2, [r3, #0]
 800550e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005510:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005512:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005514:	f383 8810 	msr	PRIMASK, r3
}
 8005518:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800551a:	f3ef 8310 	mrs	r3, PRIMASK
 800551e:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8005520:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005522:	643b      	str	r3, [r7, #64]	; 0x40
 8005524:	2301      	movs	r3, #1
 8005526:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005528:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800552a:	f383 8810 	msr	PRIMASK, r3
}
 800552e:	46c0      	nop			; (mov r8, r8)
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	689a      	ldr	r2, [r3, #8]
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	2101      	movs	r1, #1
 800553c:	438a      	bics	r2, r1
 800553e:	609a      	str	r2, [r3, #8]
 8005540:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005542:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005544:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005546:	f383 8810 	msr	PRIMASK, r3
}
 800554a:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	2220      	movs	r2, #32
 8005550:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	2220      	movs	r2, #32
 8005556:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	2274      	movs	r2, #116	; 0x74
 800555c:	2100      	movs	r1, #0
 800555e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005560:	2303      	movs	r3, #3
 8005562:	e067      	b.n	8005634 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	2204      	movs	r2, #4
 800556c:	4013      	ands	r3, r2
 800556e:	d050      	beq.n	8005612 <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	69da      	ldr	r2, [r3, #28]
 8005576:	2380      	movs	r3, #128	; 0x80
 8005578:	011b      	lsls	r3, r3, #4
 800557a:	401a      	ands	r2, r3
 800557c:	2380      	movs	r3, #128	; 0x80
 800557e:	011b      	lsls	r3, r3, #4
 8005580:	429a      	cmp	r2, r3
 8005582:	d146      	bne.n	8005612 <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	2280      	movs	r2, #128	; 0x80
 800558a:	0112      	lsls	r2, r2, #4
 800558c:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800558e:	f3ef 8310 	mrs	r3, PRIMASK
 8005592:	613b      	str	r3, [r7, #16]
  return(result);
 8005594:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005596:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005598:	2301      	movs	r3, #1
 800559a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800559c:	697b      	ldr	r3, [r7, #20]
 800559e:	f383 8810 	msr	PRIMASK, r3
}
 80055a2:	46c0      	nop			; (mov r8, r8)
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	681a      	ldr	r2, [r3, #0]
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	4923      	ldr	r1, [pc, #140]	; (800563c <UART_WaitOnFlagUntilTimeout+0x184>)
 80055b0:	400a      	ands	r2, r1
 80055b2:	601a      	str	r2, [r3, #0]
 80055b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80055b6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80055b8:	69bb      	ldr	r3, [r7, #24]
 80055ba:	f383 8810 	msr	PRIMASK, r3
}
 80055be:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80055c0:	f3ef 8310 	mrs	r3, PRIMASK
 80055c4:	61fb      	str	r3, [r7, #28]
  return(result);
 80055c6:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055c8:	64bb      	str	r3, [r7, #72]	; 0x48
 80055ca:	2301      	movs	r3, #1
 80055cc:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80055ce:	6a3b      	ldr	r3, [r7, #32]
 80055d0:	f383 8810 	msr	PRIMASK, r3
}
 80055d4:	46c0      	nop			; (mov r8, r8)
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	689a      	ldr	r2, [r3, #8]
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	2101      	movs	r1, #1
 80055e2:	438a      	bics	r2, r1
 80055e4:	609a      	str	r2, [r3, #8]
 80055e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80055e8:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80055ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055ec:	f383 8810 	msr	PRIMASK, r3
}
 80055f0:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	2220      	movs	r2, #32
 80055f6:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	2220      	movs	r2, #32
 80055fc:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	2280      	movs	r2, #128	; 0x80
 8005602:	2120      	movs	r1, #32
 8005604:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	2274      	movs	r2, #116	; 0x74
 800560a:	2100      	movs	r1, #0
 800560c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800560e:	2303      	movs	r3, #3
 8005610:	e010      	b.n	8005634 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	69db      	ldr	r3, [r3, #28]
 8005618:	68ba      	ldr	r2, [r7, #8]
 800561a:	4013      	ands	r3, r2
 800561c:	68ba      	ldr	r2, [r7, #8]
 800561e:	1ad3      	subs	r3, r2, r3
 8005620:	425a      	negs	r2, r3
 8005622:	4153      	adcs	r3, r2
 8005624:	b2db      	uxtb	r3, r3
 8005626:	001a      	movs	r2, r3
 8005628:	1dfb      	adds	r3, r7, #7
 800562a:	781b      	ldrb	r3, [r3, #0]
 800562c:	429a      	cmp	r2, r3
 800562e:	d100      	bne.n	8005632 <UART_WaitOnFlagUntilTimeout+0x17a>
 8005630:	e74b      	b.n	80054ca <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005632:	2300      	movs	r3, #0
}
 8005634:	0018      	movs	r0, r3
 8005636:	46bd      	mov	sp, r7
 8005638:	b014      	add	sp, #80	; 0x50
 800563a:	bd80      	pop	{r7, pc}
 800563c:	fffffe5f 	.word	0xfffffe5f

08005640 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005640:	b580      	push	{r7, lr}
 8005642:	b08c      	sub	sp, #48	; 0x30
 8005644:	af00      	add	r7, sp, #0
 8005646:	60f8      	str	r0, [r7, #12]
 8005648:	60b9      	str	r1, [r7, #8]
 800564a:	1dbb      	adds	r3, r7, #6
 800564c:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	68ba      	ldr	r2, [r7, #8]
 8005652:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	1dba      	adds	r2, r7, #6
 8005658:	2158      	movs	r1, #88	; 0x58
 800565a:	8812      	ldrh	r2, [r2, #0]
 800565c:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	1dba      	adds	r2, r7, #6
 8005662:	215a      	movs	r1, #90	; 0x5a
 8005664:	8812      	ldrh	r2, [r2, #0]
 8005666:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	2200      	movs	r2, #0
 800566c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	689a      	ldr	r2, [r3, #8]
 8005672:	2380      	movs	r3, #128	; 0x80
 8005674:	015b      	lsls	r3, r3, #5
 8005676:	429a      	cmp	r2, r3
 8005678:	d10d      	bne.n	8005696 <UART_Start_Receive_IT+0x56>
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	691b      	ldr	r3, [r3, #16]
 800567e:	2b00      	cmp	r3, #0
 8005680:	d104      	bne.n	800568c <UART_Start_Receive_IT+0x4c>
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	225c      	movs	r2, #92	; 0x5c
 8005686:	4943      	ldr	r1, [pc, #268]	; (8005794 <UART_Start_Receive_IT+0x154>)
 8005688:	5299      	strh	r1, [r3, r2]
 800568a:	e02e      	b.n	80056ea <UART_Start_Receive_IT+0xaa>
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	225c      	movs	r2, #92	; 0x5c
 8005690:	21ff      	movs	r1, #255	; 0xff
 8005692:	5299      	strh	r1, [r3, r2]
 8005694:	e029      	b.n	80056ea <UART_Start_Receive_IT+0xaa>
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	689b      	ldr	r3, [r3, #8]
 800569a:	2b00      	cmp	r3, #0
 800569c:	d10d      	bne.n	80056ba <UART_Start_Receive_IT+0x7a>
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	691b      	ldr	r3, [r3, #16]
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d104      	bne.n	80056b0 <UART_Start_Receive_IT+0x70>
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	225c      	movs	r2, #92	; 0x5c
 80056aa:	21ff      	movs	r1, #255	; 0xff
 80056ac:	5299      	strh	r1, [r3, r2]
 80056ae:	e01c      	b.n	80056ea <UART_Start_Receive_IT+0xaa>
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	225c      	movs	r2, #92	; 0x5c
 80056b4:	217f      	movs	r1, #127	; 0x7f
 80056b6:	5299      	strh	r1, [r3, r2]
 80056b8:	e017      	b.n	80056ea <UART_Start_Receive_IT+0xaa>
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	689a      	ldr	r2, [r3, #8]
 80056be:	2380      	movs	r3, #128	; 0x80
 80056c0:	055b      	lsls	r3, r3, #21
 80056c2:	429a      	cmp	r2, r3
 80056c4:	d10d      	bne.n	80056e2 <UART_Start_Receive_IT+0xa2>
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	691b      	ldr	r3, [r3, #16]
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d104      	bne.n	80056d8 <UART_Start_Receive_IT+0x98>
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	225c      	movs	r2, #92	; 0x5c
 80056d2:	217f      	movs	r1, #127	; 0x7f
 80056d4:	5299      	strh	r1, [r3, r2]
 80056d6:	e008      	b.n	80056ea <UART_Start_Receive_IT+0xaa>
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	225c      	movs	r2, #92	; 0x5c
 80056dc:	213f      	movs	r1, #63	; 0x3f
 80056de:	5299      	strh	r1, [r3, r2]
 80056e0:	e003      	b.n	80056ea <UART_Start_Receive_IT+0xaa>
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	225c      	movs	r2, #92	; 0x5c
 80056e6:	2100      	movs	r1, #0
 80056e8:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	2280      	movs	r2, #128	; 0x80
 80056ee:	2100      	movs	r1, #0
 80056f0:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	2222      	movs	r2, #34	; 0x22
 80056f6:	67da      	str	r2, [r3, #124]	; 0x7c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80056f8:	f3ef 8310 	mrs	r3, PRIMASK
 80056fc:	61fb      	str	r3, [r7, #28]
  return(result);
 80056fe:	69fb      	ldr	r3, [r7, #28]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005700:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005702:	2301      	movs	r3, #1
 8005704:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005706:	6a3b      	ldr	r3, [r7, #32]
 8005708:	f383 8810 	msr	PRIMASK, r3
}
 800570c:	46c0      	nop			; (mov r8, r8)
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	689a      	ldr	r2, [r3, #8]
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	2101      	movs	r1, #1
 800571a:	430a      	orrs	r2, r1
 800571c:	609a      	str	r2, [r3, #8]
 800571e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005720:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005724:	f383 8810 	msr	PRIMASK, r3
}
 8005728:	46c0      	nop			; (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	689a      	ldr	r2, [r3, #8]
 800572e:	2380      	movs	r3, #128	; 0x80
 8005730:	015b      	lsls	r3, r3, #5
 8005732:	429a      	cmp	r2, r3
 8005734:	d107      	bne.n	8005746 <UART_Start_Receive_IT+0x106>
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	691b      	ldr	r3, [r3, #16]
 800573a:	2b00      	cmp	r3, #0
 800573c:	d103      	bne.n	8005746 <UART_Start_Receive_IT+0x106>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	4a15      	ldr	r2, [pc, #84]	; (8005798 <UART_Start_Receive_IT+0x158>)
 8005742:	665a      	str	r2, [r3, #100]	; 0x64
 8005744:	e002      	b.n	800574c <UART_Start_Receive_IT+0x10c>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	4a14      	ldr	r2, [pc, #80]	; (800579c <UART_Start_Receive_IT+0x15c>)
 800574a:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	2274      	movs	r2, #116	; 0x74
 8005750:	2100      	movs	r1, #0
 8005752:	5499      	strb	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005754:	f3ef 8310 	mrs	r3, PRIMASK
 8005758:	613b      	str	r3, [r7, #16]
  return(result);
 800575a:	693b      	ldr	r3, [r7, #16]

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800575c:	62bb      	str	r3, [r7, #40]	; 0x28
 800575e:	2301      	movs	r3, #1
 8005760:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005762:	697b      	ldr	r3, [r7, #20]
 8005764:	f383 8810 	msr	PRIMASK, r3
}
 8005768:	46c0      	nop			; (mov r8, r8)
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	681a      	ldr	r2, [r3, #0]
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	2190      	movs	r1, #144	; 0x90
 8005776:	0049      	lsls	r1, r1, #1
 8005778:	430a      	orrs	r2, r1
 800577a:	601a      	str	r2, [r3, #0]
 800577c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800577e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005780:	69bb      	ldr	r3, [r7, #24]
 8005782:	f383 8810 	msr	PRIMASK, r3
}
 8005786:	46c0      	nop			; (mov r8, r8)
  return HAL_OK;
 8005788:	2300      	movs	r3, #0
}
 800578a:	0018      	movs	r0, r3
 800578c:	46bd      	mov	sp, r7
 800578e:	b00c      	add	sp, #48	; 0x30
 8005790:	bd80      	pop	{r7, pc}
 8005792:	46c0      	nop			; (mov r8, r8)
 8005794:	000001ff 	.word	0x000001ff
 8005798:	08005a51 	.word	0x08005a51
 800579c:	080058e9 	.word	0x080058e9

080057a0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80057a0:	b580      	push	{r7, lr}
 80057a2:	b08e      	sub	sp, #56	; 0x38
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80057a8:	f3ef 8310 	mrs	r3, PRIMASK
 80057ac:	617b      	str	r3, [r7, #20]
  return(result);
 80057ae:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80057b0:	637b      	str	r3, [r7, #52]	; 0x34
 80057b2:	2301      	movs	r3, #1
 80057b4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80057b6:	69bb      	ldr	r3, [r7, #24]
 80057b8:	f383 8810 	msr	PRIMASK, r3
}
 80057bc:	46c0      	nop			; (mov r8, r8)
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	681a      	ldr	r2, [r3, #0]
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	4925      	ldr	r1, [pc, #148]	; (8005860 <UART_EndRxTransfer+0xc0>)
 80057ca:	400a      	ands	r2, r1
 80057cc:	601a      	str	r2, [r3, #0]
 80057ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057d0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80057d2:	69fb      	ldr	r3, [r7, #28]
 80057d4:	f383 8810 	msr	PRIMASK, r3
}
 80057d8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80057da:	f3ef 8310 	mrs	r3, PRIMASK
 80057de:	623b      	str	r3, [r7, #32]
  return(result);
 80057e0:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057e2:	633b      	str	r3, [r7, #48]	; 0x30
 80057e4:	2301      	movs	r3, #1
 80057e6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80057e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057ea:	f383 8810 	msr	PRIMASK, r3
}
 80057ee:	46c0      	nop			; (mov r8, r8)
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	689a      	ldr	r2, [r3, #8]
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	2101      	movs	r1, #1
 80057fc:	438a      	bics	r2, r1
 80057fe:	609a      	str	r2, [r3, #8]
 8005800:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005802:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005804:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005806:	f383 8810 	msr	PRIMASK, r3
}
 800580a:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005810:	2b01      	cmp	r3, #1
 8005812:	d118      	bne.n	8005846 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005814:	f3ef 8310 	mrs	r3, PRIMASK
 8005818:	60bb      	str	r3, [r7, #8]
  return(result);
 800581a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800581c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800581e:	2301      	movs	r3, #1
 8005820:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	f383 8810 	msr	PRIMASK, r3
}
 8005828:	46c0      	nop			; (mov r8, r8)
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	681a      	ldr	r2, [r3, #0]
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	2110      	movs	r1, #16
 8005836:	438a      	bics	r2, r1
 8005838:	601a      	str	r2, [r3, #0]
 800583a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800583c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800583e:	693b      	ldr	r3, [r7, #16]
 8005840:	f383 8810 	msr	PRIMASK, r3
}
 8005844:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	2220      	movs	r2, #32
 800584a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	2200      	movs	r2, #0
 8005850:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	2200      	movs	r2, #0
 8005856:	665a      	str	r2, [r3, #100]	; 0x64
}
 8005858:	46c0      	nop			; (mov r8, r8)
 800585a:	46bd      	mov	sp, r7
 800585c:	b00e      	add	sp, #56	; 0x38
 800585e:	bd80      	pop	{r7, pc}
 8005860:	fffffedf 	.word	0xfffffedf

08005864 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005864:	b580      	push	{r7, lr}
 8005866:	b084      	sub	sp, #16
 8005868:	af00      	add	r7, sp, #0
 800586a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005870:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	225a      	movs	r2, #90	; 0x5a
 8005876:	2100      	movs	r1, #0
 8005878:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	2252      	movs	r2, #82	; 0x52
 800587e:	2100      	movs	r1, #0
 8005880:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	0018      	movs	r0, r3
 8005886:	f7ff fbc7 	bl	8005018 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800588a:	46c0      	nop			; (mov r8, r8)
 800588c:	46bd      	mov	sp, r7
 800588e:	b004      	add	sp, #16
 8005890:	bd80      	pop	{r7, pc}

08005892 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005892:	b580      	push	{r7, lr}
 8005894:	b086      	sub	sp, #24
 8005896:	af00      	add	r7, sp, #0
 8005898:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800589a:	f3ef 8310 	mrs	r3, PRIMASK
 800589e:	60bb      	str	r3, [r7, #8]
  return(result);
 80058a0:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80058a2:	617b      	str	r3, [r7, #20]
 80058a4:	2301      	movs	r3, #1
 80058a6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	f383 8810 	msr	PRIMASK, r3
}
 80058ae:	46c0      	nop			; (mov r8, r8)
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	681a      	ldr	r2, [r3, #0]
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	2140      	movs	r1, #64	; 0x40
 80058bc:	438a      	bics	r2, r1
 80058be:	601a      	str	r2, [r3, #0]
 80058c0:	697b      	ldr	r3, [r7, #20]
 80058c2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80058c4:	693b      	ldr	r3, [r7, #16]
 80058c6:	f383 8810 	msr	PRIMASK, r3
}
 80058ca:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	2220      	movs	r2, #32
 80058d0:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	2200      	movs	r2, #0
 80058d6:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	0018      	movs	r0, r3
 80058dc:	f7ff fb94 	bl	8005008 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80058e0:	46c0      	nop			; (mov r8, r8)
 80058e2:	46bd      	mov	sp, r7
 80058e4:	b006      	add	sp, #24
 80058e6:	bd80      	pop	{r7, pc}

080058e8 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80058e8:	b580      	push	{r7, lr}
 80058ea:	b090      	sub	sp, #64	; 0x40
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80058f0:	203e      	movs	r0, #62	; 0x3e
 80058f2:	183b      	adds	r3, r7, r0
 80058f4:	687a      	ldr	r2, [r7, #4]
 80058f6:	215c      	movs	r1, #92	; 0x5c
 80058f8:	5a52      	ldrh	r2, [r2, r1]
 80058fa:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005900:	2b22      	cmp	r3, #34	; 0x22
 8005902:	d000      	beq.n	8005906 <UART_RxISR_8BIT+0x1e>
 8005904:	e095      	b.n	8005a32 <UART_RxISR_8BIT+0x14a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681a      	ldr	r2, [r3, #0]
 800590a:	213c      	movs	r1, #60	; 0x3c
 800590c:	187b      	adds	r3, r7, r1
 800590e:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8005910:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005912:	187b      	adds	r3, r7, r1
 8005914:	881b      	ldrh	r3, [r3, #0]
 8005916:	b2da      	uxtb	r2, r3
 8005918:	183b      	adds	r3, r7, r0
 800591a:	881b      	ldrh	r3, [r3, #0]
 800591c:	b2d9      	uxtb	r1, r3
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005922:	400a      	ands	r2, r1
 8005924:	b2d2      	uxtb	r2, r2
 8005926:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800592c:	1c5a      	adds	r2, r3, #1
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	225a      	movs	r2, #90	; 0x5a
 8005936:	5a9b      	ldrh	r3, [r3, r2]
 8005938:	b29b      	uxth	r3, r3
 800593a:	3b01      	subs	r3, #1
 800593c:	b299      	uxth	r1, r3
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	225a      	movs	r2, #90	; 0x5a
 8005942:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	225a      	movs	r2, #90	; 0x5a
 8005948:	5a9b      	ldrh	r3, [r3, r2]
 800594a:	b29b      	uxth	r3, r3
 800594c:	2b00      	cmp	r3, #0
 800594e:	d178      	bne.n	8005a42 <UART_RxISR_8BIT+0x15a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005950:	f3ef 8310 	mrs	r3, PRIMASK
 8005954:	61bb      	str	r3, [r7, #24]
  return(result);
 8005956:	69bb      	ldr	r3, [r7, #24]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005958:	63bb      	str	r3, [r7, #56]	; 0x38
 800595a:	2301      	movs	r3, #1
 800595c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800595e:	69fb      	ldr	r3, [r7, #28]
 8005960:	f383 8810 	msr	PRIMASK, r3
}
 8005964:	46c0      	nop			; (mov r8, r8)
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	681a      	ldr	r2, [r3, #0]
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	4936      	ldr	r1, [pc, #216]	; (8005a4c <UART_RxISR_8BIT+0x164>)
 8005972:	400a      	ands	r2, r1
 8005974:	601a      	str	r2, [r3, #0]
 8005976:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005978:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800597a:	6a3b      	ldr	r3, [r7, #32]
 800597c:	f383 8810 	msr	PRIMASK, r3
}
 8005980:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005982:	f3ef 8310 	mrs	r3, PRIMASK
 8005986:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8005988:	6a7b      	ldr	r3, [r7, #36]	; 0x24

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800598a:	637b      	str	r3, [r7, #52]	; 0x34
 800598c:	2301      	movs	r3, #1
 800598e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005990:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005992:	f383 8810 	msr	PRIMASK, r3
}
 8005996:	46c0      	nop			; (mov r8, r8)
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	689a      	ldr	r2, [r3, #8]
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	2101      	movs	r1, #1
 80059a4:	438a      	bics	r2, r1
 80059a6:	609a      	str	r2, [r3, #8]
 80059a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80059ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059ae:	f383 8810 	msr	PRIMASK, r3
}
 80059b2:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	2220      	movs	r2, #32
 80059b8:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	2200      	movs	r2, #0
 80059be:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80059c4:	2b01      	cmp	r3, #1
 80059c6:	d12f      	bne.n	8005a28 <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	2200      	movs	r2, #0
 80059cc:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80059ce:	f3ef 8310 	mrs	r3, PRIMASK
 80059d2:	60fb      	str	r3, [r7, #12]
  return(result);
 80059d4:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80059d6:	633b      	str	r3, [r7, #48]	; 0x30
 80059d8:	2301      	movs	r3, #1
 80059da:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80059dc:	693b      	ldr	r3, [r7, #16]
 80059de:	f383 8810 	msr	PRIMASK, r3
}
 80059e2:	46c0      	nop			; (mov r8, r8)
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	681a      	ldr	r2, [r3, #0]
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	2110      	movs	r1, #16
 80059f0:	438a      	bics	r2, r1
 80059f2:	601a      	str	r2, [r3, #0]
 80059f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059f6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80059f8:	697b      	ldr	r3, [r7, #20]
 80059fa:	f383 8810 	msr	PRIMASK, r3
}
 80059fe:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	69db      	ldr	r3, [r3, #28]
 8005a06:	2210      	movs	r2, #16
 8005a08:	4013      	ands	r3, r2
 8005a0a:	2b10      	cmp	r3, #16
 8005a0c:	d103      	bne.n	8005a16 <UART_RxISR_8BIT+0x12e>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	2210      	movs	r2, #16
 8005a14:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	2258      	movs	r2, #88	; 0x58
 8005a1a:	5a9a      	ldrh	r2, [r3, r2]
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	0011      	movs	r1, r2
 8005a20:	0018      	movs	r0, r3
 8005a22:	f7ff fb01 	bl	8005028 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005a26:	e00c      	b.n	8005a42 <UART_RxISR_8BIT+0x15a>
        HAL_UART_RxCpltCallback(huart);
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	0018      	movs	r0, r3
 8005a2c:	f7fc fb24 	bl	8002078 <HAL_UART_RxCpltCallback>
}
 8005a30:	e007      	b.n	8005a42 <UART_RxISR_8BIT+0x15a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	699a      	ldr	r2, [r3, #24]
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	2108      	movs	r1, #8
 8005a3e:	430a      	orrs	r2, r1
 8005a40:	619a      	str	r2, [r3, #24]
}
 8005a42:	46c0      	nop			; (mov r8, r8)
 8005a44:	46bd      	mov	sp, r7
 8005a46:	b010      	add	sp, #64	; 0x40
 8005a48:	bd80      	pop	{r7, pc}
 8005a4a:	46c0      	nop			; (mov r8, r8)
 8005a4c:	fffffedf 	.word	0xfffffedf

08005a50 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005a50:	b580      	push	{r7, lr}
 8005a52:	b090      	sub	sp, #64	; 0x40
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005a58:	203e      	movs	r0, #62	; 0x3e
 8005a5a:	183b      	adds	r3, r7, r0
 8005a5c:	687a      	ldr	r2, [r7, #4]
 8005a5e:	215c      	movs	r1, #92	; 0x5c
 8005a60:	5a52      	ldrh	r2, [r2, r1]
 8005a62:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005a68:	2b22      	cmp	r3, #34	; 0x22
 8005a6a:	d000      	beq.n	8005a6e <UART_RxISR_16BIT+0x1e>
 8005a6c:	e095      	b.n	8005b9a <UART_RxISR_16BIT+0x14a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681a      	ldr	r2, [r3, #0]
 8005a72:	213c      	movs	r1, #60	; 0x3c
 8005a74:	187b      	adds	r3, r7, r1
 8005a76:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8005a78:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a7e:	63bb      	str	r3, [r7, #56]	; 0x38
    *tmp = (uint16_t)(uhdata & uhMask);
 8005a80:	187b      	adds	r3, r7, r1
 8005a82:	183a      	adds	r2, r7, r0
 8005a84:	881b      	ldrh	r3, [r3, #0]
 8005a86:	8812      	ldrh	r2, [r2, #0]
 8005a88:	4013      	ands	r3, r2
 8005a8a:	b29a      	uxth	r2, r3
 8005a8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a8e:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a94:	1c9a      	adds	r2, r3, #2
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	225a      	movs	r2, #90	; 0x5a
 8005a9e:	5a9b      	ldrh	r3, [r3, r2]
 8005aa0:	b29b      	uxth	r3, r3
 8005aa2:	3b01      	subs	r3, #1
 8005aa4:	b299      	uxth	r1, r3
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	225a      	movs	r2, #90	; 0x5a
 8005aaa:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	225a      	movs	r2, #90	; 0x5a
 8005ab0:	5a9b      	ldrh	r3, [r3, r2]
 8005ab2:	b29b      	uxth	r3, r3
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d178      	bne.n	8005baa <UART_RxISR_16BIT+0x15a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005ab8:	f3ef 8310 	mrs	r3, PRIMASK
 8005abc:	617b      	str	r3, [r7, #20]
  return(result);
 8005abe:	697b      	ldr	r3, [r7, #20]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005ac0:	637b      	str	r3, [r7, #52]	; 0x34
 8005ac2:	2301      	movs	r3, #1
 8005ac4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ac6:	69bb      	ldr	r3, [r7, #24]
 8005ac8:	f383 8810 	msr	PRIMASK, r3
}
 8005acc:	46c0      	nop			; (mov r8, r8)
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	681a      	ldr	r2, [r3, #0]
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	4936      	ldr	r1, [pc, #216]	; (8005bb4 <UART_RxISR_16BIT+0x164>)
 8005ada:	400a      	ands	r2, r1
 8005adc:	601a      	str	r2, [r3, #0]
 8005ade:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ae0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ae2:	69fb      	ldr	r3, [r7, #28]
 8005ae4:	f383 8810 	msr	PRIMASK, r3
}
 8005ae8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005aea:	f3ef 8310 	mrs	r3, PRIMASK
 8005aee:	623b      	str	r3, [r7, #32]
  return(result);
 8005af0:	6a3b      	ldr	r3, [r7, #32]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005af2:	633b      	str	r3, [r7, #48]	; 0x30
 8005af4:	2301      	movs	r3, #1
 8005af6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005afa:	f383 8810 	msr	PRIMASK, r3
}
 8005afe:	46c0      	nop			; (mov r8, r8)
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	689a      	ldr	r2, [r3, #8]
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	2101      	movs	r1, #1
 8005b0c:	438a      	bics	r2, r1
 8005b0e:	609a      	str	r2, [r3, #8]
 8005b10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b12:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b16:	f383 8810 	msr	PRIMASK, r3
}
 8005b1a:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	2220      	movs	r2, #32
 8005b20:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	2200      	movs	r2, #0
 8005b26:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b2c:	2b01      	cmp	r3, #1
 8005b2e:	d12f      	bne.n	8005b90 <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	2200      	movs	r2, #0
 8005b34:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005b36:	f3ef 8310 	mrs	r3, PRIMASK
 8005b3a:	60bb      	str	r3, [r7, #8]
  return(result);
 8005b3c:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b3e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005b40:	2301      	movs	r3, #1
 8005b42:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	f383 8810 	msr	PRIMASK, r3
}
 8005b4a:	46c0      	nop			; (mov r8, r8)
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	681a      	ldr	r2, [r3, #0]
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	2110      	movs	r1, #16
 8005b58:	438a      	bics	r2, r1
 8005b5a:	601a      	str	r2, [r3, #0]
 8005b5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b5e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b60:	693b      	ldr	r3, [r7, #16]
 8005b62:	f383 8810 	msr	PRIMASK, r3
}
 8005b66:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	69db      	ldr	r3, [r3, #28]
 8005b6e:	2210      	movs	r2, #16
 8005b70:	4013      	ands	r3, r2
 8005b72:	2b10      	cmp	r3, #16
 8005b74:	d103      	bne.n	8005b7e <UART_RxISR_16BIT+0x12e>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	2210      	movs	r2, #16
 8005b7c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	2258      	movs	r2, #88	; 0x58
 8005b82:	5a9a      	ldrh	r2, [r3, r2]
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	0011      	movs	r1, r2
 8005b88:	0018      	movs	r0, r3
 8005b8a:	f7ff fa4d 	bl	8005028 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005b8e:	e00c      	b.n	8005baa <UART_RxISR_16BIT+0x15a>
        HAL_UART_RxCpltCallback(huart);
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	0018      	movs	r0, r3
 8005b94:	f7fc fa70 	bl	8002078 <HAL_UART_RxCpltCallback>
}
 8005b98:	e007      	b.n	8005baa <UART_RxISR_16BIT+0x15a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	699a      	ldr	r2, [r3, #24]
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	2108      	movs	r1, #8
 8005ba6:	430a      	orrs	r2, r1
 8005ba8:	619a      	str	r2, [r3, #24]
}
 8005baa:	46c0      	nop			; (mov r8, r8)
 8005bac:	46bd      	mov	sp, r7
 8005bae:	b010      	add	sp, #64	; 0x40
 8005bb0:	bd80      	pop	{r7, pc}
 8005bb2:	46c0      	nop			; (mov r8, r8)
 8005bb4:	fffffedf 	.word	0xfffffedf

08005bb8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005bb8:	b580      	push	{r7, lr}
 8005bba:	b082      	sub	sp, #8
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005bc0:	46c0      	nop			; (mov r8, r8)
 8005bc2:	46bd      	mov	sp, r7
 8005bc4:	b002      	add	sp, #8
 8005bc6:	bd80      	pop	{r7, pc}

08005bc8 <__libc_init_array>:
 8005bc8:	b570      	push	{r4, r5, r6, lr}
 8005bca:	2600      	movs	r6, #0
 8005bcc:	4d0c      	ldr	r5, [pc, #48]	; (8005c00 <__libc_init_array+0x38>)
 8005bce:	4c0d      	ldr	r4, [pc, #52]	; (8005c04 <__libc_init_array+0x3c>)
 8005bd0:	1b64      	subs	r4, r4, r5
 8005bd2:	10a4      	asrs	r4, r4, #2
 8005bd4:	42a6      	cmp	r6, r4
 8005bd6:	d109      	bne.n	8005bec <__libc_init_array+0x24>
 8005bd8:	2600      	movs	r6, #0
 8005bda:	f000 f821 	bl	8005c20 <_init>
 8005bde:	4d0a      	ldr	r5, [pc, #40]	; (8005c08 <__libc_init_array+0x40>)
 8005be0:	4c0a      	ldr	r4, [pc, #40]	; (8005c0c <__libc_init_array+0x44>)
 8005be2:	1b64      	subs	r4, r4, r5
 8005be4:	10a4      	asrs	r4, r4, #2
 8005be6:	42a6      	cmp	r6, r4
 8005be8:	d105      	bne.n	8005bf6 <__libc_init_array+0x2e>
 8005bea:	bd70      	pop	{r4, r5, r6, pc}
 8005bec:	00b3      	lsls	r3, r6, #2
 8005bee:	58eb      	ldr	r3, [r5, r3]
 8005bf0:	4798      	blx	r3
 8005bf2:	3601      	adds	r6, #1
 8005bf4:	e7ee      	b.n	8005bd4 <__libc_init_array+0xc>
 8005bf6:	00b3      	lsls	r3, r6, #2
 8005bf8:	58eb      	ldr	r3, [r5, r3]
 8005bfa:	4798      	blx	r3
 8005bfc:	3601      	adds	r6, #1
 8005bfe:	e7f2      	b.n	8005be6 <__libc_init_array+0x1e>
 8005c00:	08005cb0 	.word	0x08005cb0
 8005c04:	08005cb0 	.word	0x08005cb0
 8005c08:	08005cb0 	.word	0x08005cb0
 8005c0c:	08005cb4 	.word	0x08005cb4

08005c10 <memset>:
 8005c10:	0003      	movs	r3, r0
 8005c12:	1882      	adds	r2, r0, r2
 8005c14:	4293      	cmp	r3, r2
 8005c16:	d100      	bne.n	8005c1a <memset+0xa>
 8005c18:	4770      	bx	lr
 8005c1a:	7019      	strb	r1, [r3, #0]
 8005c1c:	3301      	adds	r3, #1
 8005c1e:	e7f9      	b.n	8005c14 <memset+0x4>

08005c20 <_init>:
 8005c20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c22:	46c0      	nop			; (mov r8, r8)
 8005c24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c26:	bc08      	pop	{r3}
 8005c28:	469e      	mov	lr, r3
 8005c2a:	4770      	bx	lr

08005c2c <_fini>:
 8005c2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c2e:	46c0      	nop			; (mov r8, r8)
 8005c30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c32:	bc08      	pop	{r3}
 8005c34:	469e      	mov	lr, r3
 8005c36:	4770      	bx	lr
